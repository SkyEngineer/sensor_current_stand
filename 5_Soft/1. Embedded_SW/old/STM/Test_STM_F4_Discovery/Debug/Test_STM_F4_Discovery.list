
Test_STM_F4_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b4  080084b4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084bc  080084bc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c0  080084c0  000184c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080084c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001d20  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e24  20001e24  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e47  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b08  00000000  00000000  00035f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00039a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  0003acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024deb  00000000  00000000  0003bd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c9a  00000000  00000000  00060b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca793  00000000  00000000  0007a7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144f60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a20  00000000  00000000  00144fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800843c 	.word	0x0800843c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800843c 	.word	0x0800843c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
 80004e6:	4b72      	ldr	r3, [pc, #456]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a71      	ldr	r2, [pc, #452]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004ec:	f043 0310 	orr.w	r3, r3, #16
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0310 	and.w	r3, r3, #16
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	4b6b      	ldr	r3, [pc, #428]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a6a      	ldr	r2, [pc, #424]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b68      	ldr	r3, [pc, #416]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b64      	ldr	r3, [pc, #400]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a63      	ldr	r2, [pc, #396]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b61      	ldr	r3, [pc, #388]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b5d      	ldr	r3, [pc, #372]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a5c      	ldr	r2, [pc, #368]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b5a      	ldr	r3, [pc, #360]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b56      	ldr	r3, [pc, #344]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a55      	ldr	r2, [pc, #340]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b4f      	ldr	r3, [pc, #316]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a4e      	ldr	r2, [pc, #312]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <MX_GPIO_Init+0x1e4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	4849      	ldr	r0, [pc, #292]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 8000590:	f000 ff22 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 800059a:	f000 ff1d 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059e:	2200      	movs	r2, #0
 80005a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a4:	4845      	ldr	r0, [pc, #276]	; (80006bc <MX_GPIO_Init+0x1f0>)
 80005a6:	f000 ff17 	bl	80013d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2308      	movs	r3, #8
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	483c      	ldr	r0, [pc, #240]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 80005c2:	f000 fd6d 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	4619      	mov	r1, r3
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 80005de:	f000 fd5f 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e2:	2308      	movs	r3, #8
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f2:	2305      	movs	r3, #5
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	482e      	ldr	r0, [pc, #184]	; (80006b8 <MX_GPIO_Init+0x1ec>)
 80005fe:	f000 fd4f 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	482a      	ldr	r0, [pc, #168]	; (80006c0 <MX_GPIO_Init+0x1f4>)
 8000618:	f000 fd42 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	4825      	ldr	r0, [pc, #148]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000630:	f000 fd36 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000646:	2305      	movs	r3, #5
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	4619      	mov	r1, r3
 8000650:	481c      	ldr	r0, [pc, #112]	; (80006c4 <MX_GPIO_Init+0x1f8>)
 8000652:	f000 fd25 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <MX_GPIO_Init+0x1f0>)
 8000670:	f000 fd16 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000674:	2320      	movs	r3, #32
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_GPIO_Init+0x1f0>)
 8000688:	f000 fd0a 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000690:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0x1e8>)
 80006a2:	f000 fcfd 	bl	80010a0 <HAL_GPIO_Init>

}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f000 fe81 	bl	800140c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 fa02 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000120 	.word	0x20000120
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000762:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076c:	2301      	movs	r3, #1
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <HAL_I2C_MspInit+0x8c>)
 8000780:	f000 fc8e 	bl	80010a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_I2C_MspInit+0x88>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_I2C_MspInit+0x88>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_I2S3_Init+0x58>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007cc:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_I2S3_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_I2S3_Init+0x54>)
 80007dc:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <MX_I2S3_Init+0x5c>)
 80007de:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_I2S3_Init+0x54>)
 80007f4:	f000 ff4e 	bl	8001694 <HAL_I2S_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007fe:	f000 f98b 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000174 	.word	0x20000174
 800080c:	40003c00 	.word	0x40003c00
 8000810:	00017700 	.word	0x00017700

08000814 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	; 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a31      	ldr	r2, [pc, #196]	; (8000904 <HAL_I2S_MspInit+0xf0>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d15a      	bne.n	80008fa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000848:	23c0      	movs	r3, #192	; 0xc0
 800084a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4618      	mov	r0, r3
 8000856:	f003 fabf 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000860:	f000 f95a 	bl	8000b18 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 800086e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <HAL_I2S_MspInit+0xf4>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c8:	2306      	movs	r3, #6
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <HAL_I2S_MspInit+0xf8>)
 80008d4:	f000 fbe4 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ea:	2306      	movs	r3, #6
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <HAL_I2S_MspInit+0xfc>)
 80008f6:	f000 fbd3 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3738      	adds	r7, #56	; 0x38
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40003c00 	.word	0x40003c00
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000
 8000910:	40020800 	.word	0x40020800

08000914 <Reset_all_MUX_out>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Reset_all_MUX_out(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <Reset_all_MUX_out+0x28>)
 8000920:	f000 fd5a 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <Reset_all_MUX_out+0x28>)
 800092c:	f000 fd54 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 fa7f 	bl	8000e34 <HAL_Delay>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020c00 	.word	0x40020c00

08000940 <Enable_CS>:

void Enable_CS(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
	Reset_all_MUX_out(); 										// отключаем все адресные выходы
 800094c:	f7ff ffe2 	bl	8000914 <Reset_all_MUX_out>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);	// выставяем нужный пин
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	2201      	movs	r2, #1
 8000954:	4619      	mov	r1, r3
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 fd3e 	bl	80013d8 <HAL_GPIO_WritePin>
	CDC_Transmit_FS(ANTWORT, 1);								// отвечаем, что выставили пин
 800095c:	2101      	movs	r1, #1
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <Enable_CS+0x2c>)
 8000960:	f007 f8d6 	bl	8007b10 <CDC_Transmit_FS>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000004 	.word	0x20000004

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 f9eb 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f863 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f7ff fda5 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000982:	f7ff fea1 	bl	80006c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000986:	f7ff ff15 	bl	80007b4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800098a:	f000 f8cb 	bl	8000b24 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800098e:	f007 f801 	bl	8007994 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t RxData[1] = {0};
 8000992:	2300      	movs	r3, #0
 8000994:	713b      	strb	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //обработка запроса опознания
	  CDC_Receive_FS(RxData, (uint32_t*)1);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 f8a4 	bl	8007ae8 <CDC_Receive_FS>

	  /* необходимо отработать условие, что одновременно может быть включен только один датчик
	   * то есть каждый раз обнуляем все выходы
	   */

	  switch (RxData[0]) {
 80009a0:	793b      	ldrb	r3, [r7, #4]
 80009a2:	2bff      	cmp	r3, #255	; 0xff
 80009a4:	d034      	beq.n	8000a10 <main+0xa0>
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	dc41      	bgt.n	8000a2e <main+0xbe>
 80009aa:	2bfe      	cmp	r3, #254	; 0xfe
 80009ac:	d021      	beq.n	80009f2 <main+0x82>
 80009ae:	2bfe      	cmp	r3, #254	; 0xfe
 80009b0:	dc3d      	bgt.n	8000a2e <main+0xbe>
 80009b2:	2baa      	cmp	r3, #170	; 0xaa
 80009b4:	d016      	beq.n	80009e4 <main+0x74>
 80009b6:	2baa      	cmp	r3, #170	; 0xaa
 80009b8:	dc39      	bgt.n	8000a2e <main+0xbe>
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d002      	beq.n	80009c4 <main+0x54>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d008      	beq.n	80009d4 <main+0x64>
			RxData[0] = 0;
			break;

		default:
			//CDC_Transmit_FS(0x00, 1);
			break;
 80009c2:	e034      	b.n	8000a2e <main+0xbe>
			Enable_CS(LD3_GPIO_Port, LD3_Pin);	// выставяем нужный пин
 80009c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <main+0xc8>)
 80009ca:	f7ff ffb9 	bl	8000940 <Enable_CS>
			RxData[0] = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	713b      	strb	r3, [r7, #4]
			break;
 80009d2:	e02d      	b.n	8000a30 <main+0xc0>
			Enable_CS(LD4_GPIO_Port, LD4_Pin);
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	4817      	ldr	r0, [pc, #92]	; (8000a38 <main+0xc8>)
 80009da:	f7ff ffb1 	bl	8000940 <Enable_CS>
			RxData[0] = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	713b      	strb	r3, [r7, #4]
			break;
 80009e2:	e025      	b.n	8000a30 <main+0xc0>
			CDC_Transmit_FS(ID, 1);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <main+0xcc>)
 80009e8:	f007 f892 	bl	8007b10 <CDC_Transmit_FS>
			RxData[0] = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	713b      	strb	r3, [r7, #4]
			break;
 80009f0:	e01e      	b.n	8000a30 <main+0xc0>
			Reset_all_MUX_out();
 80009f2:	f7ff ff8f 	bl	8000914 <Reset_all_MUX_out>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009fc:	480e      	ldr	r0, [pc, #56]	; (8000a38 <main+0xc8>)
 80009fe:	f000 fceb 	bl	80013d8 <HAL_GPIO_WritePin>
			CDC_Transmit_FS(ANTWORT, 1);
 8000a02:	2101      	movs	r1, #1
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <main+0xd0>)
 8000a06:	f007 f883 	bl	8007b10 <CDC_Transmit_FS>
			RxData[0] = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	713b      	strb	r3, [r7, #4]
			break;
 8000a0e:	e00f      	b.n	8000a30 <main+0xc0>
			Reset_all_MUX_out();
 8000a10:	f7ff ff80 	bl	8000914 <Reset_all_MUX_out>
			HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <main+0xc8>)
 8000a1c:	f000 fcdc 	bl	80013d8 <HAL_GPIO_WritePin>
			CDC_Transmit_FS(ANTWORT, 1);
 8000a20:	2101      	movs	r1, #1
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <main+0xd0>)
 8000a24:	f007 f874 	bl	8007b10 <CDC_Transmit_FS>
			RxData[0] = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	713b      	strb	r3, [r7, #4]
			break;
 8000a2c:	e000      	b.n	8000a30 <main+0xc0>
			break;
 8000a2e:	bf00      	nop
	}

	  HAL_Delay(10);
 8000a30:	200a      	movs	r0, #10
 8000a32:	f000 f9ff 	bl	8000e34 <HAL_Delay>
	  CDC_Receive_FS(RxData, (uint32_t*)1);
 8000a36:	e7ae      	b.n	8000996 <main+0x26>
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000004 	.word	0x20000004

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	; 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f007 fcea 	bl	800842c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a27      	ldr	r2, [pc, #156]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fd00 	bl	80034d0 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ad6:	f000 f81f 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2105      	movs	r1, #5
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 ff61 	bl	80039c0 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b04:	f000 f808 	bl	8000b18 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3750      	adds	r7, #80	; 0x50
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <MX_SPI1_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b76:	f003 fa6f 	bl	8004058 <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b80:	f7ff ffca 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200001bc 	.word	0x200001bc
 8000b8c:	40013000 	.word	0x40013000

08000b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_SPI_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_SPI_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bea:	23e0      	movs	r3, #224	; 0xe0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_SPI_MspInit+0x8c>)
 8000c06:	f000 fa4b 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013000 	.word	0x40013000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f000 f9dc 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f89a 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <OTG_FS_IRQHandler+0x10>)
 8000cca:	f001 fad3 	bl	8002274 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200016f8 	.word	0x200016f8

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f007 fb5b 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fe1f 	bl	8000970 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000d40:	080084c4 	.word	0x080084c4
  ldr r2, =_sbss
 8000d44:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000d48:	20001e24 	.word	0x20001e24

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f94f 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff ff4c 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f967 	bl	8001086 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f92f 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000214 	.word	0x20000214

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000214 	.word	0x20000214

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000010 	.word	0x20000010

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff3e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff31 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e16b      	b.n	8001394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 815a 	bne.w	800138e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d130      	bne.n	8001154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	f003 0201 	and.w	r2, r3, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b03      	cmp	r3, #3
 800115e:	d017      	beq.n	8001190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80b4 	beq.w	800138e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b60      	ldr	r3, [pc, #384]	; (80013ac <HAL_GPIO_Init+0x30c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a5f      	ldr	r2, [pc, #380]	; (80013ac <HAL_GPIO_Init+0x30c>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <HAL_GPIO_Init+0x30c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001242:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <HAL_GPIO_Init+0x310>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x314>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d02b      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <HAL_GPIO_Init+0x318>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d025      	beq.n	80012c2 <HAL_GPIO_Init+0x222>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a50      	ldr	r2, [pc, #320]	; (80013bc <HAL_GPIO_Init+0x31c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d01f      	beq.n	80012be <HAL_GPIO_Init+0x21e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_GPIO_Init+0x320>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x21a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x216>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x328>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x212>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_GPIO_Init+0x32c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x20e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_GPIO_Init+0x330>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x20a>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e00e      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012aa:	2308      	movs	r3, #8
 80012ac:	e00c      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012ae:	2306      	movs	r3, #6
 80012b0:	e00a      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x228>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x310>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_GPIO_Init+0x334>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_GPIO_Init+0x334>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f ae90 	bls.w	80010bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40021c00 	.word	0x40021c00
 80013d4:	40013c00 	.word	0x40013c00

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e12b      	b.n	8001676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff f976 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2224      	movs	r2, #36	; 0x24
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800145e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800146e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001470:	f002 fc9e 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8001474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a81      	ldr	r2, [pc, #516]	; (8001680 <HAL_I2C_Init+0x274>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d807      	bhi.n	8001490 <HAL_I2C_Init+0x84>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a80      	ldr	r2, [pc, #512]	; (8001684 <HAL_I2C_Init+0x278>)
 8001484:	4293      	cmp	r3, r2
 8001486:	bf94      	ite	ls
 8001488:	2301      	movls	r3, #1
 800148a:	2300      	movhi	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	e006      	b.n	800149e <HAL_I2C_Init+0x92>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a7d      	ldr	r2, [pc, #500]	; (8001688 <HAL_I2C_Init+0x27c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	bf94      	ite	ls
 8001498:	2301      	movls	r3, #1
 800149a:	2300      	movhi	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0e7      	b.n	8001676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <HAL_I2C_Init+0x280>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <HAL_I2C_Init+0x274>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d802      	bhi.n	80014e0 <HAL_I2C_Init+0xd4>
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	e009      	b.n	80014f4 <HAL_I2C_Init+0xe8>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a69      	ldr	r2, [pc, #420]	; (8001690 <HAL_I2C_Init+0x284>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	099b      	lsrs	r3, r3, #6
 80014f2:	3301      	adds	r3, #1
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	495c      	ldr	r1, [pc, #368]	; (8001680 <HAL_I2C_Init+0x274>)
 8001510:	428b      	cmp	r3, r1
 8001512:	d819      	bhi.n	8001548 <HAL_I2C_Init+0x13c>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e59      	subs	r1, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001522:	1c59      	adds	r1, r3, #1
 8001524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001528:	400b      	ands	r3, r1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <HAL_I2C_Init+0x138>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e59      	subs	r1, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fbb1 f3f3 	udiv	r3, r1, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	e051      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001544:	2304      	movs	r3, #4
 8001546:	e04f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d111      	bne.n	8001574 <HAL_I2C_Init+0x168>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1e58      	subs	r0, r3, #1
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	e012      	b.n	800159a <HAL_I2C_Init+0x18e>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e58      	subs	r0, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	0099      	lsls	r1, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Init+0x196>
 800159e:	2301      	movs	r3, #1
 80015a0:	e022      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10e      	bne.n	80015c8 <HAL_I2C_Init+0x1bc>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e58      	subs	r0, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	440b      	add	r3, r1
 80015b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_Init+0x1dc>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	6809      	ldr	r1, [r1, #0]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6911      	ldr	r1, [r2, #16]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68d2      	ldr	r2, [r2, #12]
 8001622:	4311      	orrs	r1, r2
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	000186a0 	.word	0x000186a0
 8001684:	001e847f 	.word	0x001e847f
 8001688:	003d08ff 	.word	0x003d08ff
 800168c:	431bde83 	.word	0x431bde83
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e128      	b.n	80018f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a90      	ldr	r2, [pc, #576]	; (8001900 <HAL_I2S_Init+0x26c>)
 80016be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff f8a7 	bl	8000814 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016dc:	f023 030f 	bic.w	r3, r3, #15
 80016e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2202      	movs	r2, #2
 80016e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d060      	beq.n	80017b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80016fa:	2310      	movs	r3, #16
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e001      	b.n	8001704 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001700:	2320      	movs	r3, #32
 8001702:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b20      	cmp	r3, #32
 800170a:	d802      	bhi.n	8001712 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001712:	2001      	movs	r0, #1
 8001714:	f002 fc42 	bl	8003f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8001718:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001722:	d125      	bne.n	8001770 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d010      	beq.n	800174e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	fbb2 f2f3 	udiv	r2, r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	461a      	mov	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	3305      	adds	r3, #5
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e01f      	b.n	800178e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	fbb2 f2f3 	udiv	r2, r2, r3
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	3305      	adds	r3, #5
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	e00e      	b.n	800178e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fbb2 f2f3 	udiv	r2, r2, r3
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	3305      	adds	r3, #5
 800178c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4a5c      	ldr	r2, [pc, #368]	; (8001904 <HAL_I2S_Init+0x270>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	08db      	lsrs	r3, r3, #3
 8001798:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e003      	b.n	80017bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d902      	bls.n	80017c8 <HAL_I2S_Init+0x134>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2bff      	cmp	r3, #255	; 0xff
 80017c6:	d907      	bls.n	80017d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f043 0210 	orr.w	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e08f      	b.n	80018f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	ea42 0103 	orr.w	r1, r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017f6:	f023 030f 	bic.w	r3, r3, #15
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6851      	ldr	r1, [r2, #4]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6892      	ldr	r2, [r2, #8]
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68d2      	ldr	r2, [r2, #12]
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6992      	ldr	r2, [r2, #24]
 800180e:	430a      	orrs	r2, r1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800181a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d161      	bne.n	80018e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a38      	ldr	r2, [pc, #224]	; (8001908 <HAL_I2S_Init+0x274>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a37      	ldr	r2, [pc, #220]	; (800190c <HAL_I2S_Init+0x278>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_I2S_Init+0x1a4>
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_I2S_Init+0x27c>)
 8001836:	e001      	b.n	800183c <HAL_I2S_Init+0x1a8>
 8001838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4932      	ldr	r1, [pc, #200]	; (800190c <HAL_I2S_Init+0x278>)
 8001844:	428a      	cmp	r2, r1
 8001846:	d101      	bne.n	800184c <HAL_I2S_Init+0x1b8>
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_I2S_Init+0x27c>)
 800184a:	e001      	b.n	8001850 <HAL_I2S_Init+0x1bc>
 800184c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001850:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001854:	f023 030f 	bic.w	r3, r3, #15
 8001858:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_I2S_Init+0x278>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_I2S_Init+0x1d4>
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_I2S_Init+0x27c>)
 8001866:	e001      	b.n	800186c <HAL_I2S_Init+0x1d8>
 8001868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800186c:	2202      	movs	r2, #2
 800186e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a25      	ldr	r2, [pc, #148]	; (800190c <HAL_I2S_Init+0x278>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_I2S_Init+0x1ea>
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_I2S_Init+0x27c>)
 800187c:	e001      	b.n	8001882 <HAL_I2S_Init+0x1ee>
 800187e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d003      	beq.n	8001898 <HAL_I2S_Init+0x204>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e001      	b.n	80018a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <HAL_I2S_Init+0x278>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_I2S_Init+0x24c>
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_I2S_Init+0x27c>)
 80018de:	e001      	b.n	80018e4 <HAL_I2S_Init+0x250>
 80018e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018e4:	897a      	ldrh	r2, [r7, #10]
 80018e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	08001a0b 	.word	0x08001a0b
 8001904:	cccccccd 	.word	0xcccccccd
 8001908:	08001b21 	.word	0x08001b21
 800190c:	40003800 	.word	0x40003800
 8001910:	40003400 	.word	0x40003400

08001914 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	1c9a      	adds	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10e      	bne.n	80019a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001994:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ffb8 	bl	8001914 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	b292      	uxth	r2, r2
 80019c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	1c9a      	adds	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10e      	bne.n	8001a02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff93 	bl	8001928 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d13a      	bne.n	8001a9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d109      	bne.n	8001a44 <I2S_IRQHandler+0x3a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	2b40      	cmp	r3, #64	; 0x40
 8001a3c:	d102      	bne.n	8001a44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb4 	bl	80019ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d126      	bne.n	8001a9c <I2S_IRQHandler+0x92>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d11f      	bne.n	8001a9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff50 	bl	800193c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d136      	bne.n	8001b16 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d109      	bne.n	8001ac6 <I2S_IRQHandler+0xbc>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	2b80      	cmp	r3, #128	; 0x80
 8001abe:	d102      	bne.n	8001ac6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff45 	bl	8001950 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d122      	bne.n	8001b16 <I2S_IRQHandler+0x10c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	d11b      	bne.n	8001b16 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001aec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff13 	bl	800193c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a92      	ldr	r2, [pc, #584]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001b3a:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b3c:	e001      	b.n	8001b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a8b      	ldr	r2, [pc, #556]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001b58:	4b8a      	ldr	r3, [pc, #552]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b5a:	e001      	b.n	8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6c:	d004      	beq.n	8001b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 8099 	bne.w	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d107      	bne.n	8001b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f925 	bl	8001ddc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f9c8 	bl	8001f3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d13a      	bne.n	8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d035      	beq.n	8001c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001bca:	4b6e      	ldr	r3, [pc, #440]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bcc:	e001      	b.n	8001bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4969      	ldr	r1, [pc, #420]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bda:	428b      	cmp	r3, r1
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001bde:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001be0:	e001      	b.n	8001be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f043 0202 	orr.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fe88 	bl	800193c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	f040 80c3 	bne.w	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80bd 	beq.w	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c60:	e001      	b.n	8001c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4944      	ldr	r1, [pc, #272]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c6e:	428b      	cmp	r3, r1
 8001c70:	d101      	bne.n	8001c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c74:	e001      	b.n	8001c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c7e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe4a 	bl	800193c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ca8:	e089      	b.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d107      	bne.n	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8be 	bl	8001e40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8fd 	bl	8001ed8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d12f      	bne.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02a      	beq.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d00:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d0e:	e001      	b.n	8001d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4919      	ldr	r1, [pc, #100]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d22:	e001      	b.n	8001d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f043 0202 	orr.w	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fdfa 	bl	800193c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d136      	bne.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d031      	beq.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d68:	e001      	b.n	8001d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4902      	ldr	r1, [pc, #8]	; (8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d76:	428b      	cmp	r3, r1
 8001d78:	d106      	bne.n	8001d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d7c:	e006      	b.n	8001d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001d7e:	bf00      	nop
 8001d80:	40003800 	.word	0x40003800
 8001d84:	40003400 	.word	0x40003400
 8001d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d90:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001da0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f043 0204 	orr.w	r2, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fdc0 	bl	800193c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dbc:	e000      	b.n	8001dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dbe:	bf00      	nop
}
 8001dc0:	bf00      	nop
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c99      	adds	r1, r3, #2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6251      	str	r1, [r2, #36]	; 0x24
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d113      	bne.n	8001e36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffc9 	bl	8001dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c99      	adds	r1, r3, #2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6251      	str	r1, [r2, #36]	; 0x24
 8001e52:	8819      	ldrh	r1, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <I2SEx_TxISR_I2SExt+0x22>
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8001e60:	e001      	b.n	8001e66 <I2SEx_TxISR_I2SExt+0x26>
 8001e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e66:	460a      	mov	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d121      	bne.n	8001ec6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <I2SEx_TxISR_I2SExt+0x50>
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8001e8e:	e001      	b.n	8001e94 <I2SEx_TxISR_I2SExt+0x54>
 8001e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8001e9c:	428b      	cmp	r3, r1
 8001e9e:	d101      	bne.n	8001ea4 <I2SEx_TxISR_I2SExt+0x64>
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8001ea2:	e001      	b.n	8001ea8 <I2SEx_TxISR_I2SExt+0x68>
 8001ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d106      	bne.n	8001ec6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff81 	bl	8001dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40003800 	.word	0x40003800
 8001ed4:	40003400 	.word	0x40003400

08001ed8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68d8      	ldr	r0, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	1c99      	adds	r1, r3, #2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001ef0:	b282      	uxth	r2, r0
 8001ef2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d113      	bne.n	8001f34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff4a 	bl	8001dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <I2SEx_RxISR_I2SExt+0x90>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <I2SEx_RxISR_I2SExt+0x16>
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8001f50:	e001      	b.n	8001f56 <I2SEx_RxISR_I2SExt+0x1a>
 8001f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f56:	68d8      	ldr	r0, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	1c99      	adds	r1, r3, #2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f62:	b282      	uxth	r2, r0
 8001f64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d121      	bne.n	8001fc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <I2SEx_RxISR_I2SExt+0x90>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <I2SEx_RxISR_I2SExt+0x50>
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8001f8a:	e001      	b.n	8001f90 <I2SEx_RxISR_I2SExt+0x54>
 8001f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <I2SEx_RxISR_I2SExt+0x90>)
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d101      	bne.n	8001fa0 <I2SEx_RxISR_I2SExt+0x64>
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8001f9e:	e001      	b.n	8001fa4 <I2SEx_RxISR_I2SExt+0x68>
 8001fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fa8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff03 	bl	8001dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40003800 	.word	0x40003800
 8001fd0:	40003400 	.word	0x40003400

08001fd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	b08f      	sub	sp, #60	; 0x3c
 8001fd8:	af0a      	add	r7, sp, #40	; 0x28
 8001fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e10f      	b.n	8002206 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d106      	bne.n	8002006 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f005 fecd 	bl	8007da0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 f9b4 	bl	8004392 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	687e      	ldr	r6, [r7, #4]
 8002032:	466d      	mov	r5, sp
 8002034:	f106 0410 	add.w	r4, r6, #16
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002044:	e885 0003 	stmia.w	r5, {r0, r1}
 8002048:	1d33      	adds	r3, r6, #4
 800204a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204c:	6838      	ldr	r0, [r7, #0]
 800204e:	f002 f88c 	bl	800416a <USB_CoreInit>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0d0      	b.n	8002206 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f002 f9a2 	bl	80043b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e04a      	b.n	800210c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	333d      	adds	r3, #61	; 0x3d
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	333c      	adds	r3, #60	; 0x3c
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	b298      	uxth	r0, r3
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	3344      	adds	r3, #68	; 0x44
 80020b2:	4602      	mov	r2, r0
 80020b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3340      	adds	r3, #64	; 0x40
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3348      	adds	r3, #72	; 0x48
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	334c      	adds	r3, #76	; 0x4c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3354      	adds	r3, #84	; 0x54
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3301      	adds	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3af      	bcc.n	8002076 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e044      	b.n	80021a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3b5      	bcc.n	800211c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	687e      	ldr	r6, [r7, #4]
 80021b8:	466d      	mov	r5, sp
 80021ba:	f106 0410 	add.w	r4, r6, #16
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ce:	1d33      	adds	r3, r6, #4
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f002 f93a 	bl	800444c <USB_DevInit>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00d      	b.n	8002206 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 fa89 	bl	8005716 <USB_DevDisconnect>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800220e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_PCD_Start+0x1c>
 8002226:	2302      	movs	r3, #2
 8002228:	e020      	b.n	800226c <HAL_PCD_Start+0x5e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	2b01      	cmp	r3, #1
 8002238:	d109      	bne.n	800224e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f002 f88c 	bl	8004370 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fa39 	bl	80056d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08d      	sub	sp, #52	; 0x34
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 faf7 	bl	800587e <USB_GetMode>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 848a 	bne.w	8002bac <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fa5b 	bl	8005758 <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8480 	beq.w	8002baa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fa48 	bl	8005758 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f002 0202 	and.w	r2, r2, #2
 80022e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fa36 	bl	8005758 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d161      	bne.n	80023ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0210 	bic.w	r2, r2, #16
 8002304:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 020f 	and.w	r2, r3, #15
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	0c5b      	lsrs	r3, r3, #17
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	2b02      	cmp	r3, #2
 8002330:	d124      	bne.n	800237c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d035      	beq.n	80023aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800234c:	b29b      	uxth	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	6a38      	ldr	r0, [r7, #32]
 8002352:	f003 f86d 	bl	8005430 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002362:	441a      	add	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002374:	441a      	add	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
 800237a:	e016      	b.n	80023aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	0c5b      	lsrs	r3, r3, #17
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	2b06      	cmp	r3, #6
 8002386:	d110      	bne.n	80023aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800238e:	2208      	movs	r2, #8
 8002390:	4619      	mov	r1, r3
 8002392:	6a38      	ldr	r0, [r7, #32]
 8002394:	f003 f84c 	bl	8005430 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	441a      	add	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0210 	orr.w	r2, r2, #16
 80023b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 f9ca 	bl	8005758 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023ce:	f040 80a7 	bne.w	8002520 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f9cf 	bl	800577e <USB_ReadDevAllOutEpInterrupt>
 80023e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023e2:	e099      	b.n	8002518 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 808e 	beq.w	800250c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f9f3 	bl	80057e6 <USB_ReadDevOutEPInterrupt>
 8002400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	2301      	movs	r3, #1
 800241c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800241e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fec3 	bl	80031ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	2308      	movs	r3, #8
 8002440:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 ff99 	bl	800337c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	2310      	movs	r3, #16
 8002464:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d030      	beq.n	80024d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d109      	bne.n	8002490 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	78db      	ldrb	r3, [r3, #3]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f005 fd84 	bl	8007fc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024cc:	461a      	mov	r2, r3
 80024ce:	2302      	movs	r3, #2
 80024d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	2320      	movs	r3, #32
 80024ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2b00      	cmp	r3, #0
 800251c:	f47f af62 	bne.w	80023e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f917 	bl	8005758 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002534:	f040 80db 	bne.w	80026ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f003 f938 	bl	80057b2 <USB_ReadDevAllInEpInterrupt>
 8002542:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002548:	e0cd      	b.n	80026e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80c2 	beq.w	80026da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f003 f95e 	bl	8005822 <USB_ReadDevInEPInterrupt>
 8002566:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d057      	beq.n	8002622 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2201      	movs	r2, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	69f9      	ldr	r1, [r7, #28]
 800258e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002592:	4013      	ands	r3, r2
 8002594:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a2:	461a      	mov	r2, r3
 80025a4:	2301      	movs	r3, #1
 80025a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d132      	bne.n	8002616 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334c      	adds	r3, #76	; 0x4c
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4403      	add	r3, r0
 80025d0:	3348      	adds	r3, #72	; 0x48
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4419      	add	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4403      	add	r3, r0
 80025e4:	334c      	adds	r3, #76	; 0x4c
 80025e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d113      	bne.n	8002616 <HAL_PCD_IRQHandler+0x3a2>
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800260e:	461a      	mov	r2, r3
 8002610:	2101      	movs	r1, #1
 8002612:	f003 f965 	bl	80058e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f005 fc4e 	bl	8007ebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002638:	461a      	mov	r2, r3
 800263a:	2308      	movs	r3, #8
 800263c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002654:	461a      	mov	r2, r3
 8002656:	2310      	movs	r3, #16
 8002658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002670:	461a      	mov	r2, r3
 8002672:	2340      	movs	r3, #64	; 0x40
 8002674:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002682:	6a38      	ldr	r0, [r7, #32]
 8002684:	f002 f846 	bl	8004714 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	3338      	adds	r3, #56	; 0x38
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	3304      	adds	r3, #4
 800269a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	78db      	ldrb	r3, [r3, #3]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2200      	movs	r2, #0
 80026a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f005 fc9b 	bl	8007fec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c2:	461a      	mov	r2, r3
 80026c4:	2302      	movs	r3, #2
 80026c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fcdb 	bl	8003090 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	3301      	adds	r3, #1
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f af2e 	bne.w	800254a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 f830 	bl	8005758 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002702:	d122      	bne.n	800274a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fec3 	bl	80034b8 <HAL_PCDEx_LPM_Callback>
 8002732:	e002      	b.n	800273a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f005 fc39 	bl	8007fac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 f802 	bl	8005758 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800275e:	d112      	bne.n	8002786 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d102      	bne.n	8002776 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f005 fbf5 	bl	8007f60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002784:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 ffe4 	bl	8005758 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	f040 80b7 	bne.w	800290c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2110      	movs	r1, #16
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 ffab 	bl	8004714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c2:	e046      	b.n	8002852 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d0:	461a      	mov	r2, r3
 80027d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e8:	0151      	lsls	r1, r2, #5
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	440a      	add	r2, r1
 80027ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800280a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281c:	0151      	lsls	r1, r2, #5
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	440a      	add	r2, r1
 8002822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800282a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	440a      	add	r2, r1
 8002842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800284a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	3301      	adds	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002858:	429a      	cmp	r2, r3
 800285a:	d3b3      	bcc.n	80027c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800286e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	2b00      	cmp	r3, #0
 8002876:	d016      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002888:	f043 030b 	orr.w	r3, r3, #11
 800288c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f043 030b 	orr.w	r3, r3, #11
 80028a2:	6453      	str	r3, [r2, #68]	; 0x44
 80028a4:	e015      	b.n	80028d2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028cc:	f043 030b 	orr.w	r3, r3, #11
 80028d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028f6:	461a      	mov	r2, r3
 80028f8:	f002 fff2 	bl	80058e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800290a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f002 ff21 	bl	8005758 <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d124      	bne.n	800296c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f002 ffb7 	bl	800589a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f001 ff6c 	bl	800480e <USB_GetDevSpeed>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681c      	ldr	r4, [r3, #0]
 8002942:	f001 fa29 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8002946:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4620      	mov	r0, r4
 8002952:	f001 fc6b 	bl	800422c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f005 fad9 	bl	8007f0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800296a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fef1 	bl	8005758 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b08      	cmp	r3, #8
 800297e:	d10a      	bne.n	8002996 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f005 fab6 	bl	8007ef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 0208 	and.w	r2, r2, #8
 8002994:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fedc 	bl	8005758 <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b80      	cmp	r3, #128	; 0x80
 80029a8:	d122      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029b6:	2301      	movs	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e014      	b.n	80029e6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fb27 	bl	800302e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	3301      	adds	r3, #1
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3e5      	bcc.n	80029bc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 feaf 	bl	8005758 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a04:	d13b      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e02b      	b.n	8002a64 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3340      	adds	r3, #64	; 0x40
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d115      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da12      	bge.n	8002a5e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	333f      	adds	r3, #63	; 0x3f
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fae8 	bl	800302e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3ce      	bcc.n	8002a0c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fe68 	bl	8005758 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a92:	d155      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a94:	2301      	movs	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	e045      	b.n	8002b26 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12e      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ac2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	da2b      	bge.n	8002b20 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ad4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d121      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1c:	6053      	str	r3, [r2, #4]
            break;
 8002b1e:	e007      	b.n	8002b30 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3301      	adds	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d3b4      	bcc.n	8002a9a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 fe07 	bl	8005758 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d10a      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 fa5a 	bl	8008010 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f002 fdf1 	bl	8005758 <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d115      	bne.n	8002bac <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f005 fa4a 	bl	800802c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	e000      	b.n	8002bac <HAL_PCD_IRQHandler+0x938>
      return;
 8002baa:	bf00      	nop
    }
  }
}
 8002bac:	3734      	adds	r7, #52	; 0x34
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}

08002bb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_SetAddress+0x1a>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e013      	b.n	8002bf4 <HAL_PCD_SetAddress+0x42>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fd4f 	bl	8005688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	70fb      	strb	r3, [r7, #3]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	803b      	strh	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da0f      	bge.n	8002c42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3338      	adds	r3, #56	; 0x38
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	705a      	strb	r2, [r3, #1]
 8002c40:	e00f      	b.n	8002c62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c6e:	883a      	ldrh	r2, [r7, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	78ba      	ldrb	r2, [r7, #2]
 8002c78:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	785b      	ldrb	r3, [r3, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c8c:	78bb      	ldrb	r3, [r7, #2]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_Open+0xaa>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_Open+0xc8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fdcf 	bl	8004858 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da0f      	bge.n	8002d00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 020f 	and.w	r2, r3, #15
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	3338      	adds	r3, #56	; 0x38
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	705a      	strb	r2, [r3, #1]
 8002cfe:	e00f      	b.n	8002d20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_PCD_EP_Close+0x6e>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e00e      	b.n	8002d58 <HAL_PCD_EP_Close+0x8c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fe0d 	bl	8004968 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	f002 f8ec 	bl	8004fb0 <USB_EP0StartXfer>
 8002dd8:	e008      	b.n	8002dec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	f001 fe9a 	bl	8004b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e18:	681b      	ldr	r3, [r3, #0]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	460b      	mov	r3, r1
 8002e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e80:	7afb      	ldrb	r3, [r7, #11]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	f002 f88a 	bl	8004fb0 <USB_EP0StartXfer>
 8002e9c:	e008      	b.n	8002eb0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	f001 fe38 	bl	8004b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d901      	bls.n	8002ed8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e050      	b.n	8002f7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da0f      	bge.n	8002f00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 020f 	and.w	r2, r3, #15
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	3338      	adds	r3, #56	; 0x38
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	705a      	strb	r2, [r3, #1]
 8002efe:	e00d      	b.n	8002f1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_EP_SetStall+0x82>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e01e      	b.n	8002f7a <HAL_PCD_EP_SetStall+0xc0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fac8 	bl	80054e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	b2d9      	uxtb	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f002 fcb8 	bl	80058e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d901      	bls.n	8002fa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e042      	b.n	8003026 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da0f      	bge.n	8002fc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 020f 	and.w	r2, r3, #15
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	3338      	adds	r3, #56	; 0x38
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
 8002fc6:	e00f      	b.n	8002fe8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_PCD_EP_ClrStall+0x86>
 8003004:	2302      	movs	r3, #2
 8003006:	e00e      	b.n	8003026 <HAL_PCD_EP_ClrStall+0xa4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fad0 	bl	80055bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800303a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da0c      	bge.n	800305c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	3338      	adds	r3, #56	; 0x38
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e00c      	b.n	8003076 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 020f 	and.w	r2, r3, #15
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	4618      	mov	r0, r3
 800307e:	f002 f8ef 	bl	8005260 <USB_EPStopXfer>
 8003082:	4603      	mov	r3, r0
 8003084:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003086:	7afb      	ldrb	r3, [r7, #11]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af02      	add	r7, sp, #8
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	3338      	adds	r3, #56	; 0x38
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d901      	bls.n	80030c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e06c      	b.n	80031a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d902      	bls.n	80030e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	3303      	adds	r3, #3
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ec:	e02b      	b.n	8003146 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	d902      	bls.n	800310a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3303      	adds	r3, #3
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003122:	b2db      	uxtb	r3, r3
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4603      	mov	r3, r0
 8003128:	6978      	ldr	r0, [r7, #20]
 800312a:	f002 f943 	bl	80053b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a1a      	ldr	r2, [r3, #32]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	441a      	add	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	b29b      	uxth	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	429a      	cmp	r2, r3
 800315a:	d809      	bhi.n	8003170 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003164:	429a      	cmp	r2, r3
 8003166:	d203      	bcs.n	8003170 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1be      	bne.n	80030ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	429a      	cmp	r2, r3
 800317a:	d811      	bhi.n	80031a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	2201      	movs	r2, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	43db      	mvns	r3, r3
 8003196:	6939      	ldr	r1, [r7, #16]
 8003198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800319c:	4013      	ands	r3, r2
 800319e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	333c      	adds	r3, #60	; 0x3c
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d17b      	bne.n	80032da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4a61      	ldr	r2, [pc, #388]	; (8003374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f240 80b9 	bls.w	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80b3 	beq.w	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320e:	461a      	mov	r2, r3
 8003210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e0a7      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	2320      	movs	r3, #32
 8003232:	6093      	str	r3, [r2, #8]
 8003234:	e098      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8093 	bne.w	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4a4b      	ldr	r2, [pc, #300]	; (8003374 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d90f      	bls.n	800326a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	e07e      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	440b      	add	r3, r1
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d114      	bne.n	80032cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032b4:	461a      	mov	r2, r3
 80032b6:	2101      	movs	r1, #1
 80032b8:	f002 fb12 	bl	80058e0 <USB_EP0_OutStart>
 80032bc:	e006      	b.n	80032cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f004 fdd8 	bl	8007e88 <HAL_PCD_DataOutStageCallback>
 80032d8:	e046      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d124      	bne.n	800332c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	e032      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	2320      	movs	r3, #32
 800331c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f004 fdaf 	bl	8007e88 <HAL_PCD_DataOutStageCallback>
 800332a:	e01d      	b.n	8003368 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d114      	bne.n	800335c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d108      	bne.n	800335c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003354:	461a      	mov	r2, r3
 8003356:	2100      	movs	r1, #0
 8003358:	f002 fac2 	bl	80058e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f004 fd90 	bl	8007e88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	4f54300a 	.word	0x4f54300a
 8003378:	4f54310a 	.word	0x4f54310a

0800337c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	333c      	adds	r3, #60	; 0x3c
 8003394:	3304      	adds	r3, #4
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a15      	ldr	r2, [pc, #84]	; (8003404 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d90e      	bls.n	80033d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	461a      	mov	r2, r3
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f004 fd47 	bl	8007e64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <PCD_EP_OutSetupPacket_int+0x88>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d90c      	bls.n	80033f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d108      	bne.n	80033f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033f0:	461a      	mov	r2, r3
 80033f2:	2101      	movs	r1, #1
 80033f4:	f002 fa74 	bl	80058e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	4f54300a 	.word	0x4f54300a

08003408 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
 8003414:	4613      	mov	r3, r2
 8003416:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003426:	883b      	ldrh	r3, [r7, #0]
 8003428:	0419      	lsls	r1, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	430a      	orrs	r2, r1
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
 8003434:	e028      	b.n	8003488 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	4413      	add	r3, r2
 8003442:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e00d      	b.n	8003466 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3340      	adds	r3, #64	; 0x40
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	4413      	add	r3, r2
 800345e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	3301      	adds	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	3b01      	subs	r3, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	d3ec      	bcc.n	800344a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003470:	883b      	ldrh	r3, [r7, #0]
 8003472:	0418      	lsls	r0, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	3b01      	subs	r3, #1
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	4302      	orrs	r2, r0
 8003480:	3340      	adds	r3, #64	; 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e267      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d075      	beq.n	80035da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ee:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d00c      	beq.n	8003514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d112      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b82      	ldr	r3, [pc, #520]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003512:	d10b      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	4b7e      	ldr	r3, [pc, #504]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x108>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d157      	bne.n	80035d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e242      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x74>
 8003536:	4b76      	ldr	r3, [pc, #472]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a75      	ldr	r2, [pc, #468]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x98>
 800354e:	4b70      	ldr	r3, [pc, #448]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6f      	ldr	r2, [pc, #444]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b6d      	ldr	r3, [pc, #436]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6c      	ldr	r2, [pc, #432]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003568:	4b69      	ldr	r3, [pc, #420]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a68      	ldr	r2, [pc, #416]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fd fc48 	bl	8000e1c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7fd fc44 	bl	8000e1c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e207      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xc0>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fc34 	bl	8000e1c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd fc30 	bl	8000e1c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1f3      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0xe8>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e6:	4b4a      	ldr	r3, [pc, #296]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1c7      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4937      	ldr	r1, [pc, #220]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e03a      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_RCC_OscConfig+0x244>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fd fbe9 	bl	8000e1c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364e:	f7fd fbe5 	bl	8000e1c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1a8      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b28      	ldr	r3, [pc, #160]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4925      	ldr	r1, [pc, #148]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_OscConfig+0x244>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fbc8 	bl	8000e1c <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003690:	f7fd fbc4 	bl	8000e1c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e187      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d036      	beq.n	8003728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_RCC_OscConfig+0x248>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fd fba8 	bl	8000e1c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fd fba4 	bl	8000e1c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e167      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_OscConfig+0x240>)
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x200>
 80036ee:	e01b      	b.n	8003728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_OscConfig+0x248>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fd fb91 	bl	8000e1c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	e00e      	b.n	800371c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fe:	f7fd fb8d 	bl	8000e1c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d907      	bls.n	800371c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e150      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
 8003710:	40023800 	.word	0x40023800
 8003714:	42470000 	.word	0x42470000
 8003718:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ea      	bne.n	80036fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 8097 	beq.w	8003864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373a:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10f      	bne.n	8003766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	4b7d      	ldr	r3, [pc, #500]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a7c      	ldr	r2, [pc, #496]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b7a      	ldr	r3, [pc, #488]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003766:	4b77      	ldr	r3, [pc, #476]	; (8003944 <HAL_RCC_OscConfig+0x474>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003772:	4b74      	ldr	r3, [pc, #464]	; (8003944 <HAL_RCC_OscConfig+0x474>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a73      	ldr	r2, [pc, #460]	; (8003944 <HAL_RCC_OscConfig+0x474>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fd fb4d 	bl	8000e1c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fd fb49 	bl	8000e1c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e10c      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_OscConfig+0x474>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x2ea>
 80037ac:	4b64      	ldr	r3, [pc, #400]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	4a63      	ldr	r2, [pc, #396]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6713      	str	r3, [r2, #112]	; 0x70
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x324>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x30c>
 80037c2:	4b5f      	ldr	r3, [pc, #380]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a5e      	ldr	r2, [pc, #376]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b5c      	ldr	r3, [pc, #368]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a5b      	ldr	r2, [pc, #364]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0x324>
 80037dc:	4b58      	ldr	r3, [pc, #352]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a54      	ldr	r2, [pc, #336]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80037ee:	f023 0304 	bic.w	r3, r3, #4
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d015      	beq.n	8003828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fd fb0e 	bl	8000e1c <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fb0a 	bl	8000e1c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0cb      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	4b49      	ldr	r3, [pc, #292]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ee      	beq.n	8003804 <HAL_RCC_OscConfig+0x334>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003828:	f7fd faf8 	bl	8000e1c <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fd faf4 	bl	8000e1c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0b5      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1ee      	bne.n	8003830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 800385e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003862:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a1 	beq.w	80039b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386e:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b08      	cmp	r3, #8
 8003878:	d05c      	beq.n	8003934 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d141      	bne.n	8003906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_OscConfig+0x478>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd fac8 	bl	8000e1c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003890:	f7fd fac4 	bl	8000e1c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e087      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	491b      	ldr	r1, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x478>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fd fa9d 	bl	8000e1c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fd fa99 	bl	8000e1c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e05c      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x416>
 8003904:	e054      	b.n	80039b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RCC_OscConfig+0x478>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fd fa86 	bl	8000e1c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fa82 	bl	8000e1c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e045      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x470>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x444>
 8003932:	e03d      	b.n	80039b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e038      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
 8003940:	40023800 	.word	0x40023800
 8003944:	40007000 	.word	0x40007000
 8003948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x4ec>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d028      	beq.n	80039ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d121      	bne.n	80039ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11a      	bne.n	80039ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800

080039c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cc      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d90c      	bls.n	80039fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d044      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d119      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7e:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e067      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4934      	ldr	r1, [pc, #208]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab0:	f7fd f9b4 	bl	8000e1c <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd f9b0 	bl	8000e1c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e04f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d20c      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd f914 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40023c00 	.word	0x40023c00
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	0800849c 	.word	0x0800849c
 8003b84:	20000008 	.word	0x20000008
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b90:	b094      	sub	sp, #80	; 0x50
 8003b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	2300      	movs	r3, #0
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba4:	4b79      	ldr	r3, [pc, #484]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d00d      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x40>
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	f200 80e1 	bhi.w	8003d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bbe:	e0db      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b73      	ldr	r3, [pc, #460]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bc4:	e0db      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bca:	e0d8      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bcc:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd6:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	2200      	movs	r2, #0
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bfe:	4622      	mov	r2, r4
 8003c00:	462b      	mov	r3, r5
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	0159      	lsls	r1, r3, #5
 8003c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c10:	0150      	lsls	r0, r2, #5
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4621      	mov	r1, r4
 8003c18:	1a51      	subs	r1, r2, r1
 8003c1a:	6139      	str	r1, [r7, #16]
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c30:	4659      	mov	r1, fp
 8003c32:	018b      	lsls	r3, r1, #6
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	018a      	lsls	r2, r1, #6
 8003c3e:	4651      	mov	r1, sl
 8003c40:	ebb2 0801 	subs.w	r8, r2, r1
 8003c44:	4659      	mov	r1, fp
 8003c46:	eb63 0901 	sbc.w	r9, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb18 0303 	adds.w	r3, r8, r3
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	eb49 0303 	adc.w	r3, r9, r3
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c7e:	4629      	mov	r1, r5
 8003c80:	024b      	lsls	r3, r1, #9
 8003c82:	4621      	mov	r1, r4
 8003c84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c88:	4621      	mov	r1, r4
 8003c8a:	024a      	lsls	r2, r1, #9
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c92:	2200      	movs	r2, #0
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c9c:	f7fc fa94 	bl	80001c8 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca8:	e058      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	f04f 0000 	mov.w	r0, #0
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	0159      	lsls	r1, r3, #5
 8003cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd6:	0150      	lsls	r0, r2, #5
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4641      	mov	r1, r8
 8003cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8003d00:	eb63 050b 	sbc.w	r5, r3, fp
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	00eb      	lsls	r3, r5, #3
 8003d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d12:	00e2      	lsls	r2, r4, #3
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	4643      	mov	r3, r8
 8003d1a:	18e3      	adds	r3, r4, r3
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	464b      	mov	r3, r9
 8003d20:	eb45 0303 	adc.w	r3, r5, r3
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d32:	4629      	mov	r1, r5
 8003d34:	028b      	lsls	r3, r1, #10
 8003d36:	4621      	mov	r1, r4
 8003d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	028a      	lsls	r2, r1, #10
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d46:	2200      	movs	r2, #0
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	61fa      	str	r2, [r7, #28]
 8003d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d50:	f7fc fa3a 	bl	80001c8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4613      	mov	r3, r2
 8003d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d76:	e002      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3750      	adds	r7, #80	; 0x50
 8003d84:	46bd      	mov	sp, r7
 8003d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	007a1200 	.word	0x007a1200

08003d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000008 	.word	0x20000008

08003db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db4:	f7ff fff0 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	080084ac 	.word	0x080084ac

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d035      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e00:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e06:	f7fd f809 	bl	8000e1c <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e0e:	f7fd f805 	bl	8000e1c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0b0      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e20:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	019a      	lsls	r2, r3, #6
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	071b      	lsls	r3, r3, #28
 8003e38:	4955      	ldr	r1, [pc, #340]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e40:	4b52      	ldr	r3, [pc, #328]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e46:	f7fc ffe9 	bl	8000e1c <HAL_GetTick>
 8003e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e4e:	f7fc ffe5 	bl	8000e1c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e090      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8083 	beq.w	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a43      	ldr	r2, [pc, #268]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e96:	4b3f      	ldr	r3, [pc, #252]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3e      	ldr	r2, [pc, #248]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea2:	f7fc ffbb 	bl	8000e1c <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fc ffb7 	bl	8000e1c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e062      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d028      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef6:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003efc:	4a24      	ldr	r2, [pc, #144]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d114      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fc ff85 	bl	8000e1c <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fc ff81 	bl	8000e1c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e02a      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ee      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d10d      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	490d      	ldr	r1, [pc, #52]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
 8003f60:	e005      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f6c:	6093      	str	r3, [r2, #8]
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	4905      	ldr	r1, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	42470068 	.word	0x42470068
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470e40 	.word	0x42470e40

08003f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d13e      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d12f      	bne.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fd0:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fd2:	617b      	str	r3, [r7, #20]
          break;
 8003fd4:	e02f      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe2:	d108      	bne.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e007      	b.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffe:	4a15      	ldr	r2, [pc, #84]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	0f1b      	lsrs	r3, r3, #28
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
          break;
 800402e:	e002      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
          break;
 8004034:	bf00      	nop
        }
      }
      break;
 8004036:	bf00      	nop
    }
  }
  return frequency;
 8004038:	697b      	ldr	r3, [r7, #20]
}
 800403a:	4618      	mov	r0, r3
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00bb8000 	.word	0x00bb8000
 8004050:	007a1200 	.word	0x007a1200
 8004054:	00f42400 	.word	0x00f42400

08004058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07b      	b.n	8004162 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2b00      	cmp	r3, #0
 8004070:	d108      	bne.n	8004084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407a:	d009      	beq.n	8004090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	e005      	b.n	8004090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc fd70 	bl	8000b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	ea42 0103 	orr.w	r1, r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	f003 0104 	and.w	r1, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	f003 0210 	and.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800416a:	b084      	sub	sp, #16
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	f107 001c 	add.w	r0, r7, #28
 8004178:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800417c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417e:	2b01      	cmp	r3, #1
 8004180:	d122      	bne.n	80041c8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f001 fbed 	bl	800599c <USB_CoreReset>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e01a      	b.n	80041fe <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f001 fbe1 	bl	800599c <USB_CoreReset>
 80041da:	4603      	mov	r3, r0
 80041dc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
 80041f0:	e005      	b.n	80041fe <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10b      	bne.n	800421c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f043 0206 	orr.w	r2, r3, #6
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004228:	b004      	add	sp, #16
 800422a:	4770      	bx	lr

0800422c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d165      	bne.n	800430c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a41      	ldr	r2, [pc, #260]	; (8004348 <USB_SetTurnaroundTime+0x11c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d906      	bls.n	8004256 <USB_SetTurnaroundTime+0x2a>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4a40      	ldr	r2, [pc, #256]	; (800434c <USB_SetTurnaroundTime+0x120>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d202      	bcs.n	8004256 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004250:	230f      	movs	r3, #15
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e062      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a3c      	ldr	r2, [pc, #240]	; (800434c <USB_SetTurnaroundTime+0x120>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d306      	bcc.n	800426c <USB_SetTurnaroundTime+0x40>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4a3b      	ldr	r2, [pc, #236]	; (8004350 <USB_SetTurnaroundTime+0x124>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d202      	bcs.n	800426c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004266:	230e      	movs	r3, #14
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e057      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a38      	ldr	r2, [pc, #224]	; (8004350 <USB_SetTurnaroundTime+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d306      	bcc.n	8004282 <USB_SetTurnaroundTime+0x56>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4a37      	ldr	r2, [pc, #220]	; (8004354 <USB_SetTurnaroundTime+0x128>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d202      	bcs.n	8004282 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800427c:	230d      	movs	r3, #13
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	e04c      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a33      	ldr	r2, [pc, #204]	; (8004354 <USB_SetTurnaroundTime+0x128>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d306      	bcc.n	8004298 <USB_SetTurnaroundTime+0x6c>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4a32      	ldr	r2, [pc, #200]	; (8004358 <USB_SetTurnaroundTime+0x12c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d802      	bhi.n	8004298 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004292:	230c      	movs	r3, #12
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e041      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a2f      	ldr	r2, [pc, #188]	; (8004358 <USB_SetTurnaroundTime+0x12c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d906      	bls.n	80042ae <USB_SetTurnaroundTime+0x82>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4a2e      	ldr	r2, [pc, #184]	; (800435c <USB_SetTurnaroundTime+0x130>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d802      	bhi.n	80042ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042a8:	230b      	movs	r3, #11
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e036      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <USB_SetTurnaroundTime+0x130>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d906      	bls.n	80042c4 <USB_SetTurnaroundTime+0x98>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <USB_SetTurnaroundTime+0x134>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042be:	230a      	movs	r3, #10
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e02b      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a26      	ldr	r2, [pc, #152]	; (8004360 <USB_SetTurnaroundTime+0x134>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d906      	bls.n	80042da <USB_SetTurnaroundTime+0xae>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a25      	ldr	r2, [pc, #148]	; (8004364 <USB_SetTurnaroundTime+0x138>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d202      	bcs.n	80042da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042d4:	2309      	movs	r3, #9
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e020      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a21      	ldr	r2, [pc, #132]	; (8004364 <USB_SetTurnaroundTime+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d306      	bcc.n	80042f0 <USB_SetTurnaroundTime+0xc4>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a20      	ldr	r2, [pc, #128]	; (8004368 <USB_SetTurnaroundTime+0x13c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d802      	bhi.n	80042f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042ea:	2308      	movs	r3, #8
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e015      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a1d      	ldr	r2, [pc, #116]	; (8004368 <USB_SetTurnaroundTime+0x13c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d906      	bls.n	8004306 <USB_SetTurnaroundTime+0xda>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <USB_SetTurnaroundTime+0x140>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d202      	bcs.n	8004306 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004300:	2307      	movs	r3, #7
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e00a      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004306:	2306      	movs	r3, #6
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e007      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004312:	2309      	movs	r3, #9
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e001      	b.n	800431c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004318:	2309      	movs	r3, #9
 800431a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	029b      	lsls	r3, r3, #10
 8004330:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	00d8acbf 	.word	0x00d8acbf
 800434c:	00e4e1c0 	.word	0x00e4e1c0
 8004350:	00f42400 	.word	0x00f42400
 8004354:	01067380 	.word	0x01067380
 8004358:	011a499f 	.word	0x011a499f
 800435c:	01312cff 	.word	0x01312cff
 8004360:	014ca43f 	.word	0x014ca43f
 8004364:	016e3600 	.word	0x016e3600
 8004368:	01a6ab1f 	.word	0x01a6ab1f
 800436c:	01e84800 	.word	0x01e84800

08004370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 0201 	bic.w	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d115      	bne.n	8004402 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7fc fd26 	bl	8000e34 <HAL_Delay>
      ms++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fa45 	bl	800587e <USB_GetMode>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d01e      	beq.n	8004438 <USB_SetCurrentMode+0x84>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b31      	cmp	r3, #49	; 0x31
 80043fe:	d9f0      	bls.n	80043e2 <USB_SetCurrentMode+0x2e>
 8004400:	e01a      	b.n	8004438 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004414:	2001      	movs	r0, #1
 8004416:	f7fc fd0d 	bl	8000e34 <HAL_Delay>
      ms++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f001 fa2c 	bl	800587e <USB_GetMode>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <USB_SetCurrentMode+0x84>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b31      	cmp	r3, #49	; 0x31
 8004430:	d9f0      	bls.n	8004414 <USB_SetCurrentMode+0x60>
 8004432:	e001      	b.n	8004438 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e005      	b.n	8004444 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b32      	cmp	r3, #50	; 0x32
 800443c:	d101      	bne.n	8004442 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800444c:	b084      	sub	sp, #16
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800445a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	e009      	b.n	8004480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3340      	adds	r3, #64	; 0x40
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3301      	adds	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0e      	cmp	r3, #14
 8004484:	d9f2      	bls.n	800446c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d11c      	bne.n	80044c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
 80044c4:	e00b      	b.n	80044de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	4619      	mov	r1, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f8:	461a      	mov	r2, r3
 80044fa:	680b      	ldr	r3, [r1, #0]
 80044fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10c      	bne.n	800451e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800450a:	2100      	movs	r1, #0
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f965 	bl	80047dc <USB_SetDevSpeed>
 8004512:	e008      	b.n	8004526 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004514:	2101      	movs	r1, #1
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f960 	bl	80047dc <USB_SetDevSpeed>
 800451c:	e003      	b.n	8004526 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800451e:	2103      	movs	r1, #3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f95b 	bl	80047dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004526:	2110      	movs	r1, #16
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8f3 	bl	8004714 <USB_FlushTxFifo>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f91f 	bl	800477c <USB_FlushRxFifo>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e043      	b.n	80045fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004588:	d118      	bne.n	80045bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e013      	b.n	80045ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	461a      	mov	r2, r3
 80045b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e008      	b.n	80045ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	461a      	mov	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	461a      	mov	r2, r3
 80045dc:	2300      	movs	r3, #0
 80045de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	461a      	mov	r2, r3
 80045ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3301      	adds	r3, #1
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3b7      	bcc.n	8004572 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e043      	b.n	8004690 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800461a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461e:	d118      	bne.n	8004652 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10a      	bne.n	800463c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	461a      	mov	r2, r3
 8004634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e013      	b.n	8004664 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	461a      	mov	r2, r3
 800464a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e008      	b.n	8004664 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2300      	movs	r3, #0
 8004662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	461a      	mov	r2, r3
 8004684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3301      	adds	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d3b7      	bcc.n	8004608 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f043 0210 	orr.w	r2, r3, #16
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <USB_DevInit+0x2c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f043 0208 	orr.w	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004700:	7dfb      	ldrb	r3, [r7, #23]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470c:	b004      	add	sp, #16
 800470e:	4770      	bx	lr
 8004710:	803c3800 	.word	0x803c3800

08004714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a13      	ldr	r2, [pc, #76]	; (8004778 <USB_FlushTxFifo+0x64>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e01b      	b.n	800476c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	daf2      	bge.n	8004722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	019b      	lsls	r3, r3, #6
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <USB_FlushTxFifo+0x64>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e006      	b.n	800476c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d0f0      	beq.n	800474c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	00030d40 	.word	0x00030d40

0800477c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <USB_FlushRxFifo+0x5c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e018      	b.n	80047cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	daf2      	bge.n	8004788 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2210      	movs	r2, #16
 80047aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <USB_FlushRxFifo+0x5c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d0f0      	beq.n	80047ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	00030d40 	.word	0x00030d40

080047dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]
 8004832:	e00a      	b.n	800484a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d002      	beq.n	8004840 <USB_GetDevSpeed+0x32>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d102      	bne.n	8004846 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004840:	2302      	movs	r3, #2
 8004842:	75fb      	strb	r3, [r7, #23]
 8004844:	e001      	b.n	800484a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004846:	230f      	movs	r3, #15
 8004848:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d13a      	bne.n	80048ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004892:	4313      	orrs	r3, r2
 8004894:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d155      	bne.n	8004958 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	791b      	ldrb	r3, [r3, #4]
 80048c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	059b      	lsls	r3, r3, #22
 80048ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d0:	4313      	orrs	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e036      	b.n	8004958 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11a      	bne.n	8004958 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800493e:	430b      	orrs	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d161      	bne.n	8004a48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499a:	d11f      	bne.n	80049dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4013      	ands	r3, r2
 80049fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a20:	4013      	ands	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0159      	lsls	r1, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	440b      	add	r3, r1
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <USB_DeactivateEndpoint+0x1b0>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
 8004a46:	e060      	b.n	8004b0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5e:	d11f      	bne.n	8004aa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	43db      	mvns	r3, r3
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0159      	lsls	r1, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	4619      	mov	r1, r3
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <USB_DeactivateEndpoint+0x1b4>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	ec337800 	.word	0xec337800
 8004b1c:	eff37800 	.word	0xeff37800

08004b20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	f040 815c 	bne.w	8004dfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d132      	bne.n	8004bb0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	0cdb      	lsrs	r3, r3, #19
 8004baa:	04db      	lsls	r3, r3, #19
 8004bac:	6113      	str	r3, [r2, #16]
 8004bae:	e074      	b.n	8004c9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	0cdb      	lsrs	r3, r3, #19
 8004bcc:	04db      	lsls	r3, r3, #19
 8004bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	440b      	add	r3, r1
 8004c0c:	1e59      	subs	r1, r3, #1
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c16:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c18:	4b9d      	ldr	r3, [pc, #628]	; (8004e90 <USB_EPStartXfer+0x370>)
 8004c1a:	400b      	ands	r3, r1
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	0148      	lsls	r0, r1, #5
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	4401      	add	r1, r0
 8004c24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	0148      	lsls	r0, r1, #5
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	4401      	add	r1, r0
 8004c4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	791b      	ldrb	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11f      	bne.n	8004c9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d14b      	bne.n	8004d38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	791b      	ldrb	r3, [r3, #4]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d128      	bne.n	8004d16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d110      	bne.n	8004cf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e00f      	b.n	8004d16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e133      	b.n	8004fa0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	791b      	ldrb	r3, [r3, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d015      	beq.n	8004d8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 811b 	beq.w	8004fa0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d86:	4313      	orrs	r3, r2
 8004d88:	634b      	str	r3, [r1, #52]	; 0x34
 8004d8a:	e109      	b.n	8004fa0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d110      	bne.n	8004dbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	e00f      	b.n	8004dde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6919      	ldr	r1, [r3, #16]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	b298      	uxth	r0, r3
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fade 	bl	80053b4 <USB_WritePacket>
 8004df8:	e0d2      	b.n	8004fa0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	0cdb      	lsrs	r3, r3, #19
 8004e16:	04db      	lsls	r3, r3, #19
 8004e18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d126      	bne.n	8004e94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	0148      	lsls	r0, r1, #5
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	4401      	add	r1, r0
 8004e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8a:	6113      	str	r3, [r2, #16]
 8004e8c:	e03a      	b.n	8004f04 <USB_EPStartXfer+0x3e4>
 8004e8e:	bf00      	nop
 8004e90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	1e5a      	subs	r2, r3, #1
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	8afa      	ldrh	r2, [r7, #22]
 8004eb0:	fb03 f202 	mul.w	r2, r3, r2
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	8afb      	ldrh	r3, [r7, #22]
 8004ec8:	04d9      	lsls	r1, r3, #19
 8004eca:	4b38      	ldr	r3, [pc, #224]	; (8004fac <USB_EPStartXfer+0x48c>)
 8004ecc:	400b      	ands	r3, r1
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	0148      	lsls	r0, r1, #5
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	0148      	lsls	r0, r1, #5
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	4401      	add	r1, r0
 8004efc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6919      	ldr	r1, [r3, #16]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	460a      	mov	r2, r1
 8004f24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	791b      	ldrb	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d128      	bne.n	8004f80 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d110      	bne.n	8004f60 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e00f      	b.n	8004f80 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	1ff80000 	.word	0x1ff80000

08004fb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f040 80ce 	bne.w	800516e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d132      	bne.n	8005040 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	0cdb      	lsrs	r3, r3, #19
 800503a:	04db      	lsls	r3, r3, #19
 800503c:	6113      	str	r3, [r2, #16]
 800503e:	e04e      	b.n	80050de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	0cdb      	lsrs	r3, r3, #19
 800505c:	04db      	lsls	r3, r3, #19
 800505e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005082:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d903      	bls.n	8005098 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ce:	6939      	ldr	r1, [r7, #16]
 80050d0:	0148      	lsls	r0, r1, #5
 80050d2:	6979      	ldr	r1, [r7, #20]
 80050d4:	4401      	add	r1, r0
 80050d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050da:	4313      	orrs	r3, r2
 80050dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d11e      	bne.n	8005122 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d009      	beq.n	8005100 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e097      	b.n	8005252 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005140:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8083 	beq.w	8005252 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f303 	lsl.w	r3, r1, r3
 8005162:	6979      	ldr	r1, [r7, #20]
 8005164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005168:	4313      	orrs	r3, r2
 800516a:	634b      	str	r3, [r1, #52]	; 0x34
 800516c:	e071      	b.n	8005252 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005188:	0cdb      	lsrs	r3, r3, #19
 800518a:	04db      	lsls	r3, r3, #19
 800518c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005200:	6939      	ldr	r1, [r7, #16]
 8005202:	0148      	lsls	r0, r1, #5
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	4401      	add	r1, r0
 8005208:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800520c:	4313      	orrs	r3, r2
 800520e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10d      	bne.n	8005232 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	6919      	ldr	r1, [r3, #16]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	460a      	mov	r2, r1
 8005230:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005250:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d14a      	bne.n	8005314 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005296:	f040 8086 	bne.w	80053a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d902      	bls.n	80052f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
          break;
 80052f6:	e056      	b.n	80053a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005310:	d0e7      	beq.n	80052e2 <USB_EPStopXfer+0x82>
 8005312:	e048      	b.n	80053a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532c:	d13b      	bne.n	80053a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005350:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005382:	4293      	cmp	r3, r2
 8005384:	d902      	bls.n	800538c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
          break;
 800538a:	e00c      	b.n	80053a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a4:	d0e7      	beq.n	8005376 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	460b      	mov	r3, r1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d123      	bne.n	8005422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053da:	88bb      	ldrh	r3, [r7, #4]
 80053dc:	3303      	adds	r3, #3
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e018      	b.n	800541a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	031a      	lsls	r2, r3, #12
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	461a      	mov	r2, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	3301      	adds	r3, #1
 8005400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	3301      	adds	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	3301      	adds	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	3301      	adds	r3, #1
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d3e2      	bcc.n	80053e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3724      	adds	r7, #36	; 0x24
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005430:	b480      	push	{r7}
 8005432:	b08b      	sub	sp, #44	; 0x2c
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	b29b      	uxth	r3, r3
 800544c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005456:	2300      	movs	r3, #0
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	e014      	b.n	8005486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	601a      	str	r2, [r3, #0]
    pDest++;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	3301      	adds	r3, #1
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	3301      	adds	r3, #1
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	3301      	adds	r3, #1
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	3301      	adds	r3, #1
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	3301      	adds	r3, #1
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	429a      	cmp	r2, r3
 800548c:	d3e6      	bcc.n	800545c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800548e:	8bfb      	ldrh	r3, [r7, #30]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01e      	beq.n	80054d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549e:	461a      	mov	r2, r3
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	701a      	strb	r2, [r3, #0]
      i++;
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	3301      	adds	r3, #1
 80054be:	623b      	str	r3, [r7, #32]
      pDest++;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	3301      	adds	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054c6:	8bfb      	ldrh	r3, [r7, #30]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054cc:	8bfb      	ldrh	r3, [r7, #30]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ea      	bne.n	80054a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	372c      	adds	r7, #44	; 0x2c
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d12c      	bne.n	8005556 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	db12      	blt.n	8005534 <USB_EPSetStall+0x54>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005532:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e02b      	b.n	80055ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	db12      	blt.n	800558e <USB_EPSetStall+0xae>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	440a      	add	r2, r1
 8005584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800558c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d128      	bne.n	800562a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	791b      	ldrb	r3, [r3, #4]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d003      	beq.n	8005608 <USB_EPClearStall+0x4c>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	791b      	ldrb	r3, [r3, #4]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d138      	bne.n	800567a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e027      	b.n	800567a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005644:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005648:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	791b      	ldrb	r3, [r3, #4]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d003      	beq.n	800565a <USB_EPClearStall+0x9e>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	791b      	ldrb	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d10f      	bne.n	800567a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005678:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f023 0302 	bic.w	r3, r3, #2
 8005706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005730:	f023 0303 	bic.w	r3, r3, #3
 8005734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	0c1b      	lsrs	r3, r3, #16
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4013      	ands	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	b29b      	uxth	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4013      	ands	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005814:	68bb      	ldr	r3, [r7, #8]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005822:	b480      	push	{r7}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	01db      	lsls	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4013      	ands	r3, r2
 800586e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005870:	68bb      	ldr	r3, [r7, #8]
}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	460b      	mov	r3, r1
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	333c      	adds	r3, #60	; 0x3c
 80058f6:	3304      	adds	r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <USB_EP0_OutStart+0xb8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d90a      	bls.n	800591a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005914:	d101      	bne.n	800591a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e037      	b.n	800598a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005938:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	f043 0318 	orr.w	r3, r3, #24
 800594c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005960:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005962:	7afb      	ldrb	r3, [r7, #11]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10f      	bne.n	8005988 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005982:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005986:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	4f54300a 	.word	0x4f54300a

0800599c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <USB_CoreReset+0x64>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e01b      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	daf2      	bge.n	80059a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <USB_CoreReset+0x64>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e006      	b.n	80059f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d0f0      	beq.n	80059d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	00030d40 	.word	0x00030d40

08005a04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a14:	f002 fca2 	bl	800835c <USBD_static_malloc>
 8005a18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d109      	bne.n	8005a34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	32b0      	adds	r2, #176	; 0xb0
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0d4      	b.n	8005bde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005a34:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005a38:	2100      	movs	r1, #0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f002 fcf6 	bl	800842c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	32b0      	adds	r2, #176	; 0xb0
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	32b0      	adds	r2, #176	; 0xb0
 8005a5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7c1b      	ldrb	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d138      	bne.n	8005ade <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a6c:	4b5e      	ldr	r3, [pc, #376]	; (8005be8 <USBD_CDC_Init+0x1e4>)
 8005a6e:	7819      	ldrb	r1, [r3, #0]
 8005a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a74:	2202      	movs	r2, #2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fb4d 	bl	8008116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a7c:	4b5a      	ldr	r3, [pc, #360]	; (8005be8 <USBD_CDC_Init+0x1e4>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3324      	adds	r3, #36	; 0x24
 8005a92:	2201      	movs	r2, #1
 8005a94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a96:	4b55      	ldr	r3, [pc, #340]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005a98:	7819      	ldrb	r1, [r3, #0]
 8005a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f002 fb38 	bl	8008116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005aa6:	4b51      	ldr	r3, [pc, #324]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005abe:	2201      	movs	r2, #1
 8005ac0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <USBD_CDC_Init+0x1ec>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 020f 	and.w	r2, r3, #15
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3326      	adds	r3, #38	; 0x26
 8005ad8:	2210      	movs	r2, #16
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e035      	b.n	8005b4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ade:	4b42      	ldr	r3, [pc, #264]	; (8005be8 <USBD_CDC_Init+0x1e4>)
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 fb15 	bl	8008116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005aec:	4b3e      	ldr	r3, [pc, #248]	; (8005be8 <USBD_CDC_Init+0x1e4>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	3324      	adds	r3, #36	; 0x24
 8005b02:	2201      	movs	r2, #1
 8005b04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005b08:	7819      	ldrb	r1, [r3, #0]
 8005b0a:	2340      	movs	r3, #64	; 0x40
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f002 fb01 	bl	8008116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005b14:	4b35      	ldr	r3, [pc, #212]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <USBD_CDC_Init+0x1ec>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	3326      	adds	r3, #38	; 0x26
 8005b46:	2210      	movs	r2, #16
 8005b48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b4a:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <USBD_CDC_Init+0x1ec>)
 8005b4c:	7819      	ldrb	r1, [r3, #0]
 8005b4e:	2308      	movs	r3, #8
 8005b50:	2203      	movs	r2, #3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f002 fadf 	bl	8008116 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <USBD_CDC_Init+0x1ec>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	2201      	movs	r2, #1
 8005b70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	33b0      	adds	r3, #176	; 0xb0
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e018      	b.n	8005bde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7c1b      	ldrb	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005bb6:	7819      	ldrb	r1, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f002 fb96 	bl	80082f4 <USBD_LL_PrepareReceive>
 8005bc8:	e008      	b.n	8005bdc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <USBD_CDC_Init+0x1e8>)
 8005bcc:	7819      	ldrb	r1, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bd4:	2340      	movs	r3, #64	; 0x40
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f002 fb8c 	bl	80082f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	2000009b 	.word	0x2000009b
 8005bec:	2000009c 	.word	0x2000009c
 8005bf0:	2000009d 	.word	0x2000009d

08005bf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005c00:	4b3a      	ldr	r3, [pc, #232]	; (8005cec <USBD_CDC_DeInit+0xf8>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f002 faab 	bl	8008162 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005c0c:	4b37      	ldr	r3, [pc, #220]	; (8005cec <USBD_CDC_DeInit+0xf8>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3324      	adds	r3, #36	; 0x24
 8005c22:	2200      	movs	r2, #0
 8005c24:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005c26:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <USBD_CDC_DeInit+0xfc>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f002 fa98 	bl	8008162 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005c32:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <USBD_CDC_DeInit+0xfc>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 020f 	and.w	r2, r3, #15
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <USBD_CDC_DeInit+0x100>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f002 fa84 	bl	8008162 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c5a:	4b26      	ldr	r3, [pc, #152]	; (8005cf4 <USBD_CDC_DeInit+0x100>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f003 020f 	and.w	r2, r3, #15
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	2200      	movs	r2, #0
 8005c72:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <USBD_CDC_DeInit+0x100>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	3326      	adds	r3, #38	; 0x26
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	32b0      	adds	r2, #176	; 0xb0
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01f      	beq.n	8005ce0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	33b0      	adds	r3, #176	; 0xb0
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	32b0      	adds	r2, #176	; 0xb0
 8005cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f002 fb58 	bl	8008378 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32b0      	adds	r2, #176	; 0xb0
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000009b 	.word	0x2000009b
 8005cf0:	2000009c 	.word	0x2000009c
 8005cf4:	2000009d 	.word	0x2000009d

08005cf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	32b0      	adds	r2, #176	; 0xb0
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0bf      	b.n	8005ea8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d050      	beq.n	8005dd6 <USBD_CDC_Setup+0xde>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	f040 80af 	bne.w	8005e98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	88db      	ldrh	r3, [r3, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d03a      	beq.n	8005db8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da1b      	bge.n	8005d84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	33b0      	adds	r3, #176	; 0xb0
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	88d2      	ldrh	r2, [r2, #6]
 8005d68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88db      	ldrh	r3, [r3, #6]
 8005d6e:	2b07      	cmp	r3, #7
 8005d70:	bf28      	it	cs
 8005d72:	2307      	movcs	r3, #7
 8005d74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	89fa      	ldrh	r2, [r7, #14]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 fd89 	bl	8007894 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d82:	e090      	b.n	8005ea6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	785a      	ldrb	r2, [r3, #1]
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	88db      	ldrh	r3, [r3, #6]
 8005d92:	2b3f      	cmp	r3, #63	; 0x3f
 8005d94:	d803      	bhi.n	8005d9e <USBD_CDC_Setup+0xa6>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88db      	ldrh	r3, [r3, #6]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	e000      	b.n	8005da0 <USBD_CDC_Setup+0xa8>
 8005d9e:	2240      	movs	r2, #64	; 0x40
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005da6:	6939      	ldr	r1, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005dae:	461a      	mov	r2, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 fd9b 	bl	80078ec <USBD_CtlPrepareRx>
      break;
 8005db6:	e076      	b.n	8005ea6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	33b0      	adds	r3, #176	; 0xb0
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	7850      	ldrb	r0, [r2, #1]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	4798      	blx	r3
      break;
 8005dd4:	e067      	b.n	8005ea6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b0b      	cmp	r3, #11
 8005ddc:	d851      	bhi.n	8005e82 <USBD_CDC_Setup+0x18a>
 8005dde:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <USBD_CDC_Setup+0xec>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e15 	.word	0x08005e15
 8005de8:	08005e91 	.word	0x08005e91
 8005dec:	08005e83 	.word	0x08005e83
 8005df0:	08005e83 	.word	0x08005e83
 8005df4:	08005e83 	.word	0x08005e83
 8005df8:	08005e83 	.word	0x08005e83
 8005dfc:	08005e83 	.word	0x08005e83
 8005e00:	08005e83 	.word	0x08005e83
 8005e04:	08005e83 	.word	0x08005e83
 8005e08:	08005e83 	.word	0x08005e83
 8005e0c:	08005e3f 	.word	0x08005e3f
 8005e10:	08005e69 	.word	0x08005e69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d107      	bne.n	8005e30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e20:	f107 030a 	add.w	r3, r7, #10
 8005e24:	2202      	movs	r2, #2
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fd33 	bl	8007894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e2e:	e032      	b.n	8005e96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fcbd 	bl	80077b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8005e3c:	e02b      	b.n	8005e96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d107      	bne.n	8005e5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e4a:	f107 030d 	add.w	r3, r7, #13
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fd1e 	bl	8007894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e58:	e01d      	b.n	8005e96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 fca8 	bl	80077b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	75fb      	strb	r3, [r7, #23]
          break;
 8005e66:	e016      	b.n	8005e96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d00f      	beq.n	8005e94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fc9b 	bl	80077b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e80:	e008      	b.n	8005e94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 fc94 	bl	80077b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8e:	e002      	b.n	8005e96 <USBD_CDC_Setup+0x19e>
          break;
 8005e90:	bf00      	nop
 8005e92:	e008      	b.n	8005ea6 <USBD_CDC_Setup+0x1ae>
          break;
 8005e94:	bf00      	nop
      }
      break;
 8005e96:	e006      	b.n	8005ea6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fc89 	bl	80077b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005ec2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	32b0      	adds	r2, #176	; 0xb0
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e065      	b.n	8005fa6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	32b0      	adds	r2, #176	; 0xb0
 8005ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3318      	adds	r3, #24
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d02f      	beq.n	8005f64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	3318      	adds	r3, #24
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	f003 010f 	and.w	r1, r3, #15
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	460b      	mov	r3, r1
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	440b      	add	r3, r1
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4403      	add	r3, r0
 8005f2c:	3348      	adds	r3, #72	; 0x48
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d112      	bne.n	8005f64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3318      	adds	r3, #24
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f56:	78f9      	ldrb	r1, [r7, #3]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 f9a8 	bl	80082b2 <USBD_LL_Transmit>
 8005f62:	e01f      	b.n	8005fa4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	33b0      	adds	r3, #176	; 0xb0
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d010      	beq.n	8005fa4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	33b0      	adds	r3, #176	; 0xb0
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	32b0      	adds	r2, #176	; 0xb0
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	32b0      	adds	r2, #176	; 0xb0
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e01a      	b.n	8006016 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f002 f9a6 	bl	8008336 <USBD_LL_GetRxDataSize>
 8005fea:	4602      	mov	r2, r0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	33b0      	adds	r3, #176	; 0xb0
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006010:	4611      	mov	r1, r2
 8006012:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	32b0      	adds	r2, #176	; 0xb0
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800603c:	2303      	movs	r3, #3
 800603e:	e025      	b.n	800608c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	33b0      	adds	r3, #176	; 0xb0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <USBD_CDC_EP0_RxReady+0x6c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800605a:	2bff      	cmp	r3, #255	; 0xff
 800605c:	d015      	beq.n	800608a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	33b0      	adds	r3, #176	; 0xb0
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006076:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800607e:	b292      	uxth	r2, r2
 8006080:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800609c:	2182      	movs	r1, #130	; 0x82
 800609e:	4818      	ldr	r0, [pc, #96]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060a0:	f000 fd4f 	bl	8006b42 <USBD_GetEpDesc>
 80060a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060a6:	2101      	movs	r1, #1
 80060a8:	4815      	ldr	r0, [pc, #84]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060aa:	f000 fd4a 	bl	8006b42 <USBD_GetEpDesc>
 80060ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	4813      	ldr	r0, [pc, #76]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80060b4:	f000 fd45 	bl	8006b42 <USBD_GetEpDesc>
 80060b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2210      	movs	r2, #16
 80060c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d006      	beq.n	80060da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d4:	711a      	strb	r2, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d006      	beq.n	80060ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e8:	711a      	strb	r2, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2243      	movs	r2, #67	; 0x43
 80060f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060f4:	4b02      	ldr	r3, [pc, #8]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000058 	.word	0x20000058

08006104 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800610c:	2182      	movs	r1, #130	; 0x82
 800610e:	4818      	ldr	r0, [pc, #96]	; (8006170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006110:	f000 fd17 	bl	8006b42 <USBD_GetEpDesc>
 8006114:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006116:	2101      	movs	r1, #1
 8006118:	4815      	ldr	r0, [pc, #84]	; (8006170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800611a:	f000 fd12 	bl	8006b42 <USBD_GetEpDesc>
 800611e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006120:	2181      	movs	r1, #129	; 0x81
 8006122:	4813      	ldr	r0, [pc, #76]	; (8006170 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006124:	f000 fd0d 	bl	8006b42 <USBD_GetEpDesc>
 8006128:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2210      	movs	r2, #16
 8006134:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d006      	beq.n	800614a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2200      	movs	r2, #0
 8006140:	711a      	strb	r2, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f042 0202 	orr.w	r2, r2, #2
 8006148:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	711a      	strb	r2, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f042 0202 	orr.w	r2, r2, #2
 800615c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2243      	movs	r2, #67	; 0x43
 8006162:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000058 	.word	0x20000058

08006174 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800617c:	2182      	movs	r1, #130	; 0x82
 800617e:	4818      	ldr	r0, [pc, #96]	; (80061e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006180:	f000 fcdf 	bl	8006b42 <USBD_GetEpDesc>
 8006184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006186:	2101      	movs	r1, #1
 8006188:	4815      	ldr	r0, [pc, #84]	; (80061e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800618a:	f000 fcda 	bl	8006b42 <USBD_GetEpDesc>
 800618e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006190:	2181      	movs	r1, #129	; 0x81
 8006192:	4813      	ldr	r0, [pc, #76]	; (80061e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006194:	f000 fcd5 	bl	8006b42 <USBD_GetEpDesc>
 8006198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2210      	movs	r2, #16
 80061a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d006      	beq.n	80061ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b4:	711a      	strb	r2, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c8:	711a      	strb	r2, [r3, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2243      	movs	r2, #67	; 0x43
 80061d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80061d4:	4b02      	ldr	r3, [pc, #8]	; (80061e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000058 	.word	0x20000058

080061e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	220a      	movs	r2, #10
 80061f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061f2:	4b03      	ldr	r3, [pc, #12]	; (8006200 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000014 	.word	0x20000014

08006204 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	e009      	b.n	800622c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	33b0      	adds	r3, #176	; 0xb0
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	32b0      	adds	r2, #176	; 0xb0
 800624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006252:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	e008      	b.n	8006270 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32b0      	adds	r2, #176	; 0xb0
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e004      	b.n	80062aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32b0      	adds	r2, #176	; 0xb0
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32b0      	adds	r2, #176	; 0xb0
 80062de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e025      	b.n	8006336 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11f      	bne.n	8006334 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <USBD_CDC_TransmitPacket+0x88>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4403      	add	r3, r0
 8006316:	3318      	adds	r3, #24
 8006318:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <USBD_CDC_TransmitPacket+0x88>)
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 ffc1 	bl	80082b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000009b 	.word	0x2000009b

08006344 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32b0      	adds	r2, #176	; 0xb0
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32b0      	adds	r2, #176	; 0xb0
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	e018      	b.n	80063a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	7c1b      	ldrb	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <USBD_CDC_ReceivePacket+0x68>)
 800637c:	7819      	ldrb	r1, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 ffb3 	bl	80082f4 <USBD_LL_PrepareReceive>
 800638e:	e008      	b.n	80063a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <USBD_CDC_ReceivePacket+0x68>)
 8006392:	7819      	ldrb	r1, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 ffa9 	bl	80082f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	2000009c 	.word	0x2000009c

080063b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01f      	b.n	8006408 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fe23 	bl	8008048 <USBD_LL_Init>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	e025      	b.n	8006474 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	32ae      	adds	r2, #174	; 0xae
 800643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	32ae      	adds	r2, #174	; 0xae
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	f107 020e 	add.w	r2, r7, #14
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	4602      	mov	r2, r0
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fe2b 	bl	80080e0 <USBD_LL_Start>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	78fa      	ldrb	r2, [r7, #3]
 80064ce:	4611      	mov	r1, r2
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	78fa      	ldrb	r2, [r7, #3]
 80064fc:	4611      	mov	r1, r2
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f908 	bl	800773e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2b02      	cmp	r3, #2
 8006550:	d01a      	beq.n	8006588 <USBD_LL_SetupStage+0x72>
 8006552:	2b02      	cmp	r3, #2
 8006554:	d822      	bhi.n	800659c <USBD_LL_SetupStage+0x86>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <USBD_LL_SetupStage+0x4a>
 800655a:	2b01      	cmp	r3, #1
 800655c:	d00a      	beq.n	8006574 <USBD_LL_SetupStage+0x5e>
 800655e:	e01d      	b.n	800659c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb5f 	bl	8006c2c <USBD_StdDevReq>
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
      break;
 8006572:	e020      	b.n	80065b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fbc7 	bl	8006d10 <USBD_StdItfReq>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]
      break;
 8006586:	e016      	b.n	80065b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc29 	bl	8006de8 <USBD_StdEPReq>
 8006596:	4603      	mov	r3, r0
 8006598:	73fb      	strb	r3, [r7, #15]
      break;
 800659a:	e00c      	b.n	80065b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fdf8 	bl	80081a0 <USBD_LL_StallEP>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
      break;
 80065b4:	bf00      	nop
  }

  return ret;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	460b      	mov	r3, r1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d16e      	bne.n	80066b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f040 8098 	bne.w	800671c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d913      	bls.n	8006620 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	1ad2      	subs	r2, r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4293      	cmp	r3, r2
 8006610:	bf28      	it	cs
 8006612:	4613      	movcs	r3, r2
 8006614:	461a      	mov	r2, r3
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f001 f984 	bl	8007926 <USBD_CtlContinueRx>
 800661e:	e07d      	b.n	800671c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2b02      	cmp	r3, #2
 800662c:	d014      	beq.n	8006658 <USBD_LL_DataOutStage+0x98>
 800662e:	2b02      	cmp	r3, #2
 8006630:	d81d      	bhi.n	800666e <USBD_LL_DataOutStage+0xae>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <USBD_LL_DataOutStage+0x7c>
 8006636:	2b01      	cmp	r3, #1
 8006638:	d003      	beq.n	8006642 <USBD_LL_DataOutStage+0x82>
 800663a:	e018      	b.n	800666e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	75bb      	strb	r3, [r7, #22]
            break;
 8006640:	e018      	b.n	8006674 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006648:	b2db      	uxtb	r3, r3
 800664a:	4619      	mov	r1, r3
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fa5e 	bl	8006b0e <USBD_CoreFindIF>
 8006652:	4603      	mov	r3, r0
 8006654:	75bb      	strb	r3, [r7, #22]
            break;
 8006656:	e00d      	b.n	8006674 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800665e:	b2db      	uxtb	r3, r3
 8006660:	4619      	mov	r1, r3
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa60 	bl	8006b28 <USBD_CoreFindEP>
 8006668:	4603      	mov	r3, r0
 800666a:	75bb      	strb	r3, [r7, #22]
            break;
 800666c:	e002      	b.n	8006674 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	75bb      	strb	r3, [r7, #22]
            break;
 8006672:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006674:	7dbb      	ldrb	r3, [r7, #22]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d119      	bne.n	80066ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d113      	bne.n	80066ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006686:	7dba      	ldrb	r2, [r7, #22]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	32ae      	adds	r2, #174	; 0xae
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006696:	7dba      	ldrb	r2, [r7, #22]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800669e:	7dba      	ldrb	r2, [r7, #22]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	32ae      	adds	r2, #174	; 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f001 f94a 	bl	8007948 <USBD_CtlSendStatus>
 80066b4:	e032      	b.n	800671c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fa31 	bl	8006b28 <USBD_CoreFindEP>
 80066c6:	4603      	mov	r3, r0
 80066c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ca:	7dbb      	ldrb	r3, [r7, #22]
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	d025      	beq.n	800671c <USBD_LL_DataOutStage+0x15c>
 80066d0:	7dbb      	ldrb	r3, [r7, #22]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d122      	bne.n	800671c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d117      	bne.n	8006712 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80066e2:	7dba      	ldrb	r2, [r7, #22]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	32ae      	adds	r2, #174	; 0xae
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00f      	beq.n	8006712 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066f2:	7dba      	ldrb	r2, [r7, #22]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066fa:	7dba      	ldrb	r2, [r7, #22]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	32ae      	adds	r2, #174	; 0xae
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	7afa      	ldrb	r2, [r7, #11]
 8006708:	4611      	mov	r1, r2
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	e000      	b.n	800671e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b086      	sub	sp, #24
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	460b      	mov	r3, r1
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d16f      	bne.n	800681a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3314      	adds	r3, #20
 800673e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006746:	2b02      	cmp	r3, #2
 8006748:	d15a      	bne.n	8006800 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	429a      	cmp	r2, r3
 8006754:	d914      	bls.n	8006780 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	461a      	mov	r2, r3
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f001 f8ac 	bl	80078ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006772:	2300      	movs	r3, #0
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 fdbb 	bl	80082f4 <USBD_LL_PrepareReceive>
 800677e:	e03f      	b.n	8006800 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	429a      	cmp	r2, r3
 800678a:	d11c      	bne.n	80067c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006794:	429a      	cmp	r2, r3
 8006796:	d316      	bcc.n	80067c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d20f      	bcs.n	80067c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067a6:	2200      	movs	r2, #0
 80067a8:	2100      	movs	r1, #0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 f88d 	bl	80078ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b8:	2300      	movs	r3, #0
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 fd98 	bl	80082f4 <USBD_LL_PrepareReceive>
 80067c4:	e01c      	b.n	8006800 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d10f      	bne.n	80067f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f2:	2180      	movs	r1, #128	; 0x80
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 fcd3 	bl	80081a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f001 f8b7 	bl	800796e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03a      	beq.n	8006880 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff fe42 	bl	8006494 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006818:	e032      	b.n	8006880 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006820:	b2db      	uxtb	r3, r3
 8006822:	4619      	mov	r1, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f97f 	bl	8006b28 <USBD_CoreFindEP>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	2bff      	cmp	r3, #255	; 0xff
 8006832:	d025      	beq.n	8006880 <USBD_LL_DataInStage+0x15a>
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d122      	bne.n	8006880 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d11c      	bne.n	8006880 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006846:	7dfa      	ldrb	r2, [r7, #23]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	32ae      	adds	r2, #174	; 0xae
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d014      	beq.n	8006880 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006856:	7dfa      	ldrb	r2, [r7, #23]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800685e:	7dfa      	ldrb	r2, [r7, #23]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	32ae      	adds	r2, #174	; 0xae
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	7afa      	ldrb	r2, [r7, #11]
 800686c:	4611      	mov	r1, r2
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	4798      	blx	r3
 8006872:	4603      	mov	r3, r0
 8006874:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006876:	7dbb      	ldrb	r3, [r7, #22]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800687c:	7dbb      	ldrb	r3, [r7, #22]
 800687e:	e000      	b.n	8006882 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d014      	beq.n	80068f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6852      	ldr	r2, [r2, #4]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	4611      	mov	r1, r2
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068ec:	2303      	movs	r3, #3
 80068ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068f0:	2340      	movs	r3, #64	; 0x40
 80068f2:	2200      	movs	r2, #0
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fc0d 	bl	8008116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800690c:	2340      	movs	r3, #64	; 0x40
 800690e:	2200      	movs	r2, #0
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fbff 	bl	8008116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2240      	movs	r2, #64	; 0x40
 8006922:	621a      	str	r2, [r3, #32]

  return ret;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	b2da      	uxtb	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b04      	cmp	r3, #4
 800698c:	d106      	bne.n	800699c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006994:	b2da      	uxtb	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d110      	bne.n	80069e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00b      	beq.n	80069e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	32ae      	adds	r2, #174	; 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e01c      	b.n	8006a46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d115      	bne.n	8006a44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	32ae      	adds	r2, #174	; 0xae
 8006a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	32ae      	adds	r2, #174	; 0xae
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	32ae      	adds	r2, #174	; 0xae
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e01c      	b.n	8006aaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d115      	bne.n	8006aa8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32ae      	adds	r2, #174	; 0xae
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32ae      	adds	r2, #174	; 0xae
 8006a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6852      	ldr	r2, [r2, #4]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	4611      	mov	r1, r2
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006b34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d920      	bls.n	8006bac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b72:	e013      	b.n	8006b9c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b74:	f107 030a 	add.w	r3, r7, #10
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6978      	ldr	r0, [r7, #20]
 8006b7c:	f000 f81b 	bl	8006bb6 <USBD_GetNextDesc>
 8006b80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d108      	bne.n	8006b9c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	789b      	ldrb	r3, [r3, #2]
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d008      	beq.n	8006baa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	885b      	ldrh	r3, [r3, #2]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d8e5      	bhi.n	8006b74 <USBD_GetEpDesc+0x32>
 8006ba8:	e000      	b.n	8006bac <USBD_GetEpDesc+0x6a>
          break;
 8006baa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006bac:	693b      	ldr	r3, [r7, #16]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	881a      	ldrh	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006be2:	68fb      	ldr	r3, [r7, #12]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3301      	adds	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c0e:	8a3b      	ldrh	r3, [r7, #16]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	b21a      	sxth	r2, r3
 8006c14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b21b      	sxth	r3, r3
 8006c1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d005      	beq.n	8006c52 <USBD_StdDevReq+0x26>
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d857      	bhi.n	8006cfa <USBD_StdDevReq+0xce>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00f      	beq.n	8006c6e <USBD_StdDevReq+0x42>
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d153      	bne.n	8006cfa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	32ae      	adds	r2, #174	; 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	4798      	blx	r3
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6c:	e04a      	b.n	8006d04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	d83b      	bhi.n	8006cee <USBD_StdDevReq+0xc2>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <USBD_StdDevReq+0x50>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006cef 	.word	0x08006cef
 8006c88:	08006cdb 	.word	0x08006cdb
 8006c8c:	08006cef 	.word	0x08006cef
 8006c90:	08006caf 	.word	0x08006caf
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006cef 	.word	0x08006cef
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cb9 	.word	0x08006cb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa3c 	bl	8007124 <USBD_GetDescriptor>
          break;
 8006cac:	e024      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fba1 	bl	80073f8 <USBD_SetAddress>
          break;
 8006cb6:	e01f      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fbe0 	bl	8007480 <USBD_SetConfig>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
          break;
 8006cc4:	e018      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc83 	bl	80075d4 <USBD_GetConfig>
          break;
 8006cce:	e013      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fcb4 	bl	8007640 <USBD_GetStatus>
          break;
 8006cd8:	e00e      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fce3 	bl	80076a8 <USBD_SetFeature>
          break;
 8006ce2:	e009      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fd07 	bl	80076fa <USBD_ClrFeature>
          break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fd5e 	bl	80077b2 <USBD_CtlError>
          break;
 8006cf6:	bf00      	nop
      }
      break;
 8006cf8:	e004      	b.n	8006d04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fd58 	bl	80077b2 <USBD_CtlError>
      break;
 8006d02:	bf00      	nop
  }

  return ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop

08006d10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d005      	beq.n	8006d36 <USBD_StdItfReq+0x26>
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d852      	bhi.n	8006dd4 <USBD_StdItfReq+0xc4>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <USBD_StdItfReq+0x26>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d14e      	bne.n	8006dd4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d840      	bhi.n	8006dc6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	889b      	ldrh	r3, [r3, #4]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d836      	bhi.n	8006dbc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fed9 	bl	8006b0e <USBD_CoreFindIF>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	2bff      	cmp	r3, #255	; 0xff
 8006d64:	d01d      	beq.n	8006da2 <USBD_StdItfReq+0x92>
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d11a      	bne.n	8006da2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d6c:	7bba      	ldrb	r2, [r7, #14]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32ae      	adds	r2, #174	; 0xae
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00f      	beq.n	8006d9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d7c:	7bba      	ldrb	r2, [r7, #14]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d84:	7bba      	ldrb	r2, [r7, #14]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	32ae      	adds	r2, #174	; 0xae
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d9a:	e004      	b.n	8006da6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006da0:	e001      	b.n	8006da6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006da2:	2303      	movs	r3, #3
 8006da4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d110      	bne.n	8006dd0 <USBD_StdItfReq+0xc0>
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10d      	bne.n	8006dd0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fdc7 	bl	8007948 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006dba:	e009      	b.n	8006dd0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fcf7 	bl	80077b2 <USBD_CtlError>
          break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fcf2 	bl	80077b2 <USBD_CtlError>
          break;
 8006dce:	e000      	b.n	8006dd2 <USBD_StdItfReq+0xc2>
          break;
 8006dd0:	bf00      	nop
      }
      break;
 8006dd2:	e004      	b.n	8006dde <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fceb 	bl	80077b2 <USBD_CtlError>
      break;
 8006ddc:	bf00      	nop
  }

  return ret;
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d007      	beq.n	8006e18 <USBD_StdEPReq+0x30>
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	f200 817f 	bhi.w	800710c <USBD_StdEPReq+0x324>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d02a      	beq.n	8006e68 <USBD_StdEPReq+0x80>
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	f040 817a 	bne.w	800710c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fe83 	bl	8006b28 <USBD_CoreFindEP>
 8006e22:	4603      	mov	r3, r0
 8006e24:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e26:	7b7b      	ldrb	r3, [r7, #13]
 8006e28:	2bff      	cmp	r3, #255	; 0xff
 8006e2a:	f000 8174 	beq.w	8007116 <USBD_StdEPReq+0x32e>
 8006e2e:	7b7b      	ldrb	r3, [r7, #13]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 8170 	bne.w	8007116 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006e36:	7b7a      	ldrb	r2, [r7, #13]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e3e:	7b7a      	ldrb	r2, [r7, #13]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	32ae      	adds	r2, #174	; 0xae
 8006e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8163 	beq.w	8007116 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	; 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e66:	e156      	b.n	8007116 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	785b      	ldrb	r3, [r3, #1]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d008      	beq.n	8006e82 <USBD_StdEPReq+0x9a>
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	f300 8145 	bgt.w	8007100 <USBD_StdEPReq+0x318>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 809b 	beq.w	8006fb2 <USBD_StdEPReq+0x1ca>
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d03c      	beq.n	8006efa <USBD_StdEPReq+0x112>
 8006e80:	e13e      	b.n	8007100 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d002      	beq.n	8006e94 <USBD_StdEPReq+0xac>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d016      	beq.n	8006ec0 <USBD_StdEPReq+0xd8>
 8006e92:	e02c      	b.n	8006eee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <USBD_StdEPReq+0xce>
 8006e9a:	7bbb      	ldrb	r3, [r7, #14]
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d00a      	beq.n	8006eb6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f97b 	bl	80081a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eaa:	2180      	movs	r1, #128	; 0x80
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f977 	bl	80081a0 <USBD_LL_StallEP>
 8006eb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006eb4:	e020      	b.n	8006ef8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc7a 	bl	80077b2 <USBD_CtlError>
              break;
 8006ebe:	e01b      	b.n	8006ef8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	885b      	ldrh	r3, [r3, #2]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10e      	bne.n	8006ee6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <USBD_StdEPReq+0xfe>
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d008      	beq.n	8006ee6 <USBD_StdEPReq+0xfe>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	88db      	ldrh	r3, [r3, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f95d 	bl	80081a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fd2e 	bl	8007948 <USBD_CtlSendStatus>

              break;
 8006eec:	e004      	b.n	8006ef8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fc5e 	bl	80077b2 <USBD_CtlError>
              break;
 8006ef6:	bf00      	nop
          }
          break;
 8006ef8:	e107      	b.n	800710a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d002      	beq.n	8006f0c <USBD_StdEPReq+0x124>
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d016      	beq.n	8006f38 <USBD_StdEPReq+0x150>
 8006f0a:	e04b      	b.n	8006fa4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <USBD_StdEPReq+0x146>
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d00a      	beq.n	8006f2e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f93f 	bl	80081a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f93b 	bl	80081a0 <USBD_LL_StallEP>
 8006f2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f2c:	e040      	b.n	8006fb0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fc3e 	bl	80077b2 <USBD_CtlError>
              break;
 8006f36:	e03b      	b.n	8006fb0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d136      	bne.n	8006fae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 f945 	bl	80081de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fcf7 	bl	8007948 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fde2 	bl	8006b28 <USBD_CoreFindEP>
 8006f64:	4603      	mov	r3, r0
 8006f66:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f68:	7b7b      	ldrb	r3, [r7, #13]
 8006f6a:	2bff      	cmp	r3, #255	; 0xff
 8006f6c:	d01f      	beq.n	8006fae <USBD_StdEPReq+0x1c6>
 8006f6e:	7b7b      	ldrb	r3, [r7, #13]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11c      	bne.n	8006fae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f74:	7b7a      	ldrb	r2, [r7, #13]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f7c:	7b7a      	ldrb	r2, [r7, #13]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	; 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d010      	beq.n	8006fae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f8c:	7b7a      	ldrb	r2, [r7, #13]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32ae      	adds	r2, #174	; 0xae
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc03 	bl	80077b2 <USBD_CtlError>
              break;
 8006fac:	e000      	b.n	8006fb0 <USBD_StdEPReq+0x1c8>
              break;
 8006fae:	bf00      	nop
          }
          break;
 8006fb0:	e0ab      	b.n	800710a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d002      	beq.n	8006fc4 <USBD_StdEPReq+0x1dc>
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d032      	beq.n	8007028 <USBD_StdEPReq+0x240>
 8006fc2:	e097      	b.n	80070f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <USBD_StdEPReq+0x1f2>
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d004      	beq.n	8006fda <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fbed 	bl	80077b2 <USBD_CtlError>
                break;
 8006fd8:	e091      	b.n	80070fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	da0b      	bge.n	8006ffa <USBD_StdEPReq+0x212>
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe8:	4613      	mov	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	3310      	adds	r3, #16
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	e00b      	b.n	8007012 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	3304      	adds	r3, #4
 8007012:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2202      	movs	r2, #2
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc37 	bl	8007894 <USBD_CtlSendData>
              break;
 8007026:	e06a      	b.n	80070fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800702c:	2b00      	cmp	r3, #0
 800702e:	da11      	bge.n	8007054 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d117      	bne.n	800707a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbb0 	bl	80077b2 <USBD_CtlError>
                  break;
 8007052:	e054      	b.n	80070fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007054:	7bbb      	ldrb	r3, [r7, #14]
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb9d 	bl	80077b2 <USBD_CtlError>
                  break;
 8007078:	e041      	b.n	80070fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da0b      	bge.n	800709a <USBD_StdEPReq+0x2b2>
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	3310      	adds	r3, #16
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	3304      	adds	r3, #4
 8007098:	e00b      	b.n	80070b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	4413      	add	r3, r2
 80070b0:	3304      	adds	r3, #4
 80070b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <USBD_StdEPReq+0x2d8>
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b80      	cmp	r3, #128	; 0x80
 80070be:	d103      	bne.n	80070c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e00e      	b.n	80070e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f8a5 	bl	800821c <USBD_LL_IsStallEP>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2201      	movs	r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e002      	b.n	80070e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2202      	movs	r2, #2
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbd1 	bl	8007894 <USBD_CtlSendData>
              break;
 80070f2:	e004      	b.n	80070fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fb5b 	bl	80077b2 <USBD_CtlError>
              break;
 80070fc:	bf00      	nop
          }
          break;
 80070fe:	e004      	b.n	800710a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb55 	bl	80077b2 <USBD_CtlError>
          break;
 8007108:	bf00      	nop
      }
      break;
 800710a:	e005      	b.n	8007118 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fb4f 	bl	80077b2 <USBD_CtlError>
      break;
 8007114:	e000      	b.n	8007118 <USBD_StdEPReq+0x330>
      break;
 8007116:	bf00      	nop
  }

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	2b06      	cmp	r3, #6
 8007146:	f200 8128 	bhi.w	800739a <USBD_GetDescriptor+0x276>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <USBD_GetDescriptor+0x2c>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	0800716d 	.word	0x0800716d
 8007154:	08007185 	.word	0x08007185
 8007158:	080071c5 	.word	0x080071c5
 800715c:	0800739b 	.word	0x0800739b
 8007160:	0800739b 	.word	0x0800739b
 8007164:	0800733b 	.word	0x0800733b
 8007168:	08007367 	.word	0x08007367
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
      break;
 8007182:	e112      	b.n	80073aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7c1b      	ldrb	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10d      	bne.n	80071a8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f107 0208 	add.w	r2, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	2202      	movs	r2, #2
 80071a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071a6:	e100      	b.n	80073aa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f107 0208 	add.w	r2, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	2202      	movs	r2, #2
 80071c0:	701a      	strb	r2, [r3, #0]
      break;
 80071c2:	e0f2      	b.n	80073aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	f200 80ac 	bhi.w	8007328 <USBD_GetDescriptor+0x204>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <USBD_GetDescriptor+0xb4>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071f1 	.word	0x080071f1
 80071dc:	08007225 	.word	0x08007225
 80071e0:	08007259 	.word	0x08007259
 80071e4:	0800728d 	.word	0x0800728d
 80071e8:	080072c1 	.word	0x080072c1
 80071ec:	080072f5 	.word	0x080072f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007212:	e091      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 facb 	bl	80077b2 <USBD_CtlError>
            err++;
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	3301      	adds	r3, #1
 8007220:	72fb      	strb	r3, [r7, #11]
          break;
 8007222:	e089      	b.n	8007338 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7c12      	ldrb	r2, [r2, #16]
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007246:	e077      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fab1 	bl	80077b2 <USBD_CtlError>
            err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
          break;
 8007256:	e06f      	b.n	8007338 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	7c12      	ldrb	r2, [r2, #16]
 8007270:	f107 0108 	add.w	r1, r7, #8
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800727a:	e05d      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa97 	bl	80077b2 <USBD_CtlError>
            err++;
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	3301      	adds	r3, #1
 8007288:	72fb      	strb	r3, [r7, #11]
          break;
 800728a:	e055      	b.n	8007338 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ae:	e043      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa7d 	bl	80077b2 <USBD_CtlError>
            err++;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	3301      	adds	r3, #1
 80072bc:	72fb      	strb	r3, [r7, #11]
          break;
 80072be:	e03b      	b.n	8007338 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	695b      	ldr	r3, [r3, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7c12      	ldrb	r2, [r2, #16]
 80072d8:	f107 0108 	add.w	r1, r7, #8
 80072dc:	4610      	mov	r0, r2
 80072de:	4798      	blx	r3
 80072e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e2:	e029      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa63 	bl	80077b2 <USBD_CtlError>
            err++;
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	3301      	adds	r3, #1
 80072f0:	72fb      	strb	r3, [r7, #11]
          break;
 80072f2:	e021      	b.n	8007338 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007316:	e00f      	b.n	8007338 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa49 	bl	80077b2 <USBD_CtlError>
            err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
          break;
 8007326:	e007      	b.n	8007338 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa41 	bl	80077b2 <USBD_CtlError>
          err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007336:	bf00      	nop
      }
      break;
 8007338:	e037      	b.n	80073aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c1b      	ldrb	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	f107 0208 	add.w	r2, r7, #8
 800734e:	4610      	mov	r0, r2
 8007350:	4798      	blx	r3
 8007352:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007354:	e029      	b.n	80073aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa2a 	bl	80077b2 <USBD_CtlError>
        err++;
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	3301      	adds	r3, #1
 8007362:	72fb      	strb	r3, [r7, #11]
      break;
 8007364:	e021      	b.n	80073aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7c1b      	ldrb	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10d      	bne.n	800738a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	4610      	mov	r0, r2
 800737c:	4798      	blx	r3
 800737e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	2207      	movs	r2, #7
 8007386:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007388:	e00f      	b.n	80073aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa10 	bl	80077b2 <USBD_CtlError>
        err++;
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	3301      	adds	r3, #1
 8007396:	72fb      	strb	r3, [r7, #11]
      break;
 8007398:	e007      	b.n	80073aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800739a:	6839      	ldr	r1, [r7, #0]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa08 	bl	80077b2 <USBD_CtlError>
      err++;
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	3301      	adds	r3, #1
 80073a6:	72fb      	strb	r3, [r7, #11]
      break;
 80073a8:	bf00      	nop
  }

  if (err != 0U)
 80073aa:	7afb      	ldrb	r3, [r7, #11]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d11e      	bne.n	80073ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	88db      	ldrh	r3, [r3, #6]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d016      	beq.n	80073e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80073b8:	893b      	ldrh	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	88da      	ldrh	r2, [r3, #6]
 80073c2:	893b      	ldrh	r3, [r7, #8]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	bf28      	it	cs
 80073c8:	4613      	movcs	r3, r2
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073ce:	893b      	ldrh	r3, [r7, #8]
 80073d0:	461a      	mov	r2, r3
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa5d 	bl	8007894 <USBD_CtlSendData>
 80073da:	e009      	b.n	80073f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f9e7 	bl	80077b2 <USBD_CtlError>
 80073e4:	e004      	b.n	80073f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 faae 	bl	8007948 <USBD_CtlSendStatus>
 80073ec:	e000      	b.n	80073f0 <USBD_GetDescriptor+0x2cc>
    return;
 80073ee:	bf00      	nop
  }
}
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop

080073f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	889b      	ldrh	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d131      	bne.n	800746e <USBD_SetAddress+0x76>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	88db      	ldrh	r3, [r3, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d12d      	bne.n	800746e <USBD_SetAddress+0x76>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	2b7f      	cmp	r3, #127	; 0x7f
 8007418:	d829      	bhi.n	800746e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	885b      	ldrh	r3, [r3, #2]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007424:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d104      	bne.n	800743c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9bc 	bl	80077b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743a:	e01d      	b.n	8007478 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007444:	7bfb      	ldrb	r3, [r7, #15]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 ff13 	bl	8008274 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa7a 	bl	8007948 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007462:	e009      	b.n	8007478 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746c:	e004      	b.n	8007478 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f99e 	bl	80077b2 <USBD_CtlError>
  }
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	b2da      	uxtb	r2, r3
 8007494:	4b4e      	ldr	r3, [pc, #312]	; (80075d0 <USBD_SetConfig+0x150>)
 8007496:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007498:	4b4d      	ldr	r3, [pc, #308]	; (80075d0 <USBD_SetConfig+0x150>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d905      	bls.n	80074ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f985 	bl	80077b2 <USBD_CtlError>
    return USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e08c      	b.n	80075c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d002      	beq.n	80074be <USBD_SetConfig+0x3e>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d029      	beq.n	8007510 <USBD_SetConfig+0x90>
 80074bc:	e075      	b.n	80075aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80074be:	4b44      	ldr	r3, [pc, #272]	; (80075d0 <USBD_SetConfig+0x150>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d020      	beq.n	8007508 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80074c6:	4b42      	ldr	r3, [pc, #264]	; (80075d0 <USBD_SetConfig+0x150>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074d0:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <USBD_SetConfig+0x150>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fe ffe7 	bl	80064aa <USBD_SetClassConfig>
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d008      	beq.n	80074f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f962 	bl	80077b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074f6:	e065      	b.n	80075c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa25 	bl	8007948 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007506:	e05d      	b.n	80075c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fa1d 	bl	8007948 <USBD_CtlSendStatus>
      break;
 800750e:	e059      	b.n	80075c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007510:	4b2f      	ldr	r3, [pc, #188]	; (80075d0 <USBD_SetConfig+0x150>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d112      	bne.n	800753e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007520:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <USBD_SetConfig+0x150>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <USBD_SetConfig+0x150>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fe ffd6 	bl	80064e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa06 	bl	8007948 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800753c:	e042      	b.n	80075c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800753e:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <USBD_SetConfig+0x150>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d02a      	beq.n	80075a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fe ffc4 	bl	80064e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800755a:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <USBD_SetConfig+0x150>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007564:	4b1a      	ldr	r3, [pc, #104]	; (80075d0 <USBD_SetConfig+0x150>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fe ff9d 	bl	80064aa <USBD_SetClassConfig>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00f      	beq.n	800759a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f918 	bl	80077b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe ffa9 	bl	80064e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007598:	e014      	b.n	80075c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f9d4 	bl	8007948 <USBD_CtlSendStatus>
      break;
 80075a0:	e010      	b.n	80075c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9d0 	bl	8007948 <USBD_CtlSendStatus>
      break;
 80075a8:	e00c      	b.n	80075c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f900 	bl	80077b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075b2:	4b07      	ldr	r3, [pc, #28]	; (80075d0 <USBD_SetConfig+0x150>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fe ff92 	bl	80064e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80075be:	2303      	movs	r3, #3
 80075c0:	73fb      	strb	r3, [r7, #15]
      break;
 80075c2:	bf00      	nop
  }

  return ret;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000218 	.word	0x20000218

080075d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	88db      	ldrh	r3, [r3, #6]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d004      	beq.n	80075f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8e2 	bl	80077b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075ee:	e023      	b.n	8007638 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	dc02      	bgt.n	8007602 <USBD_GetConfig+0x2e>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dc03      	bgt.n	8007608 <USBD_GetConfig+0x34>
 8007600:	e015      	b.n	800762e <USBD_GetConfig+0x5a>
 8007602:	2b03      	cmp	r3, #3
 8007604:	d00b      	beq.n	800761e <USBD_GetConfig+0x4a>
 8007606:	e012      	b.n	800762e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3308      	adds	r3, #8
 8007612:	2201      	movs	r2, #1
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f93c 	bl	8007894 <USBD_CtlSendData>
        break;
 800761c:	e00c      	b.n	8007638 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3304      	adds	r3, #4
 8007622:	2201      	movs	r2, #1
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f934 	bl	8007894 <USBD_CtlSendData>
        break;
 800762c:	e004      	b.n	8007638 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f8be 	bl	80077b2 <USBD_CtlError>
        break;
 8007636:	bf00      	nop
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	b2db      	uxtb	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	2b02      	cmp	r3, #2
 8007656:	d81e      	bhi.n	8007696 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	88db      	ldrh	r3, [r3, #6]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d004      	beq.n	800766a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8a5 	bl	80077b2 <USBD_CtlError>
        break;
 8007668:	e01a      	b.n	80076a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f043 0202 	orr.w	r2, r3, #2
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	330c      	adds	r3, #12
 800768a:	2202      	movs	r2, #2
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f900 	bl	8007894 <USBD_CtlSendData>
      break;
 8007694:	e004      	b.n	80076a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f88a 	bl	80077b2 <USBD_CtlError>
      break;
 800769e:	bf00      	nop
  }
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d107      	bne.n	80076ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f940 	bl	8007948 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80076c8:	e013      	b.n	80076f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	885b      	ldrh	r3, [r3, #2]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d10b      	bne.n	80076ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	889b      	ldrh	r3, [r3, #4]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f930 	bl	8007948 <USBD_CtlSendStatus>
}
 80076e8:	e003      	b.n	80076f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f860 	bl	80077b2 <USBD_CtlError>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770a:	b2db      	uxtb	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	2b02      	cmp	r3, #2
 8007710:	d80b      	bhi.n	800772a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	885b      	ldrh	r3, [r3, #2]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10c      	bne.n	8007734 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f910 	bl	8007948 <USBD_CtlSendStatus>
      }
      break;
 8007728:	e004      	b.n	8007734 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f840 	bl	80077b2 <USBD_CtlError>
      break;
 8007732:	e000      	b.n	8007736 <USBD_ClrFeature+0x3c>
      break;
 8007734:	bf00      	nop
  }
}
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fa41 	bl	8006bf0 <SWAPBYTE>
 800776e:	4603      	mov	r3, r0
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fa34 	bl	8006bf0 <SWAPBYTE>
 8007788:	4603      	mov	r3, r0
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3301      	adds	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fa27 	bl	8006bf0 <SWAPBYTE>
 80077a2:	4603      	mov	r3, r0
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	80da      	strh	r2, [r3, #6]
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077bc:	2180      	movs	r1, #128	; 0x80
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fcee 	bl	80081a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fcea 	bl	80081a0 <USBD_LL_StallEP>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d036      	beq.n	8007858 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077ee:	6938      	ldr	r0, [r7, #16]
 80077f0:	f000 f836 	bl	8007860 <USBD_GetLen>
 80077f4:	4603      	mov	r3, r0
 80077f6:	3301      	adds	r3, #1
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
  idx++;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	3301      	adds	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	4413      	add	r3, r2
 800781a:	2203      	movs	r2, #3
 800781c:	701a      	strb	r2, [r3, #0]
  idx++;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	3301      	adds	r3, #1
 8007822:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007824:	e013      	b.n	800784e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	4413      	add	r3, r2
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	7812      	ldrb	r2, [r2, #0]
 8007830:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3301      	adds	r3, #1
 8007836:	613b      	str	r3, [r7, #16]
    idx++;
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	3301      	adds	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	4413      	add	r3, r2
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
    idx++;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	3301      	adds	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e7      	bne.n	8007826 <USBD_GetString+0x52>
 8007856:	e000      	b.n	800785a <USBD_GetString+0x86>
    return;
 8007858:	bf00      	nop
  }
}
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007870:	e005      	b.n	800787e <USBD_GetLen+0x1e>
  {
    len++;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	3301      	adds	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3301      	adds	r3, #1
 800787c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f5      	bne.n	8007872 <USBD_GetLen+0x12>
  }

  return len;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	2100      	movs	r1, #0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fcf9 	bl	80082b2 <USBD_LL_Transmit>

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	2100      	movs	r1, #0
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fce8 	bl	80082b2 <USBD_LL_Transmit>

  return USBD_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2203      	movs	r2, #3
 80078fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	2100      	movs	r1, #0
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fcec 	bl	80082f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	2100      	movs	r1, #0
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fcdb 	bl	80082f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2204      	movs	r2, #4
 8007954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007958:	2300      	movs	r3, #0
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fca7 	bl	80082b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2205      	movs	r2, #5
 800797a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800797e:	2300      	movs	r3, #0
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fcb5 	bl	80082f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007998:	2200      	movs	r2, #0
 800799a:	4912      	ldr	r1, [pc, #72]	; (80079e4 <MX_USB_DEVICE_Init+0x50>)
 800799c:	4812      	ldr	r0, [pc, #72]	; (80079e8 <MX_USB_DEVICE_Init+0x54>)
 800799e:	f7fe fd07 	bl	80063b0 <USBD_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079a8:	f7f9 f8b6 	bl	8000b18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079ac:	490f      	ldr	r1, [pc, #60]	; (80079ec <MX_USB_DEVICE_Init+0x58>)
 80079ae:	480e      	ldr	r0, [pc, #56]	; (80079e8 <MX_USB_DEVICE_Init+0x54>)
 80079b0:	f7fe fd2e 	bl	8006410 <USBD_RegisterClass>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079ba:	f7f9 f8ad 	bl	8000b18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079be:	490c      	ldr	r1, [pc, #48]	; (80079f0 <MX_USB_DEVICE_Init+0x5c>)
 80079c0:	4809      	ldr	r0, [pc, #36]	; (80079e8 <MX_USB_DEVICE_Init+0x54>)
 80079c2:	f7fe fc1f 	bl	8006204 <USBD_CDC_RegisterInterface>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079cc:	f7f9 f8a4 	bl	8000b18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079d0:	4805      	ldr	r0, [pc, #20]	; (80079e8 <MX_USB_DEVICE_Init+0x54>)
 80079d2:	f7fe fd53 	bl	800647c <USBD_Start>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079dc:	f7f9 f89c 	bl	8000b18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200000b4 	.word	0x200000b4
 80079e8:	2000021c 	.word	0x2000021c
 80079ec:	20000020 	.word	0x20000020
 80079f0:	200000a0 	.word	0x200000a0

080079f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079f8:	2200      	movs	r2, #0
 80079fa:	4905      	ldr	r1, [pc, #20]	; (8007a10 <CDC_Init_FS+0x1c>)
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <CDC_Init_FS+0x20>)
 80079fe:	f7fe fc1b 	bl	8006238 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a02:	4905      	ldr	r1, [pc, #20]	; (8007a18 <CDC_Init_FS+0x24>)
 8007a04:	4803      	ldr	r0, [pc, #12]	; (8007a14 <CDC_Init_FS+0x20>)
 8007a06:	f7fe fc39 	bl	800627c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000cf8 	.word	0x20000cf8
 8007a14:	2000021c 	.word	0x2000021c
 8007a18:	200004f8 	.word	0x200004f8

08007a1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	2b23      	cmp	r3, #35	; 0x23
 8007a40:	d84a      	bhi.n	8007ad8 <CDC_Control_FS+0xac>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <CDC_Control_FS+0x1c>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007ad9 	.word	0x08007ad9
 8007a4c:	08007ad9 	.word	0x08007ad9
 8007a50:	08007ad9 	.word	0x08007ad9
 8007a54:	08007ad9 	.word	0x08007ad9
 8007a58:	08007ad9 	.word	0x08007ad9
 8007a5c:	08007ad9 	.word	0x08007ad9
 8007a60:	08007ad9 	.word	0x08007ad9
 8007a64:	08007ad9 	.word	0x08007ad9
 8007a68:	08007ad9 	.word	0x08007ad9
 8007a6c:	08007ad9 	.word	0x08007ad9
 8007a70:	08007ad9 	.word	0x08007ad9
 8007a74:	08007ad9 	.word	0x08007ad9
 8007a78:	08007ad9 	.word	0x08007ad9
 8007a7c:	08007ad9 	.word	0x08007ad9
 8007a80:	08007ad9 	.word	0x08007ad9
 8007a84:	08007ad9 	.word	0x08007ad9
 8007a88:	08007ad9 	.word	0x08007ad9
 8007a8c:	08007ad9 	.word	0x08007ad9
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007ad9 	.word	0x08007ad9
 8007a98:	08007ad9 	.word	0x08007ad9
 8007a9c:	08007ad9 	.word	0x08007ad9
 8007aa0:	08007ad9 	.word	0x08007ad9
 8007aa4:	08007ad9 	.word	0x08007ad9
 8007aa8:	08007ad9 	.word	0x08007ad9
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	08007ad9 	.word	0x08007ad9
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ad9 	.word	0x08007ad9
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ad9 	.word	0x08007ad9
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007ad9 	.word	0x08007ad9
 8007ad0:	08007ad9 	.word	0x08007ad9
 8007ad4:	08007ad9 	.word	0x08007ad9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007ad8:	bf00      	nop
  }

  return (USBD_OK);
 8007ada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	4805      	ldr	r0, [pc, #20]	; (8007b0c <CDC_Receive_FS+0x24>)
 8007af6:	f7fe fbc1 	bl	800627c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007afa:	4804      	ldr	r0, [pc, #16]	; (8007b0c <CDC_Receive_FS+0x24>)
 8007afc:	f7fe fc22 	bl	8006344 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	2000021c 	.word	0x2000021c

08007b10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b20:	4b0d      	ldr	r3, [pc, #52]	; (8007b58 <CDC_Transmit_FS+0x48>)
 8007b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e00b      	b.n	8007b4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b36:	887b      	ldrh	r3, [r7, #2]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	4806      	ldr	r0, [pc, #24]	; (8007b58 <CDC_Transmit_FS+0x48>)
 8007b3e:	f7fe fb7b 	bl	8006238 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b42:	4805      	ldr	r0, [pc, #20]	; (8007b58 <CDC_Transmit_FS+0x48>)
 8007b44:	f7fe fbb8 	bl	80062b8 <USBD_CDC_TransmitPacket>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	2000021c 	.word	0x2000021c

08007b5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2212      	movs	r2, #18
 8007b90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b92:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	200000d0 	.word	0x200000d0

08007ba4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bb6:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	200000e4 	.word	0x200000e4

08007bc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d105      	bne.n	8007be6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	4907      	ldr	r1, [pc, #28]	; (8007bfc <USBD_FS_ProductStrDescriptor+0x34>)
 8007bde:	4808      	ldr	r0, [pc, #32]	; (8007c00 <USBD_FS_ProductStrDescriptor+0x38>)
 8007be0:	f7ff fdf8 	bl	80077d4 <USBD_GetString>
 8007be4:	e004      	b.n	8007bf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4904      	ldr	r1, [pc, #16]	; (8007bfc <USBD_FS_ProductStrDescriptor+0x34>)
 8007bea:	4805      	ldr	r0, [pc, #20]	; (8007c00 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bec:	f7ff fdf2 	bl	80077d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bf0:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200014f8 	.word	0x200014f8
 8007c00:	08008454 	.word	0x08008454

08007c04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6039      	str	r1, [r7, #0]
 8007c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c14:	4804      	ldr	r0, [pc, #16]	; (8007c28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c16:	f7ff fddd 	bl	80077d4 <USBD_GetString>
  return USBD_StrDesc;
 8007c1a:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200014f8 	.word	0x200014f8
 8007c28:	0800846c 	.word	0x0800846c

08007c2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	221a      	movs	r2, #26
 8007c3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c3e:	f000 f843 	bl	8007cc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c42:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	200000e8 	.word	0x200000e8

08007c50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	6039      	str	r1, [r7, #0]
 8007c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4907      	ldr	r1, [pc, #28]	; (8007c84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c66:	4808      	ldr	r0, [pc, #32]	; (8007c88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c68:	f7ff fdb4 	bl	80077d4 <USBD_GetString>
 8007c6c:	e004      	b.n	8007c78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	4904      	ldr	r1, [pc, #16]	; (8007c84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c72:	4805      	ldr	r0, [pc, #20]	; (8007c88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c74:	f7ff fdae 	bl	80077d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200014f8 	.word	0x200014f8
 8007c88:	08008480 	.word	0x08008480

08007c8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4907      	ldr	r1, [pc, #28]	; (8007cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ca2:	4808      	ldr	r0, [pc, #32]	; (8007cc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ca4:	f7ff fd96 	bl	80077d4 <USBD_GetString>
 8007ca8:	e004      	b.n	8007cb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4904      	ldr	r1, [pc, #16]	; (8007cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cae:	4805      	ldr	r0, [pc, #20]	; (8007cc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cb0:	f7ff fd90 	bl	80077d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200014f8 	.word	0x200014f8
 8007cc4:	0800848c 	.word	0x0800848c

08007cc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <Get_SerialNum+0x44>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <Get_SerialNum+0x48>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <Get_SerialNum+0x4c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cee:	2208      	movs	r2, #8
 8007cf0:	4909      	ldr	r1, [pc, #36]	; (8007d18 <Get_SerialNum+0x50>)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f814 	bl	8007d20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	4908      	ldr	r1, [pc, #32]	; (8007d1c <Get_SerialNum+0x54>)
 8007cfc:	68b8      	ldr	r0, [r7, #8]
 8007cfe:	f000 f80f 	bl	8007d20 <IntToUnicode>
  }
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	1fff7a10 	.word	0x1fff7a10
 8007d10:	1fff7a14 	.word	0x1fff7a14
 8007d14:	1fff7a18 	.word	0x1fff7a18
 8007d18:	200000ea 	.word	0x200000ea
 8007d1c:	200000fa 	.word	0x200000fa

08007d20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d32:	2300      	movs	r3, #0
 8007d34:	75fb      	strb	r3, [r7, #23]
 8007d36:	e027      	b.n	8007d88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	0f1b      	lsrs	r3, r3, #28
 8007d3c:	2b09      	cmp	r3, #9
 8007d3e:	d80b      	bhi.n	8007d58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	0f1b      	lsrs	r3, r3, #28
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	440b      	add	r3, r1
 8007d50:	3230      	adds	r2, #48	; 0x30
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e00a      	b.n	8007d6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	0f1b      	lsrs	r3, r3, #28
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	4619      	mov	r1, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	440b      	add	r3, r1
 8007d68:	3237      	adds	r2, #55	; 0x37
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	3301      	adds	r3, #1
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	3301      	adds	r3, #1
 8007d86:	75fb      	strb	r3, [r7, #23]
 8007d88:	7dfa      	ldrb	r2, [r7, #23]
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d3d3      	bcc.n	8007d38 <IntToUnicode+0x18>
  }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
	...

08007da0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	; 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007da8:	f107 0314 	add.w	r3, r7, #20
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dc0:	d147      	bne.n	8007e52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	4b25      	ldr	r3, [pc, #148]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dd2:	4b22      	ldr	r3, [pc, #136]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007dec:	f107 0314 	add.w	r3, r7, #20
 8007df0:	4619      	mov	r1, r3
 8007df2:	481b      	ldr	r0, [pc, #108]	; (8007e60 <HAL_PCD_MspInit+0xc0>)
 8007df4:	f7f9 f954 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007df8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e06:	2300      	movs	r3, #0
 8007e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e0e:	f107 0314 	add.w	r3, r7, #20
 8007e12:	4619      	mov	r1, r3
 8007e14:	4812      	ldr	r0, [pc, #72]	; (8007e60 <HAL_PCD_MspInit+0xc0>)
 8007e16:	f7f9 f943 	bl	80010a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e1a:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	4a0f      	ldr	r2, [pc, #60]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e24:	6353      	str	r3, [r2, #52]	; 0x34
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	4a0b      	ldr	r2, [pc, #44]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e34:	6453      	str	r3, [r2, #68]	; 0x44
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <HAL_PCD_MspInit+0xbc>)
 8007e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	2043      	movs	r0, #67	; 0x43
 8007e48:	f7f9 f8f3 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e4c:	2043      	movs	r0, #67	; 0x43
 8007e4e:	f7f9 f90c 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e52:	bf00      	nop
 8007e54:	3728      	adds	r7, #40	; 0x28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	40020000 	.word	0x40020000

08007e64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe fb4b 	bl	8006516 <USBD_LL_SetupStage>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	00db      	lsls	r3, r3, #3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f7fe fb85 	bl	80065c0 <USBD_LL_DataOutStage>
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	334c      	adds	r3, #76	; 0x4c
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	f7fe fc1e 	bl	8006726 <USBD_LL_DataInStage>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe fd52 	bl	80069aa <USBD_LL_SOF>
}
 8007f06:	bf00      	nop
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f16:	2301      	movs	r3, #1
 8007f18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	e008      	b.n	8007f3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d102      	bne.n	8007f36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e001      	b.n	8007f3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f36:	f7f8 fdef 	bl	8000b18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f40:	7bfa      	ldrb	r2, [r7, #15]
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fcf2 	bl	800692e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fc9a 	bl	800688a <USBD_LL_Reset>
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fced 	bl	800694e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6812      	ldr	r2, [r2, #0]
 8007f82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <HAL_PCD_SuspendCallback+0x48>)
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	4a03      	ldr	r2, [pc, #12]	; (8007fa8 <HAL_PCD_SuspendCallback+0x48>)
 8007f9a:	f043 0306 	orr.w	r3, r3, #6
 8007f9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	e000ed00 	.word	0xe000ed00

08007fac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fcdd 	bl	800697a <USBD_LL_Resume>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fd35 	bl	8006a4e <USBD_LL_IsoOUTIncomplete>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fcf1 	bl	80069ea <USBD_LL_IsoINIncomplete>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fd47 	bl	8006ab2 <USBD_LL_DevConnected>
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fd44 	bl	8006ac8 <USBD_LL_DevDisconnected>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d13c      	bne.n	80080d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008058:	4a20      	ldr	r2, [pc, #128]	; (80080dc <USBD_LL_Init+0x94>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1e      	ldr	r2, [pc, #120]	; (80080dc <USBD_LL_Init+0x94>)
 8008064:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008068:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <USBD_LL_Init+0x94>)
 800806a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800806e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008070:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <USBD_LL_Init+0x94>)
 8008072:	2204      	movs	r2, #4
 8008074:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008076:	4b19      	ldr	r3, [pc, #100]	; (80080dc <USBD_LL_Init+0x94>)
 8008078:	2202      	movs	r2, #2
 800807a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800807c:	4b17      	ldr	r3, [pc, #92]	; (80080dc <USBD_LL_Init+0x94>)
 800807e:	2200      	movs	r2, #0
 8008080:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <USBD_LL_Init+0x94>)
 8008084:	2202      	movs	r2, #2
 8008086:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008088:	4b14      	ldr	r3, [pc, #80]	; (80080dc <USBD_LL_Init+0x94>)
 800808a:	2200      	movs	r2, #0
 800808c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800808e:	4b13      	ldr	r3, [pc, #76]	; (80080dc <USBD_LL_Init+0x94>)
 8008090:	2200      	movs	r2, #0
 8008092:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008094:	4b11      	ldr	r3, [pc, #68]	; (80080dc <USBD_LL_Init+0x94>)
 8008096:	2200      	movs	r2, #0
 8008098:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <USBD_LL_Init+0x94>)
 800809c:	2201      	movs	r2, #1
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <USBD_LL_Init+0x94>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080a6:	480d      	ldr	r0, [pc, #52]	; (80080dc <USBD_LL_Init+0x94>)
 80080a8:	f7f9 ff94 	bl	8001fd4 <HAL_PCD_Init>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080b2:	f7f8 fd31 	bl	8000b18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <USBD_LL_Init+0x94>)
 80080ba:	f7fb f9ec 	bl	8003496 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080be:	2240      	movs	r2, #64	; 0x40
 80080c0:	2100      	movs	r1, #0
 80080c2:	4806      	ldr	r0, [pc, #24]	; (80080dc <USBD_LL_Init+0x94>)
 80080c4:	f7fb f9a0 	bl	8003408 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080c8:	2280      	movs	r2, #128	; 0x80
 80080ca:	2101      	movs	r1, #1
 80080cc:	4803      	ldr	r0, [pc, #12]	; (80080dc <USBD_LL_Init+0x94>)
 80080ce:	f7fb f99b 	bl	8003408 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200016f8 	.word	0x200016f8

080080e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fa f889 	bl	800220e <HAL_PCD_Start>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f942 	bl	800838c <USBD_Get_USB_Status>
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810c:	7bbb      	ldrb	r3, [r7, #14]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	461a      	mov	r2, r3
 8008124:	4603      	mov	r3, r0
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	460b      	mov	r3, r1
 800812a:	70bb      	strb	r3, [r7, #2]
 800812c:	4613      	mov	r3, r2
 800812e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800813e:	78bb      	ldrb	r3, [r7, #2]
 8008140:	883a      	ldrh	r2, [r7, #0]
 8008142:	78f9      	ldrb	r1, [r7, #3]
 8008144:	f7fa fd5a 	bl	8002bfc <HAL_PCD_EP_Open>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f91c 	bl	800838c <USBD_Get_USB_Status>
 8008154:	4603      	mov	r3, r0
 8008156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008158:	7bbb      	ldrb	r3, [r7, #14]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7fa fda3 	bl	8002ccc <HAL_PCD_EP_Close>
 8008186:	4603      	mov	r3, r0
 8008188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 f8fd 	bl	800838c <USBD_Get_USB_Status>
 8008192:	4603      	mov	r3, r0
 8008194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008196:	7bbb      	ldrb	r3, [r7, #14]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fa fe7b 	bl	8002eba <HAL_PCD_EP_SetStall>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f8de 	bl	800838c <USBD_Get_USB_Status>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fa fec0 	bl	8002f82 <HAL_PCD_EP_ClrStall>
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f8bf 	bl	800838c <USBD_Get_USB_Status>
 800820e:	4603      	mov	r3, r0
 8008210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008212:	7bbb      	ldrb	r3, [r7, #14]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800822e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008234:	2b00      	cmp	r3, #0
 8008236:	da0b      	bge.n	8008250 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	4613      	mov	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	333e      	adds	r3, #62	; 0x3e
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	e00b      	b.n	8008268 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	4613      	mov	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008266:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7fa fc8d 	bl	8002bb2 <HAL_PCD_SetAddress>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f874 	bl	800838c <USBD_Get_USB_Status>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b086      	sub	sp, #24
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	460b      	mov	r3, r1
 80082c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082d0:	7af9      	ldrb	r1, [r7, #11]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f7fa fda6 	bl	8002e26 <HAL_PCD_EP_Transmit>
 80082da:	4603      	mov	r3, r0
 80082dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f853 	bl	800838c <USBD_Get_USB_Status>
 80082e6:	4603      	mov	r3, r0
 80082e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	460b      	mov	r3, r1
 8008302:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008312:	7af9      	ldrb	r1, [r7, #11]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f7fa fd22 	bl	8002d60 <HAL_PCD_EP_Receive>
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f832 	bl	800838c <USBD_Get_USB_Status>
 8008328:	4603      	mov	r3, r0
 800832a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800832c:	7dbb      	ldrb	r3, [r7, #22]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f7fa fd52 	bl	8002df6 <HAL_PCD_EP_GetRxCount>
 8008352:	4603      	mov	r3, r0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008364:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USBD_static_malloc+0x18>)
}
 8008366:	4618      	mov	r0, r3
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20001c04 	.word	0x20001c04

08008378 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	2b03      	cmp	r3, #3
 800839e:	d817      	bhi.n	80083d0 <USBD_Get_USB_Status+0x44>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <USBD_Get_USB_Status+0x1c>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083bf 	.word	0x080083bf
 80083b0:	080083c5 	.word	0x080083c5
 80083b4:	080083cb 	.word	0x080083cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
    break;
 80083bc:	e00b      	b.n	80083d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083be:	2303      	movs	r3, #3
 80083c0:	73fb      	strb	r3, [r7, #15]
    break;
 80083c2:	e008      	b.n	80083d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	e005      	b.n	80083d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ca:	2303      	movs	r3, #3
 80083cc:	73fb      	strb	r3, [r7, #15]
    break;
 80083ce:	e002      	b.n	80083d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083d0:	2303      	movs	r3, #3
 80083d2:	73fb      	strb	r3, [r7, #15]
    break;
 80083d4:	bf00      	nop
  }
  return usb_status;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f000 f820 	bl	800843c <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	080084bc 	.word	0x080084bc
 8008420:	080084bc 	.word	0x080084bc
 8008424:	080084bc 	.word	0x080084bc
 8008428:	080084c0 	.word	0x080084c0

0800842c <memset>:
 800842c:	4402      	add	r2, r0
 800842e:	4603      	mov	r3, r0
 8008430:	4293      	cmp	r3, r2
 8008432:	d100      	bne.n	8008436 <memset+0xa>
 8008434:	4770      	bx	lr
 8008436:	f803 1b01 	strb.w	r1, [r3], #1
 800843a:	e7f9      	b.n	8008430 <memset+0x4>

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	bf00      	nop
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
