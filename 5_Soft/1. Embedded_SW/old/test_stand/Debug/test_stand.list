
test_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080079b8  080079b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a10  08007a10  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08007a10  08007a10  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a18  08007a18  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000110  08007b30  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d40  08007b30  00021d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3ef  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc5  00000000  00000000  0002f52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  000320f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00032ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e5a  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010719  00000000  00000000  000575ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9da7  00000000  00000000  00067ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131a8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  00131adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000110 	.word	0x20000110
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080079a0 	.word	0x080079a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000114 	.word	0x20000114
 8000200:	080079a0 	.word	0x080079a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a3b      	ldr	r2, [pc, #236]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a34      	ldr	r2, [pc, #208]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <MX_GPIO_Init+0x10c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_GPIO_Init+0x10c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a2d      	ldr	r2, [pc, #180]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <MX_GPIO_Init+0x10c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_4_E_Pin|MUX_4_S0_Pin|MUX_1_S2_Pin|MUX_1_E_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x110>)
 8000596:	f000 fcad 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX_4_S1_Pin|MUX_4_S2_Pin|MUX_2_S2_Pin|MUX_1_S0_Pin
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 715c 	mov.w	r1, #880	; 0x370
 80005a0:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_GPIO_Init+0x114>)
 80005a2:	f000 fca7 	bl	8000ef4 <HAL_GPIO_WritePin>
                          |MUX_1_S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_3_E_Pin|MUX_3_S0_Pin|MUX_3_S1_Pin|MUX_3_S2_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 4107 	movw	r1, #62471	; 0xf407
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <MX_GPIO_Init+0x118>)
 80005ae:	f000 fca1 	bl	8000ef4 <HAL_GPIO_WritePin>
                          |E_U_MUX_Pin|MUX_2_E_Pin|MUX_2_S0_Pin|MUX_2_S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MUX_4_E_Pin|MUX_4_S0_Pin|MUX_1_S2_Pin|MUX_1_E_Pin;
 80005b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_GPIO_Init+0x110>)
 80005cc:	f000 fafe 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MUX_4_S1_Pin|MUX_4_S2_Pin|MUX_2_S2_Pin|MUX_1_S0_Pin
 80005d0:	f44f 735c 	mov.w	r3, #880	; 0x370
 80005d4:	617b      	str	r3, [r7, #20]
                          |MUX_1_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_GPIO_Init+0x114>)
 80005ea:	f000 faef 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MUX_3_E_Pin|MUX_3_S0_Pin|MUX_3_S1_Pin|MUX_3_S2_Pin
 80005ee:	f24f 4307 	movw	r3, #62471	; 0xf407
 80005f2:	617b      	str	r3, [r7, #20]
                          |E_U_MUX_Pin|MUX_2_E_Pin|MUX_2_S0_Pin|MUX_2_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_GPIO_Init+0x118>)
 8000608:	f000 fae0 	bl	8000bcc <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40020800 	.word	0x40020800
 8000620:	40020400 	.word	0x40020400

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 f928 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f81c 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff ff6a 	bl	8000508 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000634:	f006 fbf8 	bl	8006e28 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f000 f990 	bl	8000960 <HAL_Delay>
	  HAL_GPIO_TogglePin(E_U_MUX_GPIO_Port, E_U_MUX_Pin);
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x38>)
 8000646:	f000 fc6e 	bl	8000f26 <HAL_GPIO_TogglePin>
	  CDC_Receive_FS(RxData,  (uint32_t)1);
 800064a:	2101      	movs	r1, #1
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <main+0x3c>)
 800064e:	f006 fc95 	bl	8006f7c <CDC_Receive_FS>
	  CDC_Transmit_FS(ANTWORT, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x40>)
 8000656:	f006 fca5 	bl	8006fa4 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800065a:	e7ed      	b.n	8000638 <main+0x14>
 800065c:	40020400 	.word	0x40020400
 8000660:	2000012c 	.word	0x2000012c
 8000664:	20000000 	.word	0x20000000

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2234      	movs	r2, #52	; 0x34
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 f98a 	bl	8007990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <SystemClock_Config+0xd0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd4>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 7;
 80006dc:	2307      	movs	r3, #7
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e0:	2348      	movs	r3, #72	; 0x48
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e8:	2303      	movs	r3, #3
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fcbf 	bl	8003078 <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000700:	f000 f81e 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2102      	movs	r1, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fee3 	bl	80024ec <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800072c:	f000 f808 	bl	8000740 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <HAL_MspInit+0x4c>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_MspInit+0x4c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x4c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x4c>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f89a 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <OTG_FS_IRQHandler+0x10>)
 80007f6:	f000 fd07 	bl	8001208 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20001614 	.word	0x20001614

08000804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800082e:	490e      	ldr	r1, [pc, #56]	; (8000868 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000844:	4c0b      	ldr	r4, [pc, #44]	; (8000874 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000852:	f7ff ffd7 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f007 f877 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085a:	f7ff fee3 	bl	8000624 <main>
  bx  lr    
 800085e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800086c:	08007a20 	.word	0x08007a20
  ldr r2, =_sbss
 8000870:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000874:	20001d40 	.word	0x20001d40

08000878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_Init+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_Init+0x40>)
 8000886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_Init+0x40>)
 8000892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x40>)
 800089e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f94f 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff ff4c 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023c00 	.word	0x40023c00

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f967 	bl	8000bb2 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f92f 	bl	8000b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000004 	.word	0x20000004
 8000918:	2000000c 	.word	0x2000000c
 800091c:	20000008 	.word	0x20000008

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000000c 	.word	0x2000000c
 8000944:	20000130 	.word	0x20000130

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000130 	.word	0x20000130

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff ffee 	bl	8000948 <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_Delay+0x44>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffde 	bl	8000948 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000000c 	.word	0x2000000c

080009a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009da:	4a04      	ldr	r2, [pc, #16]	; (80009ec <__NVIC_SetPriorityGrouping+0x44>)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	60d3      	str	r3, [r2, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__NVIC_GetPriorityGrouping+0x18>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	f003 0307 	and.w	r3, r3, #7
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db0b      	blt.n	8000a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	f003 021f 	and.w	r2, r3, #31
 8000a24:	4907      	ldr	r1, [pc, #28]	; (8000a44 <__NVIC_EnableIRQ+0x38>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	095b      	lsrs	r3, r3, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b14:	d301      	bcc.n	8000b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00f      	b.n	8000b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <SysTick_Config+0x40>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b22:	210f      	movs	r1, #15
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f7ff ff8e 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x40>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff29 	bl	80009a8 <__NVIC_SetPriorityGrouping>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b70:	f7ff ff3e 	bl	80009f0 <__NVIC_GetPriorityGrouping>
 8000b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	6978      	ldr	r0, [r7, #20]
 8000b7c:	f7ff ff8e 	bl	8000a9c <NVIC_EncodePriority>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff5d 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff31 	bl	8000a0c <__NVIC_EnableIRQ>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffa2 	bl	8000b04 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e165      	b.n	8000eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8154 	bne.w	8000eae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d130      	bne.n	8000c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 0201 	and.w	r2, r3, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d017      	beq.n	8000cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d123      	bne.n	8000d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	69b9      	ldr	r1, [r7, #24]
 8000d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0203 	and.w	r2, r3, #3
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80ae 	beq.w	8000eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6e:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <HAL_GPIO_Init+0x304>)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <HAL_GPIO_Init+0x308>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x21a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x216>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x310>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x212>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_GPIO_Init+0x314>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x20e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <HAL_GPIO_Init+0x318>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x20a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x31c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x206>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a49      	ldr	r2, [pc, #292]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x202>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x304>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea8:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae96 	bls.w	8000be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40013c00 	.word	0x40013c00

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f10:	e003      	b.n	8000f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f38:	887a      	ldrh	r2, [r7, #2]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	041a      	lsls	r2, r3, #16
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	887b      	ldrh	r3, [r7, #2]
 8000f46:	400b      	ands	r3, r1
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	619a      	str	r2, [r3, #24]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5c:	b08f      	sub	sp, #60	; 0x3c
 8000f5e:	af0a      	add	r7, sp, #40	; 0x28
 8000f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e116      	b.n	800119a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f006 f966 	bl	8007258 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fc17 	bl	80037de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	687e      	ldr	r6, [r7, #4]
 8000fb8:	466d      	mov	r5, sp
 8000fba:	f106 0410 	add.w	r4, r6, #16
 8000fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fce:	1d33      	adds	r3, r6, #4
 8000fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f002 faee 	bl	80035b4 <USB_CoreInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0d7      	b.n	800119a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fc05 	bl	8003800 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e04a      	b.n	8001092 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	333d      	adds	r3, #61	; 0x3d
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	333c      	adds	r3, #60	; 0x3c
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	b298      	uxth	r0, r3
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3344      	adds	r3, #68	; 0x44
 8001038:	4602      	mov	r2, r0
 800103a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3340      	adds	r3, #64	; 0x40
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	334c      	adds	r3, #76	; 0x4c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3354      	adds	r3, #84	; 0x54
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3301      	adds	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3af      	bcc.n	8000ffc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e044      	b.n	800112c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3301      	adds	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3b5      	bcc.n	80010a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	687e      	ldr	r6, [r7, #4]
 800113e:	466d      	mov	r5, sp
 8001140:	f106 0410 	add.w	r4, r6, #16
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001150:	e885 0003 	stmia.w	r5, {r0, r1}
 8001154:	1d33      	adds	r3, r6, #4
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f002 fb9d 	bl	8003898 <USB_DevInit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e014      	b.n	800119a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 f98b 	bl	80024a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fcdf 	bl	8004b56 <USB_DevDisconnect>

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_PCD_Start+0x1c>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e020      	b.n	8001200 <HAL_PCD_Start+0x5e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d109      	bne.n	80011e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 fae8 	bl	80037bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fc8f 	bl	8004b14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b08d      	sub	sp, #52	; 0x34
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fd4d 	bl	8004cbe <USB_GetMode>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 84b7 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fcb1 	bl	8004b98 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 84ad 	beq.w	8001b98 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fc9e 	bl	8004b98 <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d107      	bne.n	8001276 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f002 0202 	and.w	r2, r2, #2
 8001274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fc8c 	bl	8004b98 <USB_ReadInterrupts>
 8001280:	4603      	mov	r3, r0
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b10      	cmp	r3, #16
 8001288:	d161      	bne.n	800134e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0210 	bic.w	r2, r2, #16
 8001298:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f003 020f 	and.w	r2, r3, #15
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	3304      	adds	r3, #4
 80012b8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	0c5b      	lsrs	r3, r3, #17
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d124      	bne.n	8001310 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d035      	beq.n	800133e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f003 fac3 	bl	8004870 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f6:	441a      	add	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	441a      	add	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	e016      	b.n	800133e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	0c5b      	lsrs	r3, r3, #17
 8001314:	f003 030f 	and.w	r3, r3, #15
 8001318:	2b06      	cmp	r3, #6
 800131a:	d110      	bne.n	800133e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001322:	2208      	movs	r2, #8
 8001324:	4619      	mov	r1, r3
 8001326:	6a38      	ldr	r0, [r7, #32]
 8001328:	f003 faa2 	bl	8004870 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0210 	orr.w	r2, r2, #16
 800134c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fc20 	bl	8004b98 <USB_ReadInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800135e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001362:	f040 80a7 	bne.w	80014b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fc25 	bl	8004bbe <USB_ReadDevAllOutEpInterrupt>
 8001374:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001376:	e099      	b.n	80014ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 808e 	beq.w	80014a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fc49 	bl	8004c26 <USB_ReadDevOutEPInterrupt>
 8001394:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ac:	461a      	mov	r2, r3
 80013ae:	2301      	movs	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 feef 	bl	8002198 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00c      	beq.n	80013de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2308      	movs	r3, #8
 80013d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 ffc5 	bl	8002368 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	015a      	lsls	r2, r3, #5
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f4:	461a      	mov	r2, r3
 80013f6:	2310      	movs	r3, #16
 80013f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d030      	beq.n	8001466 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140c:	2b80      	cmp	r3, #128	; 0x80
 800140e:	d109      	bne.n	8001424 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2200      	movs	r2, #0
 8001446:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f006 f81e 	bl	8007490 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2302      	movs	r3, #2
 8001464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147c:	461a      	mov	r2, r3
 800147e:	2320      	movs	r3, #32
 8001480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001498:	461a      	mov	r2, r3
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f47f af62 	bne.w	8001378 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fb6d 	bl	8004b98 <USB_ReadInterrupts>
 80014be:	4603      	mov	r3, r0
 80014c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c8:	f040 80db 	bne.w	8001682 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fb8e 	bl	8004bf2 <USB_ReadDevAllInEpInterrupt>
 80014d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014dc:	e0cd      	b.n	800167a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80c2 	beq.w	800166e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f003 fbb4 	bl	8004c62 <USB_ReadDevInEPInterrupt>
 80014fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d057      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2201      	movs	r2, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800151a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	69f9      	ldr	r1, [r7, #28]
 8001522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001526:	4013      	ands	r3, r2
 8001528:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001536:	461a      	mov	r2, r3
 8001538:	2301      	movs	r3, #1
 800153a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d132      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	334c      	adds	r3, #76	; 0x4c
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4403      	add	r3, r0
 8001564:	3348      	adds	r3, #72	; 0x48
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4419      	add	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	334c      	adds	r3, #76	; 0x4c
 800157a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	2b00      	cmp	r3, #0
 8001580:	d113      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3354      	adds	r3, #84	; 0x54
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d108      	bne.n	80015aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015a2:	461a      	mov	r2, r3
 80015a4:	2101      	movs	r1, #1
 80015a6:	f003 fbbb 	bl	8004d20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f005 fee8 	bl	8007386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	461a      	mov	r2, r3
 80015ce:	2308      	movs	r3, #8
 80015d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2310      	movs	r3, #16
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d008      	beq.n	800160a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001616:	6a38      	ldr	r0, [r7, #32]
 8001618:	f002 fa9c 	bl	8003b54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	3338      	adds	r3, #56	; 0x38
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	78db      	ldrb	r3, [r3, #3]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2200      	movs	r2, #0
 800163c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 ff35 	bl	80074b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001656:	461a      	mov	r2, r3
 8001658:	2302      	movs	r3, #2
 800165a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fd08 	bl	800207e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f af2e 	bne.w	80014de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fa86 	bl	8004b98 <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001696:	d122      	bne.n	80016de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f006 f8af 	bl	8007824 <HAL_PCDEx_LPM_Callback>
 80016c6:	e002      	b.n	80016ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 fed3 	bl	8007474 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fa58 	bl	8004b98 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016f2:	d112      	bne.n	800171a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f005 fe8f 	bl	8007428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001718:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fa3a 	bl	8004b98 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800172a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800172e:	d121      	bne.n	8001774 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800173e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d111      	bne.n	800176e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	f003 020f 	and.w	r2, r3, #15
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001764:	2101      	movs	r1, #1
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f006 f85c 	bl	8007824 <HAL_PCDEx_LPM_Callback>
 800176c:	e002      	b.n	8001774 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 fe5a 	bl	8007428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fa0d 	bl	8004b98 <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001788:	f040 80b7 	bne.w	80018fa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2110      	movs	r1, #16
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 f9d4 	bl	8003b54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b0:	e046      	b.n	8001840 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017be:	461a      	mov	r2, r3
 80017c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d6:	0151      	lsls	r1, r2, #5
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	440a      	add	r2, r1
 80017dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f2:	461a      	mov	r2, r3
 80017f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	0151      	lsls	r1, r2, #5
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	440a      	add	r2, r1
 8001810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001818:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182a:	0151      	lsls	r1, r2, #5
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	440a      	add	r2, r1
 8001830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001834:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001838:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d3b3      	bcc.n	80017b2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001858:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800185c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188c:	f043 030b 	orr.w	r3, r3, #11
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	e015      	b.n	80018c0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f043 030b 	orr.w	r3, r3, #11
 80018be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e4:	461a      	mov	r2, r3
 80018e6:	f003 fa1b 	bl	8004d20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f94a 	bl	8004b98 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800190e:	d124      	bne.n	800195a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f003 f9e0 	bl	8004cda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f002 f995 	bl	8003c4e <USB_GetDevSpeed>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681c      	ldr	r4, [r3, #0]
 8001930:	f000 fec2 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8001934:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193a:	b2db      	uxtb	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	4620      	mov	r0, r4
 8001940:	f001 fe9a 	bl	8003678 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f005 fd46 	bl	80073d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001958:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f91a 	bl	8004b98 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d10a      	bne.n	8001984 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f005 fd23 	bl	80073ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f002 0208 	and.w	r2, r2, #8
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f905 	bl	8004b98 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d122      	bne.n	80019de <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a4:	2301      	movs	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e014      	b.n	80019d4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fb27 	bl	800201c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3e5      	bcc.n	80019aa <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f8d8 	bl	8004b98 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019f2:	d13b      	bne.n	8001a6c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
 80019f8:	e02b      	b.n	8001a52 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3340      	adds	r3, #64	; 0x40
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d115      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da12      	bge.n	8001a4c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	333f      	adds	r3, #63	; 0x3f
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fae8 	bl	800201c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d3ce      	bcc.n	80019fa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f891 	bl	8004b98 <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a80:	d155      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a82:	2301      	movs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e045      	b.n	8001b14 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d12e      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ab0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da2b      	bge.n	8001b0e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ac2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d121      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6053      	str	r3, [r2, #4]
            break;
 8001b0c:	e007      	b.n	8001b1e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	3301      	adds	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3b4      	bcc.n	8001a88 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f830 	bl	8004b98 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d10a      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f005 fcc7 	bl	80074d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 f81a 	bl	8004b98 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d115      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f005 fcb7 	bl	80074f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e000      	b.n	8001b9a <HAL_PCD_IRQHandler+0x992>
      return;
 8001b98:	bf00      	nop
    }
  }
}
 8001b9a:	3734      	adds	r7, #52	; 0x34
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_SetAddress+0x1a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e013      	b.n	8001be2 <HAL_PCD_SetAddress+0x42>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ff78 	bl	8004ac8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	4608      	mov	r0, r1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	70fb      	strb	r3, [r7, #3]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	803b      	strh	r3, [r7, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da0f      	bge.n	8001c30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 020f 	and.w	r2, r3, #15
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	3338      	adds	r3, #56	; 0x38
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	705a      	strb	r2, [r3, #1]
 8001c2e:	e00f      	b.n	8001c50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c5c:	883a      	ldrh	r2, [r7, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	78ba      	ldrb	r2, [r7, #2]
 8001c66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c7a:	78bb      	ldrb	r3, [r7, #2]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d102      	bne.n	8001c86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_PCD_EP_Open+0xaa>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e00e      	b.n	8001cb2 <HAL_PCD_EP_Open+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 fff8 	bl	8003c98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da0f      	bge.n	8001cee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 020f 	and.w	r2, r3, #15
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3338      	adds	r3, #56	; 0x38
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
 8001cec:	e00f      	b.n	8001d0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 020f 	and.w	r2, r3, #15
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_EP_Close+0x6e>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e00e      	b.n	8001d46 <HAL_PCD_EP_Close+0x8c>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f836 	bl	8003da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	f002 fb15 	bl	80043f0 <USB_EP0StartXfer>
 8001dc6:	e008      	b.n	8001dda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6979      	ldr	r1, [r7, #20]
 8001dd6:	f002 f8c3 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	460b      	mov	r3, r1
 8001e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3338      	adds	r3, #56	; 0x38
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2201      	movs	r2, #1
 8001e52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	f002 fab3 	bl	80043f0 <USB_EP0StartXfer>
 8001e8a:	e008      	b.n	8001e9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	f002 f861 	bl	8003f60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e050      	b.n	8001f68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0f      	bge.n	8001eee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00d      	b.n	8001f0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_SetStall+0x82>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e01e      	b.n	8001f68 <HAL_PCD_EP_SetStall+0xc0>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fcf1 	bl	8004920 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	b2d9      	uxtb	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f002 fee1 	bl	8004d20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	f003 020f 	and.w	r2, r3, #15
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d901      	bls.n	8001f8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e042      	b.n	8002014 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	da0f      	bge.n	8001fb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	f003 020f 	and.w	r2, r3, #15
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3338      	adds	r3, #56	; 0x38
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
 8001fb4:	e00f      	b.n	8001fd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_PCD_EP_ClrStall+0x86>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e00e      	b.n	8002014 <HAL_PCD_EP_ClrStall+0xa4>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68f9      	ldr	r1, [r7, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fcf9 	bl	80049fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002028:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	da0c      	bge.n	800204a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3338      	adds	r3, #56	; 0x38
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e00c      	b.n	8002064 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fb18 	bl	80046a0 <USB_EPStopXfer>
 8002070:	4603      	mov	r3, r0
 8002072:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002074:	7afb      	ldrb	r3, [r7, #11]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b08a      	sub	sp, #40	; 0x28
 8002082:	af02      	add	r7, sp, #8
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3338      	adds	r3, #56	; 0x38
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d901      	bls.n	80020b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06c      	b.n	8002190 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d902      	bls.n	80020d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3303      	adds	r3, #3
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020da:	e02b      	b.n	8002134 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d902      	bls.n	80020f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3303      	adds	r3, #3
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002110:	b2db      	uxtb	r3, r3
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4603      	mov	r3, r0
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f002 fb6c 	bl	80047f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	441a      	add	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	441a      	add	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	b29b      	uxth	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	429a      	cmp	r2, r3
 8002148:	d809      	bhi.n	800215e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002152:	429a      	cmp	r2, r3
 8002154:	d203      	bcs.n	800215e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1be      	bne.n	80020dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	429a      	cmp	r2, r3
 8002168:	d811      	bhi.n	800218e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	2201      	movs	r2, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	43db      	mvns	r3, r3
 8002184:	6939      	ldr	r1, [r7, #16]
 8002186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800218a:	4013      	ands	r3, r2
 800218c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	333c      	adds	r3, #60	; 0x3c
 80021b0:	3304      	adds	r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d17b      	bne.n	80022c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	f240 80b9 	bls.w	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80b3 	beq.w	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fa:	461a      	mov	r2, r3
 80021fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002200:	6093      	str	r3, [r2, #8]
 8002202:	e0a7      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	2320      	movs	r3, #32
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	e098      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 8093 	bne.w	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d90f      	bls.n	8002256 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224c:	461a      	mov	r2, r3
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e07e      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	0159      	lsls	r1, r3, #5
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	440b      	add	r3, r1
 8002278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d114      	bne.n	80022b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022a0:	461a      	mov	r2, r3
 80022a2:	2101      	movs	r1, #1
 80022a4:	f002 fd3c 	bl	8004d20 <USB_EP0_OutStart>
 80022a8:	e006      	b.n	80022b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	441a      	add	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f005 f846 	bl	8007350 <HAL_PCD_DataOutStageCallback>
 80022c4:	e046      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d124      	bne.n	8002318 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e4:	461a      	mov	r2, r3
 80022e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	e032      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	2320      	movs	r3, #32
 8002308:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 f81d 	bl	8007350 <HAL_PCD_DataOutStageCallback>
 8002316:	e01d      	b.n	8002354 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <PCD_EP_OutXfrComplete_int+0x1b0>
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d108      	bne.n	8002348 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002340:	461a      	mov	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	f002 fcec 	bl	8004d20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f004 fffe 	bl	8007350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	4f54300a 	.word	0x4f54300a
 8002364:	4f54310a 	.word	0x4f54310a

08002368 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	333c      	adds	r3, #60	; 0x3c
 8002380:	3304      	adds	r3, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d90e      	bls.n	80023bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	015a      	lsls	r2, r3, #5
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b4:	461a      	mov	r2, r3
 80023b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f004 ffb5 	bl	800732c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d90c      	bls.n	80023e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023dc:	461a      	mov	r2, r3
 80023de:	2101      	movs	r1, #1
 80023e0:	f002 fc9e 	bl	8004d20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	4f54300a 	.word	0x4f54300a

080023f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
 8002400:	4613      	mov	r3, r2
 8002402:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002412:	883b      	ldrh	r3, [r7, #0]
 8002414:	0419      	lsls	r1, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	430a      	orrs	r2, r1
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
 8002420:	e028      	b.n	8002474 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e00d      	b.n	8002452 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	3340      	adds	r3, #64	; 0x40
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4413      	add	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	3b01      	subs	r3, #1
 8002458:	429a      	cmp	r2, r3
 800245a:	d3ec      	bcc.n	8002436 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800245c:	883b      	ldrh	r3, [r7, #0]
 800245e:	0418      	lsls	r0, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	3b01      	subs	r3, #1
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	4302      	orrs	r2, r0
 800246c:	3340      	adds	r3, #64	; 0x40
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	f043 0303 	orr.w	r3, r3, #3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cc      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b68      	ldr	r3, [pc, #416]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d90c      	bls.n	8002528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d044      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e067      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4934      	ldr	r1, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7fe f9b4 	bl	8000948 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7fe f9b0 	bl	8000948 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20c      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002672:	f000 fb57 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe f914 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08007a00 	.word	0x08007a00
 80026b0:	20000004 	.word	0x20000004
 80026b4:	20000008 	.word	0x20000008

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000004 	.word	0x20000004

080026d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002708:	4b6f      	ldr	r3, [pc, #444]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800270a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	496c      	ldr	r1, [pc, #432]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d010      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	4960      	ldr	r1, [pc, #384]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d017      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002764:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800276a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4955      	ldr	r1, [pc, #340]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002782:	d101      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	4946      	ldr	r1, [pc, #280]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d101      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808a 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a38      	ldr	r2, [pc, #224]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027fa:	4b34      	ldr	r3, [pc, #208]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002806:	f7fe f89f 	bl	8000948 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe f89b 	bl	8000948 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e278      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	429a      	cmp	r2, r3
 8002848:	d028      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800284a:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002852:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d114      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe f869 	bl	8000948 <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe f865 	bl	8000948 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e240      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ee      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a8:	d114      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028be:	4902      	ldr	r1, [pc, #8]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
 80028c4:	e00c      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470e40 	.word	0x42470e40
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a49      	ldr	r2, [pc, #292]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028de:	6093      	str	r3, [r2, #8]
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	4944      	ldr	r1, [pc, #272]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002906:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	492e      	ldr	r1, [pc, #184]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d011      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	4926      	ldr	r1, [pc, #152]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002976:	d101      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002978:	2301      	movs	r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	4911      	ldr	r1, [pc, #68]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d101      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d005      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029dc:	f040 80ff 	bne.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e6:	f7fd ffaf 	bl	8000948 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ee:	f7fd ffab 	bl	8000948 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e188      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	424711e0 	.word	0x424711e0
 8002a08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a0c:	4b7e      	ldr	r3, [pc, #504]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d028      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d124      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a40:	4b71      	ldr	r3, [pc, #452]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a58:	0e1b      	lsrs	r3, r3, #24
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
 8002a74:	431a      	orrs	r2, r3
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	071b      	lsls	r3, r3, #28
 8002a82:	4961      	ldr	r1, [pc, #388]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d035      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab4:	d130      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ab6:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ac8:	4b4f      	ldr	r3, [pc, #316]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	0f1b      	lsrs	r3, r3, #28
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	071b      	lsls	r3, r3, #28
 8002af8:	4943      	ldr	r1, [pc, #268]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b06:	f023 021f 	bic.w	r2, r3, #31
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	493d      	ldr	r1, [pc, #244]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d029      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d124      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	019b      	lsls	r3, r3, #6
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	071b      	lsls	r3, r3, #28
 8002b70:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d016      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4917      	ldr	r1, [pc, #92]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fd fec6 	bl	8000948 <HAL_GetTick>
 8002bbc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bc0:	f7fd fec2 	bl	8000948 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e09f      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8095 	bne.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fd feac 	bl	8000948 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bf2:	e00f      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bf4:	f7fd fea8 	bl	8000948 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d908      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e085      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470068 	.word	0x42470068
 8002c10:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c20:	d0e8      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02b      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d127      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	4928      	ldr	r1, [pc, #160]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c86:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4922      	ldr	r1, [pc, #136]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cae:	d118      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	0e1b      	lsrs	r3, r3, #24
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	4910      	ldr	r1, [pc, #64]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fd fe2e 	bl	8000948 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cf0:	f7fd fe2a 	bl	8000948 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e007      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0e:	d1ef      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3730      	adds	r7, #48	; 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470070 	.word	0x42470070

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d28:	b0a6      	sub	sp, #152	; 0x98
 8002d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4a:	4bc8      	ldr	r3, [pc, #800]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	f200 817e 	bhi.w	8003054 <HAL_RCC_GetSysClockFreq+0x330>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08003055 	.word	0x08003055
 8002d68:	08003055 	.word	0x08003055
 8002d6c:	08003055 	.word	0x08003055
 8002d70:	08002d9d 	.word	0x08002d9d
 8002d74:	08003055 	.word	0x08003055
 8002d78:	08003055 	.word	0x08003055
 8002d7c:	08003055 	.word	0x08003055
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08003055 	.word	0x08003055
 8002d88:	08003055 	.word	0x08003055
 8002d8c:	08003055 	.word	0x08003055
 8002d90:	08002f0f 	.word	0x08002f0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4bb6      	ldr	r3, [pc, #728]	; (8003070 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002d9a:	e15f      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9c:	4bb5      	ldr	r3, [pc, #724]	; (8003074 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002da2:	e15b      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da4:	4bb1      	ldr	r3, [pc, #708]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db0:	4bae      	ldr	r3, [pc, #696]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d031      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4bab      	ldr	r3, [pc, #684]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd4:	4ba7      	ldr	r3, [pc, #668]	; (8003074 <HAL_RCC_GetSysClockFreq+0x350>)
 8002dd6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002dda:	462a      	mov	r2, r5
 8002ddc:	fb03 f202 	mul.w	r2, r3, r2
 8002de0:	2300      	movs	r3, #0
 8002de2:	4621      	mov	r1, r4
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	4aa2      	ldr	r2, [pc, #648]	; (8003074 <HAL_RCC_GetSysClockFreq+0x350>)
 8002dec:	4621      	mov	r1, r4
 8002dee:	fba1 1202 	umull	r1, r2, r1, r2
 8002df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002df4:	460a      	mov	r2, r1
 8002df6:	67ba      	str	r2, [r7, #120]	; 0x78
 8002df8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e02:	2200      	movs	r2, #0
 8002e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e0c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002e10:	f7fd f9f8 	bl	8000204 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e1e:	e064      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	2200      	movs	r2, #0
 8002e28:	653b      	str	r3, [r7, #80]	; 0x50
 8002e2a:	657a      	str	r2, [r7, #84]	; 0x54
 8002e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e34:	2300      	movs	r3, #0
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0159      	lsls	r1, r3, #5
 8002e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4e:	0150      	lsls	r0, r2, #5
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4621      	mov	r1, r4
 8002e56:	1a51      	subs	r1, r2, r1
 8002e58:	6139      	str	r1, [r7, #16]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e6e:	4659      	mov	r1, fp
 8002e70:	018b      	lsls	r3, r1, #6
 8002e72:	4651      	mov	r1, sl
 8002e74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e78:	4651      	mov	r1, sl
 8002e7a:	018a      	lsls	r2, r1, #6
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e82:	4659      	mov	r1, fp
 8002e84:	eb63 0901 	sbc.w	r9, r3, r1
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9c:	4690      	mov	r8, r2
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	eb18 0303 	adds.w	r3, r8, r3
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	eb49 0303 	adc.w	r3, r9, r3
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	028b      	lsls	r3, r1, #10
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	028a      	lsls	r2, r1, #10
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8002ed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002edc:	f7fd f992 	bl	8000204 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eea:	4b60      	ldr	r3, [pc, #384]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002efc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002f0c:	e0a6      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b54      	ldr	r3, [pc, #336]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02a      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f26:	4b51      	ldr	r3, [pc, #324]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f3c:	fb03 f201 	mul.w	r2, r3, r1
 8002f40:	2300      	movs	r3, #0
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002f4e:	677a      	str	r2, [r7, #116]	; 0x74
 8002f50:	460a      	mov	r2, r1
 8002f52:	673a      	str	r2, [r7, #112]	; 0x70
 8002f54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f56:	4413      	add	r3, r2
 8002f58:	677b      	str	r3, [r7, #116]	; 0x74
 8002f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5e:	2200      	movs	r2, #0
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
 8002f62:	637a      	str	r2, [r7, #52]	; 0x34
 8002f64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f68:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002f6c:	f7fd f94a 	bl	8000204 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f7a:	e05b      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	2200      	movs	r2, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0159      	lsls	r1, r3, #5
 8002fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002faa:	0150      	lsls	r0, r2, #5
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	4614      	mov	r4, r2
 8002fea:	461d      	mov	r5, r3
 8002fec:	4643      	mov	r3, r8
 8002fee:	18e3      	adds	r3, r4, r3
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	eb45 0303 	adc.w	r3, r5, r3
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003006:	4629      	mov	r1, r5
 8003008:	028b      	lsls	r3, r1, #10
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003010:	4621      	mov	r1, r4
 8003012:	028a      	lsls	r2, r1, #10
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800301c:	2200      	movs	r2, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	61fa      	str	r2, [r7, #28]
 8003022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003026:	f7fd f8ed 	bl	8000204 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4613      	mov	r3, r2
 8003030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_GetSysClockFreq+0x348>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0f1b      	lsrs	r3, r3, #28
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003052:	e003      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800305a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003060:	4618      	mov	r0, r3
 8003062:	3798      	adds	r7, #152	; 0x98
 8003064:	46bd      	mov	sp, r7
 8003066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	00f42400 	.word	0x00f42400
 8003074:	00d59f80 	.word	0x00d59f80

08003078 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e28d      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8083 	beq.w	800319e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003098:	4b94      	ldr	r3, [pc, #592]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d019      	beq.n	80030d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030a4:	4b91      	ldr	r3, [pc, #580]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030b0:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030bc:	d00c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d112      	bne.n	80030f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d6:	d10b      	bne.n	80030f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d05b      	beq.n	800319c <HAL_RCC_OscConfig+0x124>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d157      	bne.n	800319c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e25a      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d106      	bne.n	8003108 <HAL_RCC_OscConfig+0x90>
 80030fa:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7b      	ldr	r2, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xcc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xb4>
 8003112:	4b76      	ldr	r3, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a72      	ldr	r2, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xcc>
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6b      	ldr	r2, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd fbfc 	bl	8000948 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd fbf8 	bl	8000948 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e21f      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b61      	ldr	r3, [pc, #388]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xdc>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd fbe8 	bl	8000948 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fd fbe4 	bl	8000948 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e20b      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b57      	ldr	r3, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x104>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d06f      	beq.n	800328a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031aa:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031b6:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d105      	bne.n	80031ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x186>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1d3      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4937      	ldr	r1, [pc, #220]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e03a      	b.n	800328a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x278>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fd fb91 	bl	8000948 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322a:	f7fd fb8d 	bl	8000948 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1b4      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4925      	ldr	r1, [pc, #148]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_OscConfig+0x278>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fb70 	bl	8000948 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326c:	f7fd fb6c 	bl	8000948 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e193      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d036      	beq.n	8003304 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fb50 	bl	8000948 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fb4c 	bl	8000948 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e173      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x274>)
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x234>
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_OscConfig+0x27c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd fb39 	bl	8000948 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00e      	b.n	80032f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032da:	f7fd fb35 	bl	8000948 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d907      	bls.n	80032f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e15c      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	42470000 	.word	0x42470000
 80032f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b8a      	ldr	r3, [pc, #552]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ea      	bne.n	80032da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8097 	beq.w	8003440 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b83      	ldr	r3, [pc, #524]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a7e      	ldr	r2, [pc, #504]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b7c      	ldr	r3, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b79      	ldr	r3, [pc, #484]	; (8003528 <HAL_RCC_OscConfig+0x4b0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b76      	ldr	r3, [pc, #472]	; (8003528 <HAL_RCC_OscConfig+0x4b0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a75      	ldr	r2, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x4b0>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fd faf5 	bl	8000948 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd faf1 	bl	8000948 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e118      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <HAL_RCC_OscConfig+0x4b0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x31e>
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a65      	ldr	r2, [pc, #404]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e01c      	b.n	80033d0 <HAL_RCC_OscConfig+0x358>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x340>
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x358>
 80033b8:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a56      	ldr	r2, [pc, #344]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	f023 0304 	bic.w	r3, r3, #4
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fd fab6 	bl	8000948 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fd fab2 	bl	8000948 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0d7      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ee      	beq.n	80033e0 <HAL_RCC_OscConfig+0x368>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fd faa0 	bl	8000948 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fd fa9c 	bl	8000948 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0c1      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ee      	bne.n	800340c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80ad 	beq.w	80035a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d060      	beq.n	8003518 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d145      	bne.n	80034ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <HAL_RCC_OscConfig+0x4b4>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fd fa70 	bl	8000948 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fd fa6c 	bl	8000948 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e093      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4b4>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd fa41 	bl	8000948 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fd fa3d 	bl	8000948 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e064      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x452>
 80034e8:	e05c      	b.n	80035a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x4b4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fa2a 	bl	8000948 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd fa26 	bl	8000948 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04d      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x480>
 8003516:	e045      	b.n	80035a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e040      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <HAL_RCC_OscConfig+0x538>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d030      	beq.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d129      	bne.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d122      	bne.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d119      	bne.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d10f      	bne.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d107      	bne.n	80035a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b4:	b084      	sub	sp, #16
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	f107 001c 	add.w	r0, r7, #28
 80035c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d122      	bne.n	8003612 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f001 fbe8 	bl	8004ddc <USB_CoreReset>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e01a      	b.n	8003648 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f001 fbdc 	bl	8004ddc <USB_CoreReset>
 8003624:	4603      	mov	r3, r0
 8003626:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
 800363a:	e005      	b.n	8003648 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10b      	bne.n	8003666 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f043 0206 	orr.w	r2, r3, #6
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003672:	b004      	add	sp, #16
 8003674:	4770      	bx	lr
	...

08003678 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d165      	bne.n	8003758 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <USB_SetTurnaroundTime+0x11c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d906      	bls.n	80036a2 <USB_SetTurnaroundTime+0x2a>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a40      	ldr	r2, [pc, #256]	; (8003798 <USB_SetTurnaroundTime+0x120>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d202      	bcs.n	80036a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800369c:	230f      	movs	r3, #15
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e062      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a3c      	ldr	r2, [pc, #240]	; (8003798 <USB_SetTurnaroundTime+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d306      	bcc.n	80036b8 <USB_SetTurnaroundTime+0x40>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <USB_SetTurnaroundTime+0x124>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d202      	bcs.n	80036b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036b2:	230e      	movs	r3, #14
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e057      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a38      	ldr	r2, [pc, #224]	; (800379c <USB_SetTurnaroundTime+0x124>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d306      	bcc.n	80036ce <USB_SetTurnaroundTime+0x56>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <USB_SetTurnaroundTime+0x128>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d202      	bcs.n	80036ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036c8:	230d      	movs	r3, #13
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e04c      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a33      	ldr	r2, [pc, #204]	; (80037a0 <USB_SetTurnaroundTime+0x128>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d306      	bcc.n	80036e4 <USB_SetTurnaroundTime+0x6c>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a32      	ldr	r2, [pc, #200]	; (80037a4 <USB_SetTurnaroundTime+0x12c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d802      	bhi.n	80036e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036de:	230c      	movs	r3, #12
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e041      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <USB_SetTurnaroundTime+0x12c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d906      	bls.n	80036fa <USB_SetTurnaroundTime+0x82>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <USB_SetTurnaroundTime+0x130>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d802      	bhi.n	80036fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036f4:	230b      	movs	r3, #11
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e036      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <USB_SetTurnaroundTime+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d906      	bls.n	8003710 <USB_SetTurnaroundTime+0x98>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <USB_SetTurnaroundTime+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800370a:	230a      	movs	r3, #10
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e02b      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <USB_SetTurnaroundTime+0x134>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d906      	bls.n	8003726 <USB_SetTurnaroundTime+0xae>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <USB_SetTurnaroundTime+0x138>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d202      	bcs.n	8003726 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003720:	2309      	movs	r3, #9
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e020      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a21      	ldr	r2, [pc, #132]	; (80037b0 <USB_SetTurnaroundTime+0x138>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d306      	bcc.n	800373c <USB_SetTurnaroundTime+0xc4>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <USB_SetTurnaroundTime+0x13c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003736:	2308      	movs	r3, #8
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e015      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <USB_SetTurnaroundTime+0x13c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d906      	bls.n	8003752 <USB_SetTurnaroundTime+0xda>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <USB_SetTurnaroundTime+0x140>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d202      	bcs.n	8003752 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800374c:	2307      	movs	r3, #7
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00a      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003752:	2306      	movs	r3, #6
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e007      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800375e:	2309      	movs	r3, #9
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e001      	b.n	8003768 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003764:	2309      	movs	r3, #9
 8003766:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	00d8acbf 	.word	0x00d8acbf
 8003798:	00e4e1c0 	.word	0x00e4e1c0
 800379c:	00f42400 	.word	0x00f42400
 80037a0:	01067380 	.word	0x01067380
 80037a4:	011a499f 	.word	0x011a499f
 80037a8:	01312cff 	.word	0x01312cff
 80037ac:	014ca43f 	.word	0x014ca43f
 80037b0:	016e3600 	.word	0x016e3600
 80037b4:	01a6ab1f 	.word	0x01a6ab1f
 80037b8:	01e84800 	.word	0x01e84800

080037bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d115      	bne.n	800384e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800382e:	2001      	movs	r0, #1
 8003830:	f7fd f896 	bl	8000960 <HAL_Delay>
      ms++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 fa3f 	bl	8004cbe <USB_GetMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d01e      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b31      	cmp	r3, #49	; 0x31
 800384a:	d9f0      	bls.n	800382e <USB_SetCurrentMode+0x2e>
 800384c:	e01a      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d115      	bne.n	8003880 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003860:	2001      	movs	r0, #1
 8003862:	f7fd f87d 	bl	8000960 <HAL_Delay>
      ms++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3301      	adds	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 fa26 	bl	8004cbe <USB_GetMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <USB_SetCurrentMode+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b31      	cmp	r3, #49	; 0x31
 800387c:	d9f0      	bls.n	8003860 <USB_SetCurrentMode+0x60>
 800387e:	e001      	b.n	8003884 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e005      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b32      	cmp	r3, #50	; 0x32
 8003888:	d101      	bne.n	800388e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003898:	b084      	sub	sp, #16
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e009      	b.n	80038cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3340      	adds	r3, #64	; 0x40
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	2200      	movs	r2, #0
 80038c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3301      	adds	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b0e      	cmp	r3, #14
 80038d0:	d9f2      	bls.n	80038b8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11c      	bne.n	8003912 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e005      	b.n	800391e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003924:	461a      	mov	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003930:	4619      	mov	r1, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	461a      	mov	r2, r3
 800393a:	680b      	ldr	r3, [r1, #0]
 800393c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10c      	bne.n	800395e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f965 	bl	8003c1c <USB_SetDevSpeed>
 8003952:	e008      	b.n	8003966 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003954:	2101      	movs	r1, #1
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f960 	bl	8003c1c <USB_SetDevSpeed>
 800395c:	e003      	b.n	8003966 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800395e:	2103      	movs	r1, #3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f95b 	bl	8003c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003966:	2110      	movs	r1, #16
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8f3 	bl	8003b54 <USB_FlushTxFifo>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f91f 	bl	8003bbc <USB_FlushRxFifo>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e043      	b.n	8003a3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c8:	d118      	bne.n	80039fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	461a      	mov	r2, r3
 80039de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e013      	b.n	8003a0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	461a      	mov	r2, r3
 80039f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e008      	b.n	8003a0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3301      	adds	r3, #1
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b7      	bcc.n	80039b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	e043      	b.n	8003ad0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5e:	d118      	bne.n	8003a92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	461a      	mov	r2, r3
 8003a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e013      	b.n	8003aa4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e008      	b.n	8003aa4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3b7      	bcc.n	8003a48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d105      	bne.n	8003b0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <USB_DevInit+0x2b8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f043 0208 	orr.w	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4c:	b004      	add	sp, #16
 8003b4e:	4770      	bx	lr
 8003b50:	803c3800 	.word	0x803c3800

08003b54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <USB_FlushTxFifo+0x64>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e01b      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	daf2      	bge.n	8003b62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <USB_FlushTxFifo+0x64>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e006      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d0f0      	beq.n	8003b8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <USB_FlushRxFifo+0x5c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e018      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	daf2      	bge.n	8003bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2210      	movs	r2, #16
 8003bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <USB_FlushRxFifo+0x5c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d0f0      	beq.n	8003bec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	00030d40 	.word	0x00030d40

08003c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	68f9      	ldr	r1, [r7, #12]
 8003c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e00a      	b.n	8003c8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d002      	beq.n	8003c80 <USB_GetDevSpeed+0x32>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d102      	bne.n	8003c86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c80:	2302      	movs	r3, #2
 8003c82:	75fb      	strb	r3, [r7, #23]
 8003c84:	e001      	b.n	8003c8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c86:	230f      	movs	r3, #15
 8003c88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d13a      	bne.n	8003d2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d155      	bne.n	8003d98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	791b      	ldrb	r3, [r3, #4]
 8003d06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	059b      	lsls	r3, r3, #22
 8003d0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d10:	4313      	orrs	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e036      	b.n	8003d98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11a      	bne.n	8003d98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	791b      	ldrb	r3, [r3, #4]
 8003d7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d161      	bne.n	8003e88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dda:	d11f      	bne.n	8003e1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	0151      	lsls	r1, r2, #5
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	440a      	add	r2, r1
 8003e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f303 	lsl.w	r3, r1, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e60:	4013      	ands	r3, r2
 8003e62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	0159      	lsls	r1, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	440b      	add	r3, r1
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4b35      	ldr	r3, [pc, #212]	; (8003f58 <USB_DeactivateEndpoint+0x1b0>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
 8003e86:	e060      	b.n	8003f4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e9e:	d11f      	bne.n	8003ee0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	041b      	lsls	r3, r3, #16
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f00:	4013      	ands	r3, r2
 8003f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4013      	ands	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	4619      	mov	r1, r3
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <USB_DeactivateEndpoint+0x1b4>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	ec337800 	.word	0xec337800
 8003f5c:	eff37800 	.word	0xeff37800

08003f60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 815c 	bne.w	800423a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d132      	bne.n	8003ff0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe8:	0cdb      	lsrs	r3, r3, #19
 8003fea:	04db      	lsls	r3, r3, #19
 8003fec:	6113      	str	r3, [r2, #16]
 8003fee:	e074      	b.n	80040da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	0151      	lsls	r1, r2, #5
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	440a      	add	r2, r1
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	0cdb      	lsrs	r3, r3, #19
 800400c:	04db      	lsls	r3, r3, #19
 800400e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800402e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	440b      	add	r3, r1
 800404c:	1e59      	subs	r1, r3, #1
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	fbb1 f3f3 	udiv	r3, r1, r3
 8004056:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004058:	4b9d      	ldr	r3, [pc, #628]	; (80042d0 <USB_EPStartXfer+0x370>)
 800405a:	400b      	ands	r3, r1
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	0148      	lsls	r0, r1, #5
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	4401      	add	r1, r0
 8004064:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004068:	4313      	orrs	r3, r2
 800406a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	0148      	lsls	r0, r1, #5
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	4401      	add	r1, r0
 800408a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800408e:	4313      	orrs	r3, r2
 8004090:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	791b      	ldrb	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11f      	bne.n	80040da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d14b      	bne.n	8004178 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	791b      	ldrb	r3, [r3, #4]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d128      	bne.n	8004156 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	0151      	lsls	r1, r2, #5
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	440a      	add	r2, r1
 800412a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e00f      	b.n	8004156 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	440a      	add	r2, r1
 800414c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004170:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e133      	b.n	80043e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004192:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004196:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	791b      	ldrb	r3, [r3, #4]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d015      	beq.n	80041cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 811b 	beq.w	80043e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	69f9      	ldr	r1, [r7, #28]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c6:	4313      	orrs	r3, r2
 80041c8:	634b      	str	r3, [r1, #52]	; 0x34
 80041ca:	e109      	b.n	80043e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d110      	bne.n	80041fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e00f      	b.n	800421e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6919      	ldr	r1, [r3, #16]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	b298      	uxth	r0, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4603      	mov	r3, r0
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fade 	bl	80047f4 <USB_WritePacket>
 8004238:	e0d2      	b.n	80043e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	0cdb      	lsrs	r3, r3, #19
 8004256:	04db      	lsls	r3, r3, #19
 8004258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800427c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ca:	6113      	str	r3, [r2, #16]
 80042cc:	e03a      	b.n	8004344 <USB_EPStartXfer+0x3e4>
 80042ce:	bf00      	nop
 80042d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	8afa      	ldrh	r2, [r7, #22]
 80042f0:	fb03 f202 	mul.w	r2, r3, r2
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	8afb      	ldrh	r3, [r7, #22]
 8004308:	04d9      	lsls	r1, r3, #19
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <USB_EPStartXfer+0x48c>)
 800430c:	400b      	ands	r3, r1
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	0148      	lsls	r0, r1, #5
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	4401      	add	r1, r0
 8004316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800431a:	4313      	orrs	r3, r2
 800431c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	69b9      	ldr	r1, [r7, #24]
 8004336:	0148      	lsls	r0, r1, #5
 8004338:	69f9      	ldr	r1, [r7, #28]
 800433a:	4401      	add	r1, r0
 800433c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10d      	bne.n	8004366 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6919      	ldr	r1, [r3, #16]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004362:	460a      	mov	r2, r1
 8004364:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d128      	bne.n	80043c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d110      	bne.n	80043a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00f      	b.n	80043c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	1ff80000 	.word	0x1ff80000

080043f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	2b01      	cmp	r3, #1
 800440e:	f040 80ce 	bne.w	80045ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d132      	bne.n	8004480 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004434:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004438:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800443c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800445c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	440a      	add	r2, r1
 8004474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004478:	0cdb      	lsrs	r3, r3, #19
 800447a:	04db      	lsls	r3, r3, #19
 800447c:	6113      	str	r3, [r2, #16]
 800447e:	e04e      	b.n	800451e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449a:	0cdb      	lsrs	r3, r3, #19
 800449c:	04db      	lsls	r3, r3, #19
 800449e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	0151      	lsls	r1, r2, #5
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	440a      	add	r2, r1
 80044b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d903      	bls.n	80044d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	6939      	ldr	r1, [r7, #16]
 8004510:	0148      	lsls	r0, r1, #5
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	4401      	add	r1, r0
 8004516:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800451a:	4313      	orrs	r3, r2
 800451c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d11e      	bne.n	8004562 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800455a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e097      	b.n	8004692 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004580:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8083 	beq.w	8004692 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4313      	orrs	r3, r2
 80045aa:	634b      	str	r3, [r1, #52]	; 0x34
 80045ac:	e071      	b.n	8004692 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c8:	0cdb      	lsrs	r3, r3, #19
 80045ca:	04db      	lsls	r3, r3, #19
 80045cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	0148      	lsls	r0, r1, #5
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	4401      	add	r1, r0
 8004648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800464c:	4313      	orrs	r3, r2
 800464e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10d      	bne.n	8004672 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	460a      	mov	r2, r1
 8004670:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004690:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d14a      	bne.n	8004754 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046d6:	f040 8086 	bne.w	80047e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004720:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f242 7210 	movw	r2, #10000	; 0x2710
 800472e:	4293      	cmp	r3, r2
 8004730:	d902      	bls.n	8004738 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
          break;
 8004736:	e056      	b.n	80047e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800474c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004750:	d0e7      	beq.n	8004722 <USB_EPStopXfer+0x82>
 8004752:	e048      	b.n	80047e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800476c:	d13b      	bne.n	80047e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004790:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3301      	adds	r3, #1
 80047ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f242 7210 	movw	r2, #10000	; 0x2710
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d902      	bls.n	80047cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
          break;
 80047ca:	e00c      	b.n	80047e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e4:	d0e7      	beq.n	80047b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	460b      	mov	r3, r1
 8004804:	71fb      	strb	r3, [r7, #7]
 8004806:	4613      	mov	r3, r2
 8004808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d123      	bne.n	8004862 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800481a:	88bb      	ldrh	r3, [r7, #4]
 800481c:	3303      	adds	r3, #3
 800481e:	089b      	lsrs	r3, r3, #2
 8004820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e018      	b.n	800485a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	031a      	lsls	r2, r3, #12
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	461a      	mov	r2, r3
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	3301      	adds	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3e2      	bcc.n	8004828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3724      	adds	r7, #36	; 0x24
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004870:	b480      	push	{r7}
 8004872:	b08b      	sub	sp, #44	; 0x2c
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	b29b      	uxth	r3, r3
 800488c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004896:	2300      	movs	r3, #0
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e014      	b.n	80048c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	3301      	adds	r3, #1
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	3301      	adds	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3301      	adds	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	3301      	adds	r3, #1
 80048c4:	623b      	str	r3, [r7, #32]
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d3e6      	bcc.n	800489c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048ce:	8bfb      	ldrh	r3, [r7, #30]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01e      	beq.n	8004912 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	461a      	mov	r2, r3
 80048e0:	f107 0310 	add.w	r3, r7, #16
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	701a      	strb	r2, [r3, #0]
      i++;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	3301      	adds	r3, #1
 80048fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	3301      	adds	r3, #1
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004906:	8bfb      	ldrh	r3, [r7, #30]
 8004908:	3b01      	subs	r3, #1
 800490a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800490c:	8bfb      	ldrh	r3, [r7, #30]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ea      	bne.n	80048e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004914:	4618      	mov	r0, r3
 8004916:	372c      	adds	r7, #44	; 0x2c
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d12c      	bne.n	8004996 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db12      	blt.n	8004974 <USB_EPSetStall+0x54>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00f      	beq.n	8004974 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004972:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e02b      	b.n	80049ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db12      	blt.n	80049ce <USB_EPSetStall+0xae>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00f      	beq.n	80049ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d128      	bne.n	8004a6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d003      	beq.n	8004a48 <USB_EPClearStall+0x4c>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d138      	bne.n	8004aba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e027      	b.n	8004aba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d003      	beq.n	8004a9a <USB_EPClearStall+0x9e>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	791b      	ldrb	r3, [r3, #4]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d10f      	bne.n	8004aba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b42:	f023 0302 	bic.w	r3, r3, #2
 8004b46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b70:	f023 0303 	bic.w	r3, r3, #3
 8004b74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	0c1b      	lsrs	r3, r3, #16
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	b29b      	uxth	r3, r3
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c54:	68bb      	ldr	r3, [r7, #8]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	01db      	lsls	r3, r3, #7
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4013      	ands	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cf8:	f023 0307 	bic.w	r3, r3, #7
 8004cfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	333c      	adds	r3, #60	; 0x3c
 8004d36:	3304      	adds	r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4a26      	ldr	r2, [pc, #152]	; (8004dd8 <USB_EP0_OutStart+0xb8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d90a      	bls.n	8004d5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d54:	d101      	bne.n	8004d5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e037      	b.n	8004dca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	f043 0318 	orr.w	r3, r3, #24
 8004d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004da0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004da2:	7afb      	ldrb	r3, [r7, #11]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d10f      	bne.n	8004dc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	4f54300a 	.word	0x4f54300a

08004ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <USB_CoreReset+0x64>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e01b      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	daf2      	bge.n	8004de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f043 0201 	orr.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3301      	adds	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <USB_CoreReset+0x64>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d0f0      	beq.n	8004e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	00030d40 	.word	0x00030d40

08004e44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e54:	f002 fd34 	bl	80078c0 <USBD_static_malloc>
 8004e58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	32b0      	adds	r2, #176	; 0xb0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e70:	2302      	movs	r3, #2
 8004e72:	e0d4      	b.n	800501e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e74:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e78:	2100      	movs	r1, #0
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f002 fd88 	bl	8007990 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	; 0xb0
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	32b0      	adds	r2, #176	; 0xb0
 8004e9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7c1b      	ldrb	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d138      	bne.n	8004f1e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004eac:	4b5e      	ldr	r3, [pc, #376]	; (8005028 <USBD_CDC_Init+0x1e4>)
 8004eae:	7819      	ldrb	r1, [r3, #0]
 8004eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f002 fb91 	bl	80075de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ebc:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <USBD_CDC_Init+0x1e4>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 020f 	and.w	r2, r3, #15
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3324      	adds	r3, #36	; 0x24
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <USBD_CDC_Init+0x1e8>)
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ede:	2202      	movs	r2, #2
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f002 fb7c 	bl	80075de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ee6:	4b51      	ldr	r3, [pc, #324]	; (800502c <USBD_CDC_Init+0x1e8>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f003 020f 	and.w	r2, r3, #15
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004efe:	2201      	movs	r2, #1
 8004f00:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f02:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <USBD_CDC_Init+0x1ec>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3326      	adds	r3, #38	; 0x26
 8004f18:	2210      	movs	r2, #16
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e035      	b.n	8004f8a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f1e:	4b42      	ldr	r3, [pc, #264]	; (8005028 <USBD_CDC_Init+0x1e4>)
 8004f20:	7819      	ldrb	r1, [r3, #0]
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	2202      	movs	r2, #2
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 fb59 	bl	80075de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f2c:	4b3e      	ldr	r3, [pc, #248]	; (8005028 <USBD_CDC_Init+0x1e4>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 020f 	and.w	r2, r3, #15
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2201      	movs	r2, #1
 8004f44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <USBD_CDC_Init+0x1e8>)
 8004f48:	7819      	ldrb	r1, [r3, #0]
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 fb45 	bl	80075de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f54:	4b35      	ldr	r3, [pc, #212]	; (800502c <USBD_CDC_Init+0x1e8>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f003 020f 	and.w	r2, r3, #15
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <USBD_CDC_Init+0x1ec>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3326      	adds	r3, #38	; 0x26
 8004f86:	2210      	movs	r2, #16
 8004f88:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f8a:	4b29      	ldr	r3, [pc, #164]	; (8005030 <USBD_CDC_Init+0x1ec>)
 8004f8c:	7819      	ldrb	r1, [r3, #0]
 8004f8e:	2308      	movs	r3, #8
 8004f90:	2203      	movs	r2, #3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f002 fb23 	bl	80075de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <USBD_CDC_Init+0x1ec>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 020f 	and.w	r2, r3, #15
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3324      	adds	r3, #36	; 0x24
 8004fae:	2201      	movs	r2, #1
 8004fb0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	33b0      	adds	r3, #176	; 0xb0
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e018      	b.n	800501e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	7c1b      	ldrb	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	; (800502c <USBD_CDC_Init+0x1e8>)
 8004ff6:	7819      	ldrb	r1, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f002 fbda 	bl	80077bc <USBD_LL_PrepareReceive>
 8005008:	e008      	b.n	800501c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <USBD_CDC_Init+0x1e8>)
 800500c:	7819      	ldrb	r1, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f002 fbd0 	bl	80077bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000097 	.word	0x20000097
 800502c:	20000098 	.word	0x20000098
 8005030:	20000099 	.word	0x20000099

08005034 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <USBD_CDC_DeInit+0xf8>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f002 faef 	bl	800762a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800504c:	4b37      	ldr	r3, [pc, #220]	; (800512c <USBD_CDC_DeInit+0xf8>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	3324      	adds	r3, #36	; 0x24
 8005062:	2200      	movs	r2, #0
 8005064:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005066:	4b32      	ldr	r3, [pc, #200]	; (8005130 <USBD_CDC_DeInit+0xfc>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f002 fadc 	bl	800762a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005072:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <USBD_CDC_DeInit+0xfc>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800508a:	2200      	movs	r2, #0
 800508c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800508e:	4b29      	ldr	r3, [pc, #164]	; (8005134 <USBD_CDC_DeInit+0x100>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f002 fac8 	bl	800762a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800509a:	4b26      	ldr	r3, [pc, #152]	; (8005134 <USBD_CDC_DeInit+0x100>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	2200      	movs	r2, #0
 80050b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <USBD_CDC_DeInit+0x100>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3326      	adds	r3, #38	; 0x26
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	32b0      	adds	r2, #176	; 0xb0
 80050d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01f      	beq.n	8005120 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	33b0      	adds	r3, #176	; 0xb0
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	32b0      	adds	r2, #176	; 0xb0
 80050fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005102:	4618      	mov	r0, r3
 8005104:	f002 fbea 	bl	80078dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	32b0      	adds	r2, #176	; 0xb0
 8005112:	2100      	movs	r1, #0
 8005114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000097 	.word	0x20000097
 8005130:	20000098 	.word	0x20000098
 8005134:	20000099 	.word	0x20000099

08005138 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	32b0      	adds	r2, #176	; 0xb0
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005164:	2303      	movs	r3, #3
 8005166:	e0bf      	b.n	80052e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005170:	2b00      	cmp	r3, #0
 8005172:	d050      	beq.n	8005216 <USBD_CDC_Setup+0xde>
 8005174:	2b20      	cmp	r3, #32
 8005176:	f040 80af 	bne.w	80052d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	88db      	ldrh	r3, [r3, #6]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d03a      	beq.n	80051f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b25b      	sxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	da1b      	bge.n	80051c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	33b0      	adds	r3, #176	; 0xb0
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80051a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	88d2      	ldrh	r2, [r2, #6]
 80051a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	88db      	ldrh	r3, [r3, #6]
 80051ae:	2b07      	cmp	r3, #7
 80051b0:	bf28      	it	cs
 80051b2:	2307      	movcs	r3, #7
 80051b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	89fa      	ldrh	r2, [r7, #14]
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fdb3 	bl	8006d28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051c2:	e090      	b.n	80052e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785a      	ldrb	r2, [r3, #1]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	88db      	ldrh	r3, [r3, #6]
 80051d2:	2b3f      	cmp	r3, #63	; 0x3f
 80051d4:	d803      	bhi.n	80051de <USBD_CDC_Setup+0xa6>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	88db      	ldrh	r3, [r3, #6]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	e000      	b.n	80051e0 <USBD_CDC_Setup+0xa8>
 80051de:	2240      	movs	r2, #64	; 0x40
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051ee:	461a      	mov	r2, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fdc5 	bl	8006d80 <USBD_CtlPrepareRx>
      break;
 80051f6:	e076      	b.n	80052e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	33b0      	adds	r3, #176	; 0xb0
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	7850      	ldrb	r0, [r2, #1]
 800520e:	2200      	movs	r2, #0
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4798      	blx	r3
      break;
 8005214:	e067      	b.n	80052e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b0b      	cmp	r3, #11
 800521c:	d851      	bhi.n	80052c2 <USBD_CDC_Setup+0x18a>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <USBD_CDC_Setup+0xec>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005255 	.word	0x08005255
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052c3 	.word	0x080052c3
 8005230:	080052c3 	.word	0x080052c3
 8005234:	080052c3 	.word	0x080052c3
 8005238:	080052c3 	.word	0x080052c3
 800523c:	080052c3 	.word	0x080052c3
 8005240:	080052c3 	.word	0x080052c3
 8005244:	080052c3 	.word	0x080052c3
 8005248:	080052c3 	.word	0x080052c3
 800524c:	0800527f 	.word	0x0800527f
 8005250:	080052a9 	.word	0x080052a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d107      	bne.n	8005270 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005260:	f107 030a 	add.w	r3, r7, #10
 8005264:	2202      	movs	r2, #2
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fd5d 	bl	8006d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800526e:	e032      	b.n	80052d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 fce7 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 8005278:	2303      	movs	r3, #3
 800527a:	75fb      	strb	r3, [r7, #23]
          break;
 800527c:	e02b      	b.n	80052d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d107      	bne.n	800529a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800528a:	f107 030d 	add.w	r3, r7, #13
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fd48 	bl	8006d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005298:	e01d      	b.n	80052d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fcd2 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 80052a2:	2303      	movs	r3, #3
 80052a4:	75fb      	strb	r3, [r7, #23]
          break;
 80052a6:	e016      	b.n	80052d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d00f      	beq.n	80052d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fcc5 	bl	8006c46 <USBD_CtlError>
            ret = USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052c0:	e008      	b.n	80052d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fcbe 	bl	8006c46 <USBD_CtlError>
          ret = USBD_FAIL;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
          break;
 80052ce:	e002      	b.n	80052d6 <USBD_CDC_Setup+0x19e>
          break;
 80052d0:	bf00      	nop
 80052d2:	e008      	b.n	80052e6 <USBD_CDC_Setup+0x1ae>
          break;
 80052d4:	bf00      	nop
      }
      break;
 80052d6:	e006      	b.n	80052e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fcb3 	bl	8006c46 <USBD_CtlError>
      ret = USBD_FAIL;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
      break;
 80052e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	32b0      	adds	r2, #176	; 0xb0
 800530e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005316:	2303      	movs	r3, #3
 8005318:	e065      	b.n	80053e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	32b0      	adds	r2, #176	; 0xb0
 8005324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005328:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	3318      	adds	r3, #24
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02f      	beq.n	80053a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	f003 020f 	and.w	r2, r3, #15
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3318      	adds	r3, #24
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 010f 	and.w	r1, r3, #15
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	460b      	mov	r3, r1
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	440b      	add	r3, r1
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4403      	add	r3, r0
 800536c:	3348      	adds	r3, #72	; 0x48
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	fbb2 f1f3 	udiv	r1, r2, r3
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800537a:	2b00      	cmp	r3, #0
 800537c:	d112      	bne.n	80053a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3318      	adds	r3, #24
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005396:	78f9      	ldrb	r1, [r7, #3]
 8005398:	2300      	movs	r3, #0
 800539a:	2200      	movs	r2, #0
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f002 f9ec 	bl	800777a <USBD_LL_Transmit>
 80053a2:	e01f      	b.n	80053e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	33b0      	adds	r3, #176	; 0xb0
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	33b0      	adds	r3, #176	; 0xb0
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	32b0      	adds	r2, #176	; 0xb0
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	32b0      	adds	r2, #176	; 0xb0
 8005414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e01a      	b.n	8005456 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f002 f9ea 	bl	80077fe <USBD_LL_GetRxDataSize>
 800542a:	4602      	mov	r2, r0
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	33b0      	adds	r3, #176	; 0xb0
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005450:	4611      	mov	r1, r2
 8005452:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	32b0      	adds	r2, #176	; 0xb0
 8005470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005474:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800547c:	2303      	movs	r3, #3
 800547e:	e025      	b.n	80054cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	33b0      	adds	r3, #176	; 0xb0
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01a      	beq.n	80054ca <USBD_CDC_EP0_RxReady+0x6c>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800549a:	2bff      	cmp	r3, #255	; 0xff
 800549c:	d015      	beq.n	80054ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	33b0      	adds	r3, #176	; 0xb0
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054be:	b292      	uxth	r2, r2
 80054c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	22ff      	movs	r2, #255	; 0xff
 80054c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054dc:	2182      	movs	r1, #130	; 0x82
 80054de:	4818      	ldr	r0, [pc, #96]	; (8005540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054e0:	f000 fd4f 	bl	8005f82 <USBD_GetEpDesc>
 80054e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054e6:	2101      	movs	r1, #1
 80054e8:	4815      	ldr	r0, [pc, #84]	; (8005540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ea:	f000 fd4a 	bl	8005f82 <USBD_GetEpDesc>
 80054ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054f0:	2181      	movs	r1, #129	; 0x81
 80054f2:	4813      	ldr	r0, [pc, #76]	; (8005540 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054f4:	f000 fd45 	bl	8005f82 <USBD_GetEpDesc>
 80054f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2210      	movs	r2, #16
 8005504:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2200      	movs	r2, #0
 8005510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005514:	711a      	strb	r2, [r3, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d006      	beq.n	800552e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005528:	711a      	strb	r2, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2243      	movs	r2, #67	; 0x43
 8005532:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000054 	.word	0x20000054

08005544 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800554c:	2182      	movs	r1, #130	; 0x82
 800554e:	4818      	ldr	r0, [pc, #96]	; (80055b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005550:	f000 fd17 	bl	8005f82 <USBD_GetEpDesc>
 8005554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005556:	2101      	movs	r1, #1
 8005558:	4815      	ldr	r0, [pc, #84]	; (80055b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800555a:	f000 fd12 	bl	8005f82 <USBD_GetEpDesc>
 800555e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005560:	2181      	movs	r1, #129	; 0x81
 8005562:	4813      	ldr	r0, [pc, #76]	; (80055b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005564:	f000 fd0d 	bl	8005f82 <USBD_GetEpDesc>
 8005568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2210      	movs	r2, #16
 8005574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2200      	movs	r2, #0
 8005580:	711a      	strb	r2, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f042 0202 	orr.w	r2, r2, #2
 8005588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d006      	beq.n	800559e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	711a      	strb	r2, [r3, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f042 0202 	orr.w	r2, r2, #2
 800559c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2243      	movs	r2, #67	; 0x43
 80055a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000054 	.word	0x20000054

080055b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055bc:	2182      	movs	r1, #130	; 0x82
 80055be:	4818      	ldr	r0, [pc, #96]	; (8005620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055c0:	f000 fcdf 	bl	8005f82 <USBD_GetEpDesc>
 80055c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055c6:	2101      	movs	r1, #1
 80055c8:	4815      	ldr	r0, [pc, #84]	; (8005620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055ca:	f000 fcda 	bl	8005f82 <USBD_GetEpDesc>
 80055ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055d0:	2181      	movs	r1, #129	; 0x81
 80055d2:	4813      	ldr	r0, [pc, #76]	; (8005620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055d4:	f000 fcd5 	bl	8005f82 <USBD_GetEpDesc>
 80055d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2210      	movs	r2, #16
 80055e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d006      	beq.n	80055fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f4:	711a      	strb	r2, [r3, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005608:	711a      	strb	r2, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2243      	movs	r2, #67	; 0x43
 8005612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000054 	.word	0x20000054

08005624 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	220a      	movs	r2, #10
 8005630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005632:	4b03      	ldr	r3, [pc, #12]	; (8005640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000010 	.word	0x20000010

08005644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005654:	2303      	movs	r3, #3
 8005656:	e009      	b.n	800566c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	33b0      	adds	r3, #176	; 0xb0
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	32b0      	adds	r2, #176	; 0xb0
 800568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005692:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800569a:	2303      	movs	r3, #3
 800569c:	e008      	b.n	80056b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	32b0      	adds	r2, #176	; 0xb0
 80056d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	e004      	b.n	80056ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	32b0      	adds	r2, #176	; 0xb0
 800570a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	32b0      	adds	r2, #176	; 0xb0
 800571e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005726:	2303      	movs	r3, #3
 8005728:	e025      	b.n	8005776 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005730:	2b00      	cmp	r3, #0
 8005732:	d11f      	bne.n	8005774 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2201      	movs	r2, #1
 8005738:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <USBD_CDC_TransmitPacket+0x88>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f003 020f 	and.w	r2, r3, #15
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4403      	add	r3, r0
 8005756:	3318      	adds	r3, #24
 8005758:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <USBD_CDC_TransmitPacket+0x88>)
 800575c:	7819      	ldrb	r1, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f002 f805 	bl	800777a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000097 	.word	0x20000097

08005784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	32b0      	adds	r2, #176	; 0xb0
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	32b0      	adds	r2, #176	; 0xb0
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e018      	b.n	80057e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7c1b      	ldrb	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <USBD_CDC_ReceivePacket+0x68>)
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fff7 	bl	80077bc <USBD_LL_PrepareReceive>
 80057ce:	e008      	b.n	80057e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <USBD_CDC_ReceivePacket+0x68>)
 80057d2:	7819      	ldrb	r1, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057da:	2340      	movs	r3, #64	; 0x40
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 ffed 	bl	80077bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000098 	.word	0x20000098

080057f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005804:	2303      	movs	r3, #3
 8005806:	e01f      	b.n	8005848 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	79fa      	ldrb	r2, [r7, #7]
 800583a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f001 fe67 	bl	8007510 <USBD_LL_Init>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005864:	2303      	movs	r3, #3
 8005866:	e025      	b.n	80058b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	32ae      	adds	r2, #174	; 0xae
 800587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00f      	beq.n	80058a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	f107 020e 	add.w	r2, r7, #14
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fe6f 	bl	80075a8 <USBD_LL_Start>
 80058ca:	4603      	mov	r3, r0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	4611      	mov	r1, r2
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	4611      	mov	r1, r2
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f932 	bl	8006bd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800597c:	461a      	mov	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b02      	cmp	r3, #2
 8005990:	d01a      	beq.n	80059c8 <USBD_LL_SetupStage+0x72>
 8005992:	2b02      	cmp	r3, #2
 8005994:	d822      	bhi.n	80059dc <USBD_LL_SetupStage+0x86>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <USBD_LL_SetupStage+0x4a>
 800599a:	2b01      	cmp	r3, #1
 800599c:	d00a      	beq.n	80059b4 <USBD_LL_SetupStage+0x5e>
 800599e:	e01d      	b.n	80059dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb5f 	bl	800606c <USBD_StdDevReq>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]
      break;
 80059b2:	e020      	b.n	80059f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fbc7 	bl	8006150 <USBD_StdItfReq>
 80059c2:	4603      	mov	r3, r0
 80059c4:	73fb      	strb	r3, [r7, #15]
      break;
 80059c6:	e016      	b.n	80059f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fc29 	bl	8006228 <USBD_StdEPReq>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
      break;
 80059da:	e00c      	b.n	80059f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fe3c 	bl	8007668 <USBD_LL_StallEP>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	bf00      	nop
  }

  return ret;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005a12:	7afb      	ldrb	r3, [r7, #11]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d16e      	bne.n	8005af6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	f040 8098 	bne.w	8005b5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d913      	bls.n	8005a60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	1ad2      	subs	r2, r2, r3
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bf28      	it	cs
 8005a52:	4613      	movcs	r3, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f001 f9ae 	bl	8006dba <USBD_CtlContinueRx>
 8005a5e:	e07d      	b.n	8005b5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d014      	beq.n	8005a98 <USBD_LL_DataOutStage+0x98>
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d81d      	bhi.n	8005aae <USBD_LL_DataOutStage+0xae>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <USBD_LL_DataOutStage+0x7c>
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d003      	beq.n	8005a82 <USBD_LL_DataOutStage+0x82>
 8005a7a:	e018      	b.n	8005aae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a80:	e018      	b.n	8005ab4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fa5e 	bl	8005f4e <USBD_CoreFindIF>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75bb      	strb	r3, [r7, #22]
            break;
 8005a96:	e00d      	b.n	8005ab4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa60 	bl	8005f68 <USBD_CoreFindEP>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8005aac:	e002      	b.n	8005ab4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ab2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ab4:	7dbb      	ldrb	r3, [r7, #22]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d119      	bne.n	8005aee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d113      	bne.n	8005aee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ac6:	7dba      	ldrb	r2, [r7, #22]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	32ae      	adds	r2, #174	; 0xae
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ad6:	7dba      	ldrb	r2, [r7, #22]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ade:	7dba      	ldrb	r2, [r7, #22]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	32ae      	adds	r2, #174	; 0xae
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f001 f974 	bl	8006ddc <USBD_CtlSendStatus>
 8005af4:	e032      	b.n	8005b5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005af6:	7afb      	ldrb	r3, [r7, #11]
 8005af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fa31 	bl	8005f68 <USBD_CoreFindEP>
 8005b06:	4603      	mov	r3, r0
 8005b08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b0a:	7dbb      	ldrb	r3, [r7, #22]
 8005b0c:	2bff      	cmp	r3, #255	; 0xff
 8005b0e:	d025      	beq.n	8005b5c <USBD_LL_DataOutStage+0x15c>
 8005b10:	7dbb      	ldrb	r3, [r7, #22]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d122      	bne.n	8005b5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d117      	bne.n	8005b52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b22:	7dba      	ldrb	r2, [r7, #22]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	32ae      	adds	r2, #174	; 0xae
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00f      	beq.n	8005b52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b32:	7dba      	ldrb	r2, [r7, #22]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b3a:	7dba      	ldrb	r2, [r7, #22]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	32ae      	adds	r2, #174	; 0xae
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	7afa      	ldrb	r2, [r7, #11]
 8005b48:	4611      	mov	r1, r2
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	4798      	blx	r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	e000      	b.n	8005b5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b086      	sub	sp, #24
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b74:	7afb      	ldrb	r3, [r7, #11]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d16f      	bne.n	8005c5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d15a      	bne.n	8005c40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d914      	bls.n	8005bc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f001 f8d6 	bl	8006d5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f001 fdff 	bl	80077bc <USBD_LL_PrepareReceive>
 8005bbe:	e03f      	b.n	8005c40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d11c      	bne.n	8005c06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d316      	bcc.n	8005c06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d20f      	bcs.n	8005c06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2100      	movs	r1, #0
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f001 f8b7 	bl	8006d5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f001 fddc 	bl	80077bc <USBD_LL_PrepareReceive>
 8005c04:	e01c      	b.n	8005c40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d10f      	bne.n	8005c32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f001 fd17 	bl	8007668 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f001 f8e1 	bl	8006e02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fe42 	bl	80058d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c58:	e032      	b.n	8005cc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f97f 	bl	8005f68 <USBD_CoreFindEP>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	2bff      	cmp	r3, #255	; 0xff
 8005c72:	d025      	beq.n	8005cc0 <USBD_LL_DataInStage+0x15a>
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d122      	bne.n	8005cc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d11c      	bne.n	8005cc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c86:	7dfa      	ldrb	r2, [r7, #23]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	32ae      	adds	r2, #174	; 0xae
 8005c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d014      	beq.n	8005cc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c96:	7dfa      	ldrb	r2, [r7, #23]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	32ae      	adds	r2, #174	; 0xae
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	7afa      	ldrb	r2, [r7, #11]
 8005cac:	4611      	mov	r1, r2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4798      	blx	r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005cb6:	7dbb      	ldrb	r3, [r7, #22]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005cbc:	7dbb      	ldrb	r3, [r7, #22]
 8005cbe:	e000      	b.n	8005cc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d014      	beq.n	8005d30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00e      	beq.n	8005d30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6852      	ldr	r2, [r2, #4]
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	4611      	mov	r1, r2
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fc51 	bl	80075de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d4c:	2340      	movs	r3, #64	; 0x40
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2180      	movs	r1, #128	; 0x80
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fc43 	bl	80075de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2240      	movs	r2, #64	; 0x40
 8005d62:	621a      	str	r2, [r3, #32]

  return ret;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2204      	movs	r2, #4
 8005da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d106      	bne.n	8005ddc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d110      	bne.n	8005e20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	32ae      	adds	r2, #174	; 0xae
 8005e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e01c      	b.n	8005e86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d115      	bne.n	8005e84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	32ae      	adds	r2, #174	; 0xae
 8005e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00b      	beq.n	8005e84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	32ae      	adds	r2, #174	; 0xae
 8005e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	460b      	mov	r3, r1
 8005e98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	32ae      	adds	r2, #174	; 0xae
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e01c      	b.n	8005eea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d115      	bne.n	8005ee8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32ae      	adds	r2, #174	; 0xae
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	32ae      	adds	r2, #174	; 0xae
 8005eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6852      	ldr	r2, [r2, #4]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	4611      	mov	r1, r2
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f40:	2303      	movs	r3, #3
 8005f42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d920      	bls.n	8005fec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fb2:	e013      	b.n	8005fdc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fb4:	f107 030a 	add.w	r3, r7, #10
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6978      	ldr	r0, [r7, #20]
 8005fbc:	f000 f81b 	bl	8005ff6 <USBD_GetNextDesc>
 8005fc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d108      	bne.n	8005fdc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	789b      	ldrb	r3, [r3, #2]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d008      	beq.n	8005fea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	885b      	ldrh	r3, [r3, #2]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	897b      	ldrh	r3, [r7, #10]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d8e5      	bhi.n	8005fb4 <USBD_GetEpDesc+0x32>
 8005fe8:	e000      	b.n	8005fec <USBD_GetEpDesc+0x6a>
          break;
 8005fea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fec:	693b      	ldr	r3, [r7, #16]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	4413      	add	r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3301      	adds	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800604e:	8a3b      	ldrh	r3, [r7, #16]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	b21a      	sxth	r2, r3
 8006054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006058:	4313      	orrs	r3, r2
 800605a:	b21b      	sxth	r3, r3
 800605c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800605e:	89fb      	ldrh	r3, [r7, #14]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d005      	beq.n	8006092 <USBD_StdDevReq+0x26>
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d857      	bhi.n	800613a <USBD_StdDevReq+0xce>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00f      	beq.n	80060ae <USBD_StdDevReq+0x42>
 800608e:	2b20      	cmp	r3, #32
 8006090:	d153      	bne.n	800613a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	32ae      	adds	r2, #174	; 0xae
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
      break;
 80060ac:	e04a      	b.n	8006144 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d83b      	bhi.n	800612e <USBD_StdDevReq+0xc2>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <USBD_StdDevReq+0x50>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006111 	.word	0x08006111
 80060c0:	08006125 	.word	0x08006125
 80060c4:	0800612f 	.word	0x0800612f
 80060c8:	0800611b 	.word	0x0800611b
 80060cc:	0800612f 	.word	0x0800612f
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	0800612f 	.word	0x0800612f
 80060dc:	08006107 	.word	0x08006107
 80060e0:	080060f9 	.word	0x080060f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa3c 	bl	8006564 <USBD_GetDescriptor>
          break;
 80060ec:	e024      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbcb 	bl	800688c <USBD_SetAddress>
          break;
 80060f6:	e01f      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fc0a 	bl	8006914 <USBD_SetConfig>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
          break;
 8006104:	e018      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fcad 	bl	8006a68 <USBD_GetConfig>
          break;
 800610e:	e013      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fcde 	bl	8006ad4 <USBD_GetStatus>
          break;
 8006118:	e00e      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd0d 	bl	8006b3c <USBD_SetFeature>
          break;
 8006122:	e009      	b.n	8006138 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fd31 	bl	8006b8e <USBD_ClrFeature>
          break;
 800612c:	e004      	b.n	8006138 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fd88 	bl	8006c46 <USBD_CtlError>
          break;
 8006136:	bf00      	nop
      }
      break;
 8006138:	e004      	b.n	8006144 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fd82 	bl	8006c46 <USBD_CtlError>
      break;
 8006142:	bf00      	nop
  }

  return ret;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop

08006150 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d005      	beq.n	8006176 <USBD_StdItfReq+0x26>
 800616a:	2b40      	cmp	r3, #64	; 0x40
 800616c:	d852      	bhi.n	8006214 <USBD_StdItfReq+0xc4>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <USBD_StdItfReq+0x26>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d14e      	bne.n	8006214 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617c:	b2db      	uxtb	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	2b02      	cmp	r3, #2
 8006182:	d840      	bhi.n	8006206 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	889b      	ldrh	r3, [r3, #4]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	d836      	bhi.n	80061fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	889b      	ldrh	r3, [r3, #4]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fed9 	bl	8005f4e <USBD_CoreFindIF>
 800619c:	4603      	mov	r3, r0
 800619e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	2bff      	cmp	r3, #255	; 0xff
 80061a4:	d01d      	beq.n	80061e2 <USBD_StdItfReq+0x92>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d11a      	bne.n	80061e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061ac:	7bba      	ldrb	r2, [r7, #14]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	; 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00f      	beq.n	80061dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061bc:	7bba      	ldrb	r2, [r7, #14]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061c4:	7bba      	ldrb	r2, [r7, #14]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	32ae      	adds	r2, #174	; 0xae
 80061ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061da:	e004      	b.n	80061e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061e0:	e001      	b.n	80061e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	88db      	ldrh	r3, [r3, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <USBD_StdItfReq+0xc0>
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fdf1 	bl	8006ddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061fa:	e009      	b.n	8006210 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fd21 	bl	8006c46 <USBD_CtlError>
          break;
 8006204:	e004      	b.n	8006210 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fd1c 	bl	8006c46 <USBD_CtlError>
          break;
 800620e:	e000      	b.n	8006212 <USBD_StdItfReq+0xc2>
          break;
 8006210:	bf00      	nop
      }
      break;
 8006212:	e004      	b.n	800621e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fd15 	bl	8006c46 <USBD_CtlError>
      break;
 800621c:	bf00      	nop
  }

  return ret;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	889b      	ldrh	r3, [r3, #4]
 800623a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d007      	beq.n	8006258 <USBD_StdEPReq+0x30>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	f200 817f 	bhi.w	800654c <USBD_StdEPReq+0x324>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d02a      	beq.n	80062a8 <USBD_StdEPReq+0x80>
 8006252:	2b20      	cmp	r3, #32
 8006254:	f040 817a 	bne.w	800654c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe83 	bl	8005f68 <USBD_CoreFindEP>
 8006262:	4603      	mov	r3, r0
 8006264:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006266:	7b7b      	ldrb	r3, [r7, #13]
 8006268:	2bff      	cmp	r3, #255	; 0xff
 800626a:	f000 8174 	beq.w	8006556 <USBD_StdEPReq+0x32e>
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 8170 	bne.w	8006556 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006276:	7b7a      	ldrb	r2, [r7, #13]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800627e:	7b7a      	ldrb	r2, [r7, #13]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32ae      	adds	r2, #174	; 0xae
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8163 	beq.w	8006556 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006290:	7b7a      	ldrb	r2, [r7, #13]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32ae      	adds	r2, #174	; 0xae
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	4798      	blx	r3
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062a6:	e156      	b.n	8006556 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d008      	beq.n	80062c2 <USBD_StdEPReq+0x9a>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	f300 8145 	bgt.w	8006540 <USBD_StdEPReq+0x318>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 809b 	beq.w	80063f2 <USBD_StdEPReq+0x1ca>
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d03c      	beq.n	800633a <USBD_StdEPReq+0x112>
 80062c0:	e13e      	b.n	8006540 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d002      	beq.n	80062d4 <USBD_StdEPReq+0xac>
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d016      	beq.n	8006300 <USBD_StdEPReq+0xd8>
 80062d2:	e02c      	b.n	800632e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <USBD_StdEPReq+0xce>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d00a      	beq.n	80062f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f9bf 	bl	8007668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f9bb 	bl	8007668 <USBD_LL_StallEP>
 80062f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062f4:	e020      	b.n	8006338 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fca4 	bl	8006c46 <USBD_CtlError>
              break;
 80062fe:	e01b      	b.n	8006338 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	885b      	ldrh	r3, [r3, #2]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10e      	bne.n	8006326 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <USBD_StdEPReq+0xfe>
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d008      	beq.n	8006326 <USBD_StdEPReq+0xfe>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	4619      	mov	r1, r3
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f9a1 	bl	8007668 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fd58 	bl	8006ddc <USBD_CtlSendStatus>

              break;
 800632c:	e004      	b.n	8006338 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc88 	bl	8006c46 <USBD_CtlError>
              break;
 8006336:	bf00      	nop
          }
          break;
 8006338:	e107      	b.n	800654a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d002      	beq.n	800634c <USBD_StdEPReq+0x124>
 8006346:	2b03      	cmp	r3, #3
 8006348:	d016      	beq.n	8006378 <USBD_StdEPReq+0x150>
 800634a:	e04b      	b.n	80063e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <USBD_StdEPReq+0x146>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b80      	cmp	r3, #128	; 0x80
 8006356:	d00a      	beq.n	800636e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f983 	bl	8007668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f97f 	bl	8007668 <USBD_LL_StallEP>
 800636a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800636c:	e040      	b.n	80063f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fc68 	bl	8006c46 <USBD_CtlError>
              break;
 8006376:	e03b      	b.n	80063f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d136      	bne.n	80063ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f001 f989 	bl	80076a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fd21 	bl	8006ddc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fde2 	bl	8005f68 <USBD_CoreFindEP>
 80063a4:	4603      	mov	r3, r0
 80063a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063a8:	7b7b      	ldrb	r3, [r7, #13]
 80063aa:	2bff      	cmp	r3, #255	; 0xff
 80063ac:	d01f      	beq.n	80063ee <USBD_StdEPReq+0x1c6>
 80063ae:	7b7b      	ldrb	r3, [r7, #13]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11c      	bne.n	80063ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063b4:	7b7a      	ldrb	r2, [r7, #13]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063bc:	7b7a      	ldrb	r2, [r7, #13]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	; 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063cc:	7b7a      	ldrb	r2, [r7, #13]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	32ae      	adds	r2, #174	; 0xae
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063e2:	e004      	b.n	80063ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fc2d 	bl	8006c46 <USBD_CtlError>
              break;
 80063ec:	e000      	b.n	80063f0 <USBD_StdEPReq+0x1c8>
              break;
 80063ee:	bf00      	nop
          }
          break;
 80063f0:	e0ab      	b.n	800654a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d002      	beq.n	8006404 <USBD_StdEPReq+0x1dc>
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d032      	beq.n	8006468 <USBD_StdEPReq+0x240>
 8006402:	e097      	b.n	8006534 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <USBD_StdEPReq+0x1f2>
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b80      	cmp	r3, #128	; 0x80
 800640e:	d004      	beq.n	800641a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fc17 	bl	8006c46 <USBD_CtlError>
                break;
 8006418:	e091      	b.n	800653e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800641a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800641e:	2b00      	cmp	r3, #0
 8006420:	da0b      	bge.n	800643a <USBD_StdEPReq+0x212>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3310      	adds	r3, #16
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	3304      	adds	r3, #4
 8006438:	e00b      	b.n	8006452 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800643a:	7bbb      	ldrb	r3, [r7, #14]
 800643c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	3304      	adds	r3, #4
 8006452:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2202      	movs	r2, #2
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fc61 	bl	8006d28 <USBD_CtlSendData>
              break;
 8006466:	e06a      	b.n	800653e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006468:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da11      	bge.n	8006494 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	3324      	adds	r3, #36	; 0x24
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d117      	bne.n	80064ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fbda 	bl	8006c46 <USBD_CtlError>
                  break;
 8006492:	e054      	b.n	800653e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fbc7 	bl	8006c46 <USBD_CtlError>
                  break;
 80064b8:	e041      	b.n	800653e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da0b      	bge.n	80064da <USBD_StdEPReq+0x2b2>
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c8:	4613      	mov	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	3310      	adds	r3, #16
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4413      	add	r3, r2
 80064d6:	3304      	adds	r3, #4
 80064d8:	e00b      	b.n	80064f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064da:	7bbb      	ldrb	r3, [r7, #14]
 80064dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	3304      	adds	r3, #4
 80064f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <USBD_StdEPReq+0x2d8>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d103      	bne.n	8006508 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e00e      	b.n	8006526 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f8e9 	bl	80076e4 <USBD_LL_IsStallEP>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	e002      	b.n	8006526 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2202      	movs	r2, #2
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fbfb 	bl	8006d28 <USBD_CtlSendData>
              break;
 8006532:	e004      	b.n	800653e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb85 	bl	8006c46 <USBD_CtlError>
              break;
 800653c:	bf00      	nop
          }
          break;
 800653e:	e004      	b.n	800654a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb7f 	bl	8006c46 <USBD_CtlError>
          break;
 8006548:	bf00      	nop
      }
      break;
 800654a:	e005      	b.n	8006558 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fb79 	bl	8006c46 <USBD_CtlError>
      break;
 8006554:	e000      	b.n	8006558 <USBD_StdEPReq+0x330>
      break;
 8006556:	bf00      	nop
  }

  return ret;
 8006558:	7bfb      	ldrb	r3, [r7, #15]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	885b      	ldrh	r3, [r3, #2]
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	2b0e      	cmp	r3, #14
 8006586:	f200 8152 	bhi.w	800682e <USBD_GetDescriptor+0x2ca>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <USBD_GetDescriptor+0x2c>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	08006601 	.word	0x08006601
 8006594:	08006619 	.word	0x08006619
 8006598:	08006659 	.word	0x08006659
 800659c:	0800682f 	.word	0x0800682f
 80065a0:	0800682f 	.word	0x0800682f
 80065a4:	080067cf 	.word	0x080067cf
 80065a8:	080067fb 	.word	0x080067fb
 80065ac:	0800682f 	.word	0x0800682f
 80065b0:	0800682f 	.word	0x0800682f
 80065b4:	0800682f 	.word	0x0800682f
 80065b8:	0800682f 	.word	0x0800682f
 80065bc:	0800682f 	.word	0x0800682f
 80065c0:	0800682f 	.word	0x0800682f
 80065c4:	0800682f 	.word	0x0800682f
 80065c8:	080065cd 	.word	0x080065cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065ee:	e126      	b.n	800683e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fb27 	bl	8006c46 <USBD_CtlError>
        err++;
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	3301      	adds	r3, #1
 80065fc:	72fb      	strb	r3, [r7, #11]
      break;
 80065fe:	e11e      	b.n	800683e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	7c12      	ldrb	r2, [r2, #16]
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
      break;
 8006616:	e112      	b.n	800683e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c1b      	ldrb	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10d      	bne.n	800663c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f107 0208 	add.w	r2, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	2202      	movs	r2, #2
 8006638:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800663a:	e100      	b.n	800683e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	f107 0208 	add.w	r2, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	2202      	movs	r2, #2
 8006654:	701a      	strb	r2, [r3, #0]
      break;
 8006656:	e0f2      	b.n	800683e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	885b      	ldrh	r3, [r3, #2]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b05      	cmp	r3, #5
 8006660:	f200 80ac 	bhi.w	80067bc <USBD_GetDescriptor+0x258>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_GetDescriptor+0x108>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006685 	.word	0x08006685
 8006670:	080066b9 	.word	0x080066b9
 8006674:	080066ed 	.word	0x080066ed
 8006678:	08006721 	.word	0x08006721
 800667c:	08006755 	.word	0x08006755
 8006680:	08006789 	.word	0x08006789
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	7c12      	ldrb	r2, [r2, #16]
 800669c:	f107 0108 	add.w	r1, r7, #8
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a6:	e091      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 facb 	bl	8006c46 <USBD_CtlError>
            err++;
 80066b0:	7afb      	ldrb	r3, [r7, #11]
 80066b2:	3301      	adds	r3, #1
 80066b4:	72fb      	strb	r3, [r7, #11]
          break;
 80066b6:	e089      	b.n	80067cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066da:	e077      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fab1 	bl	8006c46 <USBD_CtlError>
            err++;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	3301      	adds	r3, #1
 80066e8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ea:	e06f      	b.n	80067cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670e:	e05d      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa97 	bl	8006c46 <USBD_CtlError>
            err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
          break;
 800671e:	e055      	b.n	80067cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006742:	e043      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa7d 	bl	8006c46 <USBD_CtlError>
            err++;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	3301      	adds	r3, #1
 8006750:	72fb      	strb	r3, [r7, #11]
          break;
 8006752:	e03b      	b.n	80067cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006776:	e029      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa63 	bl	8006c46 <USBD_CtlError>
            err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
          break;
 8006786:	e021      	b.n	80067cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	7c12      	ldrb	r2, [r2, #16]
 80067a0:	f107 0108 	add.w	r1, r7, #8
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
 80067a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067aa:	e00f      	b.n	80067cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa49 	bl	8006c46 <USBD_CtlError>
            err++;
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	3301      	adds	r3, #1
 80067b8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ba:	e007      	b.n	80067cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa41 	bl	8006c46 <USBD_CtlError>
          err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067ca:	bf00      	nop
      }
      break;
 80067cc:	e037      	b.n	800683e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7c1b      	ldrb	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	f107 0208 	add.w	r2, r7, #8
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e8:	e029      	b.n	800683e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa2a 	bl	8006c46 <USBD_CtlError>
        err++;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	3301      	adds	r3, #1
 80067f6:	72fb      	strb	r3, [r7, #11]
      break;
 80067f8:	e021      	b.n	800683e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	7c1b      	ldrb	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10d      	bne.n	800681e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	f107 0208 	add.w	r2, r7, #8
 800680e:	4610      	mov	r0, r2
 8006810:	4798      	blx	r3
 8006812:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3301      	adds	r3, #1
 8006818:	2207      	movs	r2, #7
 800681a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800681c:	e00f      	b.n	800683e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa10 	bl	8006c46 <USBD_CtlError>
        err++;
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	3301      	adds	r3, #1
 800682a:	72fb      	strb	r3, [r7, #11]
      break;
 800682c:	e007      	b.n	800683e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa08 	bl	8006c46 <USBD_CtlError>
      err++;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	3301      	adds	r3, #1
 800683a:	72fb      	strb	r3, [r7, #11]
      break;
 800683c:	bf00      	nop
  }

  if (err != 0U)
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11e      	bne.n	8006882 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	88db      	ldrh	r3, [r3, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d016      	beq.n	800687a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800684c:	893b      	ldrh	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88da      	ldrh	r2, [r3, #6]
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	4293      	cmp	r3, r2
 800685a:	bf28      	it	cs
 800685c:	4613      	movcs	r3, r2
 800685e:	b29b      	uxth	r3, r3
 8006860:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006862:	893b      	ldrh	r3, [r7, #8]
 8006864:	461a      	mov	r2, r3
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa5d 	bl	8006d28 <USBD_CtlSendData>
 800686e:	e009      	b.n	8006884 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9e7 	bl	8006c46 <USBD_CtlError>
 8006878:	e004      	b.n	8006884 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 faae 	bl	8006ddc <USBD_CtlSendStatus>
 8006880:	e000      	b.n	8006884 <USBD_GetDescriptor+0x320>
    return;
 8006882:	bf00      	nop
  }
}
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	889b      	ldrh	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d131      	bne.n	8006902 <USBD_SetAddress+0x76>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d12d      	bne.n	8006902 <USBD_SetAddress+0x76>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	2b7f      	cmp	r3, #127	; 0x7f
 80068ac:	d829      	bhi.n	8006902 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d104      	bne.n	80068d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9bc 	bl	8006c46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	e01d      	b.n	800690c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7bfa      	ldrb	r2, [r7, #15]
 80068d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 ff2d 	bl	800773c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa7a 	bl	8006ddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	e009      	b.n	800690c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006900:	e004      	b.n	800690c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f99e 	bl	8006c46 <USBD_CtlError>
  }
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	4b4e      	ldr	r3, [pc, #312]	; (8006a64 <USBD_SetConfig+0x150>)
 800692a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800692c:	4b4d      	ldr	r3, [pc, #308]	; (8006a64 <USBD_SetConfig+0x150>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d905      	bls.n	8006940 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f985 	bl	8006c46 <USBD_CtlError>
    return USBD_FAIL;
 800693c:	2303      	movs	r3, #3
 800693e:	e08c      	b.n	8006a5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d002      	beq.n	8006952 <USBD_SetConfig+0x3e>
 800694c:	2b03      	cmp	r3, #3
 800694e:	d029      	beq.n	80069a4 <USBD_SetConfig+0x90>
 8006950:	e075      	b.n	8006a3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006952:	4b44      	ldr	r3, [pc, #272]	; (8006a64 <USBD_SetConfig+0x150>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d020      	beq.n	800699c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800695a:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <USBD_SetConfig+0x150>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <USBD_SetConfig+0x150>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fe ffbd 	bl	80058ea <USBD_SetClassConfig>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f962 	bl	8006c46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800698a:	e065      	b.n	8006a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa25 	bl	8006ddc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800699a:	e05d      	b.n	8006a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa1d 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 80069a2:	e059      	b.n	8006a58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069a4:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <USBD_SetConfig+0x150>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d112      	bne.n	80069d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069b4:	4b2b      	ldr	r3, [pc, #172]	; (8006a64 <USBD_SetConfig+0x150>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <USBD_SetConfig+0x150>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fe ffac 	bl	8005922 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa06 	bl	8006ddc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069d0:	e042      	b.n	8006a58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <USBD_SetConfig+0x150>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d02a      	beq.n	8006a36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fe ff9a 	bl	8005922 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069ee:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <USBD_SetConfig+0x150>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069f8:	4b1a      	ldr	r3, [pc, #104]	; (8006a64 <USBD_SetConfig+0x150>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fe ff73 	bl	80058ea <USBD_SetClassConfig>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00f      	beq.n	8006a2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f918 	bl	8006c46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fe ff7f 	bl	8005922 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a2c:	e014      	b.n	8006a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9d4 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 8006a34:	e010      	b.n	8006a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9d0 	bl	8006ddc <USBD_CtlSendStatus>
      break;
 8006a3c:	e00c      	b.n	8006a58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f900 	bl	8006c46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a46:	4b07      	ldr	r3, [pc, #28]	; (8006a64 <USBD_SetConfig+0x150>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fe ff68 	bl	8005922 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a52:	2303      	movs	r3, #3
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	bf00      	nop
  }

  return ret;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000134 	.word	0x20000134

08006a68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d004      	beq.n	8006a84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8e2 	bl	8006c46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a82:	e023      	b.n	8006acc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	dc02      	bgt.n	8006a96 <USBD_GetConfig+0x2e>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dc03      	bgt.n	8006a9c <USBD_GetConfig+0x34>
 8006a94:	e015      	b.n	8006ac2 <USBD_GetConfig+0x5a>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d00b      	beq.n	8006ab2 <USBD_GetConfig+0x4a>
 8006a9a:	e012      	b.n	8006ac2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f93c 	bl	8006d28 <USBD_CtlSendData>
        break;
 8006ab0:	e00c      	b.n	8006acc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f934 	bl	8006d28 <USBD_CtlSendData>
        break;
 8006ac0:	e004      	b.n	8006acc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8be 	bl	8006c46 <USBD_CtlError>
        break;
 8006aca:	bf00      	nop
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d81e      	bhi.n	8006b2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d004      	beq.n	8006afe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8a5 	bl	8006c46 <USBD_CtlError>
        break;
 8006afc:	e01a      	b.n	8006b34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f043 0202 	orr.w	r2, r3, #2
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	2202      	movs	r2, #2
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f900 	bl	8006d28 <USBD_CtlSendData>
      break;
 8006b28:	e004      	b.n	8006b34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f88a 	bl	8006c46 <USBD_CtlError>
      break;
 8006b32:	bf00      	nop
  }
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d107      	bne.n	8006b5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f940 	bl	8006ddc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b5c:	e013      	b.n	8006b86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d10b      	bne.n	8006b7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f930 	bl	8006ddc <USBD_CtlSendStatus>
}
 8006b7c:	e003      	b.n	8006b86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f860 	bl	8006c46 <USBD_CtlError>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d80b      	bhi.n	8006bbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d10c      	bne.n	8006bc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f910 	bl	8006ddc <USBD_CtlSendStatus>
      }
      break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f840 	bl	8006c46 <USBD_CtlError>
      break;
 8006bc6:	e000      	b.n	8006bca <USBD_ClrFeature+0x3c>
      break;
 8006bc8:	bf00      	nop
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fa17 	bl	8006030 <SWAPBYTE>
 8006c02:	4603      	mov	r3, r0
 8006c04:	461a      	mov	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fa0a 	bl	8006030 <SWAPBYTE>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff f9fd 	bl	8006030 <SWAPBYTE>
 8006c36:	4603      	mov	r3, r0
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	80da      	strh	r2, [r3, #6]
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c50:	2180      	movs	r1, #128	; 0x80
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fd08 	bl	8007668 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fd04 	bl	8007668 <USBD_LL_StallEP>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d036      	beq.n	8006cec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c82:	6938      	ldr	r0, [r7, #16]
 8006c84:	f000 f836 	bl	8006cf4 <USBD_GetLen>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	2203      	movs	r2, #3
 8006cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cb8:	e013      	b.n	8006ce2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	613b      	str	r3, [r7, #16]
    idx++;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e7      	bne.n	8006cba <USBD_GetString+0x52>
 8006cea:	e000      	b.n	8006cee <USBD_GetString+0x86>
    return;
 8006cec:	bf00      	nop
  }
}
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d04:	e005      	b.n	8006d12 <USBD_GetLen+0x1e>
  {
    len++;
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f5      	bne.n	8006d06 <USBD_GetLen+0x12>
  }

  return len;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fd13 	bl	800777a <USBD_LL_Transmit>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	2100      	movs	r1, #0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 fd02 	bl	800777a <USBD_LL_Transmit>

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2203      	movs	r2, #3
 8006d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fd06 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	2100      	movs	r1, #0
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 fcf5 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2204      	movs	r2, #4
 8006de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dec:	2300      	movs	r3, #0
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fcc1 	bl	800777a <USBD_LL_Transmit>

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b082      	sub	sp, #8
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e12:	2300      	movs	r3, #0
 8006e14:	2200      	movs	r2, #0
 8006e16:	2100      	movs	r1, #0
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fccf 	bl	80077bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	4912      	ldr	r1, [pc, #72]	; (8006e78 <MX_USB_DEVICE_Init+0x50>)
 8006e30:	4812      	ldr	r0, [pc, #72]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e32:	f7fe fcdd 	bl	80057f0 <USBD_Init>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e3c:	f7f9 fc80 	bl	8000740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e40:	490f      	ldr	r1, [pc, #60]	; (8006e80 <MX_USB_DEVICE_Init+0x58>)
 8006e42:	480e      	ldr	r0, [pc, #56]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e44:	f7fe fd04 	bl	8005850 <USBD_RegisterClass>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e4e:	f7f9 fc77 	bl	8000740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e52:	490c      	ldr	r1, [pc, #48]	; (8006e84 <MX_USB_DEVICE_Init+0x5c>)
 8006e54:	4809      	ldr	r0, [pc, #36]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e56:	f7fe fbf5 	bl	8005644 <USBD_CDC_RegisterInterface>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e60:	f7f9 fc6e 	bl	8000740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_USB_DEVICE_Init+0x54>)
 8006e66:	f7fe fd29 	bl	80058bc <USBD_Start>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e70:	f7f9 fc66 	bl	8000740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e74:	bf00      	nop
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200000b0 	.word	0x200000b0
 8006e7c:	20000138 	.word	0x20000138
 8006e80:	2000001c 	.word	0x2000001c
 8006e84:	2000009c 	.word	0x2000009c

08006e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4905      	ldr	r1, [pc, #20]	; (8006ea4 <CDC_Init_FS+0x1c>)
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e92:	f7fe fbf1 	bl	8005678 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e96:	4905      	ldr	r1, [pc, #20]	; (8006eac <CDC_Init_FS+0x24>)
 8006e98:	4803      	ldr	r0, [pc, #12]	; (8006ea8 <CDC_Init_FS+0x20>)
 8006e9a:	f7fe fc0f 	bl	80056bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000c14 	.word	0x20000c14
 8006ea8:	20000138 	.word	0x20000138
 8006eac:	20000414 	.word	0x20000414

08006eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	6039      	str	r1, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b23      	cmp	r3, #35	; 0x23
 8006ed4:	d84a      	bhi.n	8006f6c <CDC_Control_FS+0xac>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <CDC_Control_FS+0x1c>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f6d 	.word	0x08006f6d
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f6d 	.word	0x08006f6d
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f6d 	.word	0x08006f6d
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f6d 	.word	0x08006f6d
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006f6d 	.word	0x08006f6d
 8006f0c:	08006f6d 	.word	0x08006f6d
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f6d 	.word	0x08006f6d
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f6d 	.word	0x08006f6d
 8006f20:	08006f6d 	.word	0x08006f6d
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f6d 	.word	0x08006f6d
 8006f30:	08006f6d 	.word	0x08006f6d
 8006f34:	08006f6d 	.word	0x08006f6d
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f6d 	.word	0x08006f6d
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f6d 	.word	0x08006f6d
 8006f54:	08006f6d 	.word	0x08006f6d
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f6d 	.word	0x08006f6d
 8006f60:	08006f6d 	.word	0x08006f6d
 8006f64:	08006f6d 	.word	0x08006f6d
 8006f68:	08006f6d 	.word	0x08006f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f6c:	bf00      	nop
  }

  return (USBD_OK);
 8006f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t Len)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <CDC_Receive_FS+0x24>)
 8006f8a:	f7fe fb97 	bl	80056bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f8e:	4804      	ldr	r0, [pc, #16]	; (8006fa0 <CDC_Receive_FS+0x24>)
 8006f90:	f7fe fbf8 	bl	8005784 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000138 	.word	0x20000138

08006fa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <CDC_Transmit_FS+0x48>)
 8006fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e00b      	b.n	8006fe2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006fca:	887b      	ldrh	r3, [r7, #2]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4806      	ldr	r0, [pc, #24]	; (8006fec <CDC_Transmit_FS+0x48>)
 8006fd2:	f7fe fb51 	bl	8005678 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006fd6:	4805      	ldr	r0, [pc, #20]	; (8006fec <CDC_Transmit_FS+0x48>)
 8006fd8:	f7fe fb8e 	bl	80056f8 <USBD_CDC_TransmitPacket>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000138 	.word	0x20000138

08006ff0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007006:	4618      	mov	r0, r3
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2212      	movs	r2, #18
 8007024:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	200000d0 	.word	0x200000d0

08007038 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2204      	movs	r2, #4
 8007048:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	200000f0 	.word	0x200000f0

0800705c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d105      	bne.n	800707a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	4907      	ldr	r1, [pc, #28]	; (8007090 <USBD_FS_ProductStrDescriptor+0x34>)
 8007072:	4808      	ldr	r0, [pc, #32]	; (8007094 <USBD_FS_ProductStrDescriptor+0x38>)
 8007074:	f7ff fdf8 	bl	8006c68 <USBD_GetString>
 8007078:	e004      	b.n	8007084 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	4904      	ldr	r1, [pc, #16]	; (8007090 <USBD_FS_ProductStrDescriptor+0x34>)
 800707e:	4805      	ldr	r0, [pc, #20]	; (8007094 <USBD_FS_ProductStrDescriptor+0x38>)
 8007080:	f7ff fdf2 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20001414 	.word	0x20001414
 8007094:	080079b8 	.word	0x080079b8

08007098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4904      	ldr	r1, [pc, #16]	; (80070b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070a8:	4804      	ldr	r0, [pc, #16]	; (80070bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070aa:	f7ff fddd 	bl	8006c68 <USBD_GetString>
  return USBD_StrDesc;
 80070ae:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20001414 	.word	0x20001414
 80070bc:	080079d0 	.word	0x080079d0

080070c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	221a      	movs	r2, #26
 80070d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070d2:	f000 f855 	bl	8007180 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200000f4 	.word	0x200000f4

080070e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070fa:	4808      	ldr	r0, [pc, #32]	; (800711c <USBD_FS_ConfigStrDescriptor+0x38>)
 80070fc:	f7ff fdb4 	bl	8006c68 <USBD_GetString>
 8007100:	e004      	b.n	800710c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	4904      	ldr	r1, [pc, #16]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007108:	f7ff fdae 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20001414 	.word	0x20001414
 800711c:	080079e4 	.word	0x080079e4

08007120 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d105      	bne.n	800713e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	4907      	ldr	r1, [pc, #28]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007136:	4808      	ldr	r0, [pc, #32]	; (8007158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007138:	f7ff fd96 	bl	8006c68 <USBD_GetString>
 800713c:	e004      	b.n	8007148 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4904      	ldr	r1, [pc, #16]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007142:	4805      	ldr	r0, [pc, #20]	; (8007158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007144:	f7ff fd90 	bl	8006c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007148:	4b02      	ldr	r3, [pc, #8]	; (8007154 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20001414 	.word	0x20001414
 8007158:	080079f0 	.word	0x080079f0

0800715c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	220c      	movs	r2, #12
 800716c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800716e:	4b03      	ldr	r3, [pc, #12]	; (800717c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	200000e4 	.word	0x200000e4

08007180 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007186:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <Get_SerialNum+0x44>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <Get_SerialNum+0x48>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007192:	4b0e      	ldr	r3, [pc, #56]	; (80071cc <Get_SerialNum+0x4c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071a6:	2208      	movs	r2, #8
 80071a8:	4909      	ldr	r1, [pc, #36]	; (80071d0 <Get_SerialNum+0x50>)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f814 	bl	80071d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071b0:	2204      	movs	r2, #4
 80071b2:	4908      	ldr	r1, [pc, #32]	; (80071d4 <Get_SerialNum+0x54>)
 80071b4:	68b8      	ldr	r0, [r7, #8]
 80071b6:	f000 f80f 	bl	80071d8 <IntToUnicode>
  }
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	1fff7a10 	.word	0x1fff7a10
 80071c8:	1fff7a14 	.word	0x1fff7a14
 80071cc:	1fff7a18 	.word	0x1fff7a18
 80071d0:	200000f6 	.word	0x200000f6
 80071d4:	20000106 	.word	0x20000106

080071d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
 80071ee:	e027      	b.n	8007240 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	0f1b      	lsrs	r3, r3, #28
 80071f4:	2b09      	cmp	r3, #9
 80071f6:	d80b      	bhi.n	8007210 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	0f1b      	lsrs	r3, r3, #28
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4619      	mov	r1, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	440b      	add	r3, r1
 8007208:	3230      	adds	r2, #48	; 0x30
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e00a      	b.n	8007226 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	0f1b      	lsrs	r3, r3, #28
 8007214:	b2da      	uxtb	r2, r3
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	4619      	mov	r1, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	440b      	add	r3, r1
 8007220:	3237      	adds	r2, #55	; 0x37
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	3301      	adds	r3, #1
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	3301      	adds	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]
 8007240:	7dfa      	ldrb	r2, [r7, #23]
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	429a      	cmp	r2, r3
 8007246:	d3d3      	bcc.n	80071f0 <IntToUnicode+0x18>
  }
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0a0      	sub	sp, #128	; 0x80
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007260:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	609a      	str	r2, [r3, #8]
 800726c:	60da      	str	r2, [r3, #12]
 800726e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007270:	f107 0310 	add.w	r3, r7, #16
 8007274:	225c      	movs	r2, #92	; 0x5c
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fb89 	bl	8007990 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007286:	d149      	bne.n	800731c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800728c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800728e:	2300      	movs	r3, #0
 8007290:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007292:	f107 0310 	add.w	r3, r7, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f7fb fa1a 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80072a2:	f7f9 fa4d 	bl	8000740 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	6313      	str	r3, [r2, #48]	; 0x30
 80072b6:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c8:	2302      	movs	r3, #2
 80072ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d0:	2303      	movs	r3, #3
 80072d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072d4:	230a      	movs	r3, #10
 80072d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80072dc:	4619      	mov	r1, r3
 80072de:	4812      	ldr	r0, [pc, #72]	; (8007328 <HAL_PCD_MspInit+0xd0>)
 80072e0:	f7f9 fc74 	bl	8000bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	4a0e      	ldr	r2, [pc, #56]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	6353      	str	r3, [r2, #52]	; 0x34
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 80072fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072fe:	6453      	str	r3, [r2, #68]	; 0x44
 8007300:	4b08      	ldr	r3, [pc, #32]	; (8007324 <HAL_PCD_MspInit+0xcc>)
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	2043      	movs	r0, #67	; 0x43
 8007312:	f7f9 fc24 	bl	8000b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007316:	2043      	movs	r0, #67	; 0x43
 8007318:	f7f9 fc3d 	bl	8000b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800731c:	bf00      	nop
 800731e:	3780      	adds	r7, #128	; 0x80
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40023800 	.word	0x40023800
 8007328:	40020000 	.word	0x40020000

0800732c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fb07 	bl	8005956 <USBD_LL_SetupStage>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007362:	78fa      	ldrb	r2, [r7, #3]
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	4619      	mov	r1, r3
 800737a:	f7fe fb41 	bl	8005a00 <USBD_LL_DataOutStage>
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007398:	78fa      	ldrb	r2, [r7, #3]
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	334c      	adds	r3, #76	; 0x4c
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	4619      	mov	r1, r3
 80073ae:	f7fe fbda 	bl	8005b66 <USBD_LL_DataInStage>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fd0e 	bl	8005dea <USBD_LL_SOF>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d102      	bne.n	80073f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80073ea:	2300      	movs	r3, #0
 80073ec:	73fb      	strb	r3, [r7, #15]
 80073ee:	e008      	b.n	8007402 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d102      	bne.n	80073fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073f8:	2301      	movs	r3, #1
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e001      	b.n	8007402 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073fe:	f7f9 f99f 	bl	8000740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007408:	7bfa      	ldrb	r2, [r7, #15]
 800740a:	4611      	mov	r1, r2
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe fcae 	bl	8005d6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fc56 	bl	8005cca <USBD_LL_Reset>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fca9 	bl	8005d8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800744e:	f043 0301 	orr.w	r3, r3, #1
 8007452:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_PCD_SuspendCallback+0x48>)
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	4a03      	ldr	r2, [pc, #12]	; (8007470 <HAL_PCD_SuspendCallback+0x48>)
 8007462:	f043 0306 	orr.w	r3, r3, #6
 8007466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	e000ed00 	.word	0xe000ed00

08007474 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fc99 	bl	8005dba <USBD_LL_Resume>
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074a2:	78fa      	ldrb	r2, [r7, #3]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fcf1 	bl	8005e8e <USBD_LL_IsoOUTIncomplete>
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fcad 	bl	8005e2a <USBD_LL_IsoINIncomplete>
}
 80074d0:	bf00      	nop
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fd03 	bl	8005ef2 <USBD_LL_DevConnected>
}
 80074ec:	bf00      	nop
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fd00 	bl	8005f08 <USBD_LL_DevDisconnected>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d13c      	bne.n	800759a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <USBD_LL_Init+0x94>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <USBD_LL_Init+0x94>)
 800752c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007530:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <USBD_LL_Init+0x94>)
 8007532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007536:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <USBD_LL_Init+0x94>)
 800753a:	2206      	movs	r2, #6
 800753c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800753e:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <USBD_LL_Init+0x94>)
 8007540:	2202      	movs	r2, #2
 8007542:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007544:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <USBD_LL_Init+0x94>)
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800754a:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <USBD_LL_Init+0x94>)
 800754c:	2202      	movs	r2, #2
 800754e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007550:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <USBD_LL_Init+0x94>)
 8007552:	2200      	movs	r2, #0
 8007554:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <USBD_LL_Init+0x94>)
 8007558:	2200      	movs	r2, #0
 800755a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800755c:	4b11      	ldr	r3, [pc, #68]	; (80075a4 <USBD_LL_Init+0x94>)
 800755e:	2200      	movs	r2, #0
 8007560:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007562:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <USBD_LL_Init+0x94>)
 8007564:	2200      	movs	r2, #0
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <USBD_LL_Init+0x94>)
 800756a:	2200      	movs	r2, #0
 800756c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800756e:	480d      	ldr	r0, [pc, #52]	; (80075a4 <USBD_LL_Init+0x94>)
 8007570:	f7f9 fcf3 	bl	8000f5a <HAL_PCD_Init>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800757a:	f7f9 f8e1 	bl	8000740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800757e:	2180      	movs	r1, #128	; 0x80
 8007580:	4808      	ldr	r0, [pc, #32]	; (80075a4 <USBD_LL_Init+0x94>)
 8007582:	f7fa ff7e 	bl	8002482 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007586:	2240      	movs	r2, #64	; 0x40
 8007588:	2100      	movs	r1, #0
 800758a:	4806      	ldr	r0, [pc, #24]	; (80075a4 <USBD_LL_Init+0x94>)
 800758c:	f7fa ff32 	bl	80023f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007590:	2280      	movs	r2, #128	; 0x80
 8007592:	2101      	movs	r1, #1
 8007594:	4803      	ldr	r0, [pc, #12]	; (80075a4 <USBD_LL_Init+0x94>)
 8007596:	f7fa ff2d 	bl	80023f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20001614 	.word	0x20001614

080075a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075be:	4618      	mov	r0, r3
 80075c0:	f7f9 fdef 	bl	80011a2 <HAL_PCD_Start>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f990 	bl	80078f0 <USBD_Get_USB_Status>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	4608      	mov	r0, r1
 80075e8:	4611      	mov	r1, r2
 80075ea:	461a      	mov	r2, r3
 80075ec:	4603      	mov	r3, r0
 80075ee:	70fb      	strb	r3, [r7, #3]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70bb      	strb	r3, [r7, #2]
 80075f4:	4613      	mov	r3, r2
 80075f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007606:	78bb      	ldrb	r3, [r7, #2]
 8007608:	883a      	ldrh	r2, [r7, #0]
 800760a:	78f9      	ldrb	r1, [r7, #3]
 800760c:	f7fa faed 	bl	8001bea <HAL_PCD_EP_Open>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f96a 	bl	80078f0 <USBD_Get_USB_Status>
 800761c:	4603      	mov	r3, r0
 800761e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007620:	7bbb      	ldrb	r3, [r7, #14]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fa fb36 	bl	8001cba <HAL_PCD_EP_Close>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 f94b 	bl	80078f0 <USBD_Get_USB_Status>
 800765a:	4603      	mov	r3, r0
 800765c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800765e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f7fa fc0e 	bl	8001ea8 <HAL_PCD_EP_SetStall>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f92c 	bl	80078f0 <USBD_Get_USB_Status>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800769c:	7bbb      	ldrb	r3, [r7, #14]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	4611      	mov	r1, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fa fc53 	bl	8001f70 <HAL_PCD_EP_ClrStall>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 f90d 	bl	80078f0 <USBD_Get_USB_Status>
 80076d6:	4603      	mov	r3, r0
 80076d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076da:	7bbb      	ldrb	r3, [r7, #14]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	da0b      	bge.n	8007718 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	333e      	adds	r3, #62	; 0x3e
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	e00b      	b.n	8007730 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	4613      	mov	r3, r2
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800772e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007730:	4618      	mov	r0, r3
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	4611      	mov	r1, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7fa fa20 	bl	8001ba0 <HAL_PCD_SetAddress>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f8c2 	bl	80078f0 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b086      	sub	sp, #24
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
 8007786:	460b      	mov	r3, r1
 8007788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007798:	7af9      	ldrb	r1, [r7, #11]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	f7fa fb39 	bl	8001e14 <HAL_PCD_EP_Transmit>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f8a1 	bl	80078f0 <USBD_Get_USB_Status>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	460b      	mov	r3, r1
 80077ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077da:	7af9      	ldrb	r1, [r7, #11]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	f7fa fab5 	bl	8001d4e <HAL_PCD_EP_Receive>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f880 	bl	80078f0 <USBD_Get_USB_Status>
 80077f0:	4603      	mov	r3, r0
 80077f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	4611      	mov	r1, r2
 8007814:	4618      	mov	r0, r3
 8007816:	f7fa fae5 	bl	8001de4 <HAL_PCD_EP_GetRxCount>
 800781a:	4603      	mov	r3, r0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_PCDEx_LPM_Callback+0x18>
 8007836:	2b01      	cmp	r3, #1
 8007838:	d01f      	beq.n	800787a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800783a:	e03b      	b.n	80078b4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007844:	f7f8 ff10 	bl	8000668 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007848:	4b1c      	ldr	r3, [pc, #112]	; (80078bc <HAL_PCDEx_LPM_Callback+0x98>)
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <HAL_PCDEx_LPM_Callback+0x98>)
 800784e:	f023 0306 	bic.w	r3, r3, #6
 8007852:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6812      	ldr	r2, [r2, #0]
 8007862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe faa1 	bl	8005dba <USBD_LL_Resume>
    break;
 8007878:	e01c      	b.n	80078b4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fa78 	bl	8005d8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078a6:	4b05      	ldr	r3, [pc, #20]	; (80078bc <HAL_PCDEx_LPM_Callback+0x98>)
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	4a04      	ldr	r2, [pc, #16]	; (80078bc <HAL_PCDEx_LPM_Callback+0x98>)
 80078ac:	f043 0306 	orr.w	r3, r3, #6
 80078b0:	6113      	str	r3, [r2, #16]
    break;
 80078b2:	bf00      	nop
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	e000ed00 	.word	0xe000ed00

080078c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078c8:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_static_malloc+0x18>)
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	20001b20 	.word	0x20001b20

080078dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]

}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d817      	bhi.n	8007934 <USBD_Get_USB_Status+0x44>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USBD_Get_USB_Status+0x1c>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007923 	.word	0x08007923
 8007914:	08007929 	.word	0x08007929
 8007918:	0800792f 	.word	0x0800792f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
    break;
 8007920:	e00b      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
    break;
 8007926:	e008      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	e005      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	73fb      	strb	r3, [r7, #15]
    break;
 8007932:	e002      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	bf00      	nop
  }
  return usb_status;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4d0d      	ldr	r5, [pc, #52]	; (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	; (8007984 <__libc_init_array+0x3c>)
 800794e:	1b64      	subs	r4, r4, r5
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2600      	movs	r6, #0
 8007954:	42a6      	cmp	r6, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4d0b      	ldr	r5, [pc, #44]	; (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	; (800798c <__libc_init_array+0x44>)
 800795c:	f000 f820 	bl	80079a0 <_init>
 8007960:	1b64      	subs	r4, r4, r5
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2600      	movs	r6, #0
 8007966:	42a6      	cmp	r6, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007970:	4798      	blx	r3
 8007972:	3601      	adds	r6, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f855 3b04 	ldr.w	r3, [r5], #4
 800797a:	4798      	blx	r3
 800797c:	3601      	adds	r6, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	08007a18 	.word	0x08007a18
 8007984:	08007a18 	.word	0x08007a18
 8007988:	08007a18 	.word	0x08007a18
 800798c:	08007a1c 	.word	0x08007a1c

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <_init>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	bf00      	nop
 80079a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a6:	bc08      	pop	{r3}
 80079a8:	469e      	mov	lr, r3
 80079aa:	4770      	bx	lr

080079ac <_fini>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr
