
stand_DT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008160  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800837c  0800837c  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008384  08008384  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008388  08008388  00018388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  0800838c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000118  080084a4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  080084a4  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f478  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdf  00000000  00000000  0002f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fc2  00000000  00000000  00033828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108fc  00000000  00000000  000577ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca024  00000000  00000000  000680e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013210a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f14  00000000  00000000  0013215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000118 	.word	0x20000118
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800830c 	.word	0x0800830c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000011c 	.word	0x2000011c
 8000200:	0800830c 	.word	0x0800830c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a3b      	ldr	r2, [pc, #236]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a34      	ldr	r2, [pc, #208]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <MX_GPIO_Init+0x10c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_GPIO_Init+0x10c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a2d      	ldr	r2, [pc, #180]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <MX_GPIO_Init+0x10c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW4_29_Pin|SW4_30_Pin|SW4_31_Pin|SW4_32_Pin
 800058e:	2200      	movs	r2, #0
 8000590:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x110>)
 8000596:	f001 f97d 	bl	8001894 <HAL_GPIO_WritePin>
                          |SW4_28_Pin|SW4_27_Pin|SW4_26_Pin|SW4_25_Pin
                          |SW2_11_Pin|SW2_10_Pin|SW2_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SW3_21_Pin|SW3_22_Pin|SW2_14_Pin|SW2_15_Pin
 800059a:	2200      	movs	r2, #0
 800059c:	f641 71f0 	movw	r1, #8176	; 0x1ff0
 80005a0:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_GPIO_Init+0x114>)
 80005a2:	f001 f977 	bl	8001894 <HAL_GPIO_WritePin>
                          |SW2_16_Pin|SW2_12_Pin|SW1_6_Pin|SW1_7_Pin
                          |SW1_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW3_23_Pin|SW3_24_Pin|SW3_20_Pin|SW3_19_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 71e6 	movw	r1, #63462	; 0xf7e6
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <MX_GPIO_Init+0x118>)
 80005ae:	f001 f971 	bl	8001894 <HAL_GPIO_WritePin>
                          |SW1_4_Pin|SW1_3_Pin|SW1_2_Pin|SW1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW4_29_Pin|SW4_30_Pin|SW4_31_Pin|SW4_32_Pin
 80005b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005b6:	617b      	str	r3, [r7, #20]
                          |SW4_28_Pin|SW4_27_Pin|SW4_26_Pin|SW4_25_Pin
                          |SW2_11_Pin|SW2_10_Pin|SW2_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_GPIO_Init+0x110>)
 80005cc:	f000 ffce 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SW3_21_Pin|SW3_22_Pin|SW2_14_Pin|SW2_15_Pin
 80005d0:	f641 73f0 	movw	r3, #8176	; 0x1ff0
 80005d4:	617b      	str	r3, [r7, #20]
                          |SW2_16_Pin|SW2_12_Pin|SW1_6_Pin|SW1_7_Pin
                          |SW1_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_GPIO_Init+0x114>)
 80005ea:	f000 ffbf 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SW3_23_Pin|SW3_24_Pin|SW3_20_Pin|SW3_19_Pin
 80005ee:	f24f 73e6 	movw	r3, #63462	; 0xf7e6
 80005f2:	617b      	str	r3, [r7, #20]
                          |SW3_18_Pin|SW3_17_Pin|SW2_13_Pin|SW1_5_Pin
                          |SW1_4_Pin|SW1_3_Pin|SW1_2_Pin|SW1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_GPIO_Init+0x118>)
 8000608:	f000 ffb0 	bl	800156c <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40020800 	.word	0x40020800
 8000620:	40020400 	.word	0x40020400

08000624 <Reset_all_outs>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// отключение адресных выходов для всех мультиплексоров
void Reset_all_outs(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SW1_1_GPIO_Port, SW1_1_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062e:	4858      	ldr	r0, [pc, #352]	; (8000790 <Reset_all_outs+0x16c>)
 8000630:	f001 f930 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_2_GPIO_Port, SW1_2_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063a:	4855      	ldr	r0, [pc, #340]	; (8000790 <Reset_all_outs+0x16c>)
 800063c:	f001 f92a 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_3_GPIO_Port, SW1_3_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	4852      	ldr	r0, [pc, #328]	; (8000790 <Reset_all_outs+0x16c>)
 8000646:	f001 f925 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_4_GPIO_Port, SW1_4_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4850      	ldr	r0, [pc, #320]	; (8000790 <Reset_all_outs+0x16c>)
 8000650:	f001 f920 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_5_GPIO_Port, SW1_5_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2120      	movs	r1, #32
 8000658:	484d      	ldr	r0, [pc, #308]	; (8000790 <Reset_all_outs+0x16c>)
 800065a:	f001 f91b 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_6_GPIO_Port, SW1_6_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	484b      	ldr	r0, [pc, #300]	; (8000794 <Reset_all_outs+0x170>)
 8000666:	f001 f915 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_7_GPIO_Port, SW1_7_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4848      	ldr	r0, [pc, #288]	; (8000794 <Reset_all_outs+0x170>)
 8000672:	f001 f90f 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW1_8_GPIO_Port, SW1_8_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	4845      	ldr	r0, [pc, #276]	; (8000794 <Reset_all_outs+0x170>)
 800067e:	f001 f909 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_9_GPIO_Port, SW2_9_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	4843      	ldr	r0, [pc, #268]	; (8000798 <Reset_all_outs+0x174>)
 800068a:	f001 f903 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_10_GPIO_Port, SW2_10_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000694:	4840      	ldr	r0, [pc, #256]	; (8000798 <Reset_all_outs+0x174>)
 8000696:	f001 f8fd 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_11_GPIO_Port, SW2_11_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <Reset_all_outs+0x174>)
 80006a2:	f001 f8f7 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_12_GPIO_Port, SW2_12_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	4839      	ldr	r0, [pc, #228]	; (8000794 <Reset_all_outs+0x170>)
 80006ae:	f001 f8f1 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_13_GPIO_Port, SW2_13_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b8:	4835      	ldr	r0, [pc, #212]	; (8000790 <Reset_all_outs+0x16c>)
 80006ba:	f001 f8eb 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_14_GPIO_Port, SW2_14_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	4834      	ldr	r0, [pc, #208]	; (8000794 <Reset_all_outs+0x170>)
 80006c4:	f001 f8e6 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_15_GPIO_Port, SW2_15_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4831      	ldr	r0, [pc, #196]	; (8000794 <Reset_all_outs+0x170>)
 80006ce:	f001 f8e1 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW2_16_GPIO_Port, SW2_16_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	482e      	ldr	r0, [pc, #184]	; (8000794 <Reset_all_outs+0x170>)
 80006da:	f001 f8db 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_17_GPIO_Port, SW3_17_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e4:	482a      	ldr	r0, [pc, #168]	; (8000790 <Reset_all_outs+0x16c>)
 80006e6:	f001 f8d5 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_18_GPIO_Port, SW3_18_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4827      	ldr	r0, [pc, #156]	; (8000790 <Reset_all_outs+0x16c>)
 80006f2:	f001 f8cf 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_19_GPIO_Port, SW3_19_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	4824      	ldr	r0, [pc, #144]	; (8000790 <Reset_all_outs+0x16c>)
 80006fe:	f001 f8c9 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_20_GPIO_Port, SW3_20_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	4821      	ldr	r0, [pc, #132]	; (8000790 <Reset_all_outs+0x16c>)
 800070a:	f001 f8c3 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_21_GPIO_Port, SW3_21_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	4820      	ldr	r0, [pc, #128]	; (8000794 <Reset_all_outs+0x170>)
 8000714:	f001 f8be 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_22_GPIO_Port, SW3_22_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	481d      	ldr	r0, [pc, #116]	; (8000794 <Reset_all_outs+0x170>)
 800071e:	f001 f8b9 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_23_GPIO_Port, SW3_23_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	481a      	ldr	r0, [pc, #104]	; (8000790 <Reset_all_outs+0x16c>)
 8000728:	f001 f8b4 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW3_24_GPIO_Port, SW3_24_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	4817      	ldr	r0, [pc, #92]	; (8000790 <Reset_all_outs+0x16c>)
 8000732:	f001 f8af 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_25_GPIO_Port, SW4_25_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <Reset_all_outs+0x174>)
 800073c:	f001 f8aa 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_26_GPIO_Port, SW4_26_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <Reset_all_outs+0x174>)
 8000746:	f001 f8a5 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_27_GPIO_Port, SW4_27_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <Reset_all_outs+0x174>)
 8000750:	f001 f8a0 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_28_GPIO_Port, SW4_28_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2110      	movs	r1, #16
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <Reset_all_outs+0x174>)
 800075a:	f001 f89b 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_29_GPIO_Port, SW4_29_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2101      	movs	r1, #1
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <Reset_all_outs+0x174>)
 8000764:	f001 f896 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_30_GPIO_Port, SW4_30_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2102      	movs	r1, #2
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <Reset_all_outs+0x174>)
 800076e:	f001 f891 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_31_GPIO_Port, SW4_31_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2104      	movs	r1, #4
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <Reset_all_outs+0x174>)
 8000778:	f001 f88c 	bl	8001894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW4_32_GPIO_Port, SW4_32_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <Reset_all_outs+0x174>)
 8000782:	f001 f887 	bl	8001894 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000786:	2064      	movs	r0, #100	; 0x64
 8000788:	f000 fdba 	bl	8001300 <HAL_Delay>
};
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020400 	.word	0x40020400
 8000794:	40020800 	.word	0x40020800
 8000798:	40020000 	.word	0x40020000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fd3c 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 fc30 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff feae 	bl	8000508 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80007ac:	f006 fff2 	bl	8007794 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Reset_all_outs();
 80007b0:	f7ff ff38 	bl	8000624 <Reset_all_outs>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  //обработка запроса
  	  CDC_Receive_FS(RxData, 1);
 80007b4:	2101      	movs	r1, #1
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <main+0x28>)
 80007b8:	f007 f896 	bl	80078e8 <CDC_Receive_FS>

	  switch(RxData[0])
 80007bc:	4b01      	ldr	r3, [pc, #4]	; (80007c4 <main+0x28>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	e001      	b.n	80007c8 <main+0x2c>
 80007c4:	20000134 	.word	0x20000134
 80007c8:	2bfe      	cmp	r3, #254	; 0xfe
 80007ca:	f200 840d 	bhi.w	8000fe8 <main+0x84c>
 80007ce:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <main+0x38>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	08000bd1 	.word	0x08000bd1
 80007d8:	08000bf1 	.word	0x08000bf1
 80007dc:	08000c11 	.word	0x08000c11
 80007e0:	08000c2f 	.word	0x08000c2f
 80007e4:	08000c4d 	.word	0x08000c4d
 80007e8:	08000c6b 	.word	0x08000c6b
 80007ec:	08000c8b 	.word	0x08000c8b
 80007f0:	08000cab 	.word	0x08000cab
 80007f4:	08000ccb 	.word	0x08000ccb
 80007f8:	08000ceb 	.word	0x08000ceb
 80007fc:	08000d0b 	.word	0x08000d0b
 8000800:	08000d2b 	.word	0x08000d2b
 8000804:	08000d4b 	.word	0x08000d4b
 8000808:	08000d6b 	.word	0x08000d6b
 800080c:	08000d89 	.word	0x08000d89
 8000810:	08000da7 	.word	0x08000da7
 8000814:	08000dc7 	.word	0x08000dc7
 8000818:	08000de7 	.word	0x08000de7
 800081c:	08000e07 	.word	0x08000e07
 8000820:	08000e27 	.word	0x08000e27
 8000824:	08000e47 	.word	0x08000e47
 8000828:	08000e65 	.word	0x08000e65
 800082c:	08000e83 	.word	0x08000e83
 8000830:	08000ea1 	.word	0x08000ea1
 8000834:	08000ebf 	.word	0x08000ebf
 8000838:	08000edd 	.word	0x08000edd
 800083c:	08000f11 	.word	0x08000f11
 8000840:	08000f2f 	.word	0x08000f2f
 8000844:	08000f4d 	.word	0x08000f4d
 8000848:	08000f6b 	.word	0x08000f6b
 800084c:	08000f89 	.word	0x08000f89
 8000850:	08000fa7 	.word	0x08000fa7
 8000854:	08000fe9 	.word	0x08000fe9
 8000858:	08000fe9 	.word	0x08000fe9
 800085c:	08000fe9 	.word	0x08000fe9
 8000860:	08000fe9 	.word	0x08000fe9
 8000864:	08000fe9 	.word	0x08000fe9
 8000868:	08000fe9 	.word	0x08000fe9
 800086c:	08000fe9 	.word	0x08000fe9
 8000870:	08000fe9 	.word	0x08000fe9
 8000874:	08000fe9 	.word	0x08000fe9
 8000878:	08000fe9 	.word	0x08000fe9
 800087c:	08000fe9 	.word	0x08000fe9
 8000880:	08000fe9 	.word	0x08000fe9
 8000884:	08000fe9 	.word	0x08000fe9
 8000888:	08000fe9 	.word	0x08000fe9
 800088c:	08000fe9 	.word	0x08000fe9
 8000890:	08000fe9 	.word	0x08000fe9
 8000894:	08000fe9 	.word	0x08000fe9
 8000898:	08000fe9 	.word	0x08000fe9
 800089c:	08000fe9 	.word	0x08000fe9
 80008a0:	08000fe9 	.word	0x08000fe9
 80008a4:	08000fe9 	.word	0x08000fe9
 80008a8:	08000fe9 	.word	0x08000fe9
 80008ac:	08000fe9 	.word	0x08000fe9
 80008b0:	08000fe9 	.word	0x08000fe9
 80008b4:	08000fe9 	.word	0x08000fe9
 80008b8:	08000fe9 	.word	0x08000fe9
 80008bc:	08000fe9 	.word	0x08000fe9
 80008c0:	08000fe9 	.word	0x08000fe9
 80008c4:	08000fe9 	.word	0x08000fe9
 80008c8:	08000fe9 	.word	0x08000fe9
 80008cc:	08000fe9 	.word	0x08000fe9
 80008d0:	08000fe9 	.word	0x08000fe9
 80008d4:	08000fe9 	.word	0x08000fe9
 80008d8:	08000fe9 	.word	0x08000fe9
 80008dc:	08000fe9 	.word	0x08000fe9
 80008e0:	08000fe9 	.word	0x08000fe9
 80008e4:	08000fe9 	.word	0x08000fe9
 80008e8:	08000fe9 	.word	0x08000fe9
 80008ec:	08000fe9 	.word	0x08000fe9
 80008f0:	08000fe9 	.word	0x08000fe9
 80008f4:	08000fe9 	.word	0x08000fe9
 80008f8:	08000fe9 	.word	0x08000fe9
 80008fc:	08000fe9 	.word	0x08000fe9
 8000900:	08000fe9 	.word	0x08000fe9
 8000904:	08000fe9 	.word	0x08000fe9
 8000908:	08000fe9 	.word	0x08000fe9
 800090c:	08000fe9 	.word	0x08000fe9
 8000910:	08000fe9 	.word	0x08000fe9
 8000914:	08000fe9 	.word	0x08000fe9
 8000918:	08000fe9 	.word	0x08000fe9
 800091c:	08000fe9 	.word	0x08000fe9
 8000920:	08000fe9 	.word	0x08000fe9
 8000924:	08000fe9 	.word	0x08000fe9
 8000928:	08000fe9 	.word	0x08000fe9
 800092c:	08000fe9 	.word	0x08000fe9
 8000930:	08000fe9 	.word	0x08000fe9
 8000934:	08000fe9 	.word	0x08000fe9
 8000938:	08000fe9 	.word	0x08000fe9
 800093c:	08000fe9 	.word	0x08000fe9
 8000940:	08000fe9 	.word	0x08000fe9
 8000944:	08000fe9 	.word	0x08000fe9
 8000948:	08000fe9 	.word	0x08000fe9
 800094c:	08000fe9 	.word	0x08000fe9
 8000950:	08000fe9 	.word	0x08000fe9
 8000954:	08000fe9 	.word	0x08000fe9
 8000958:	08000fe9 	.word	0x08000fe9
 800095c:	08000fe9 	.word	0x08000fe9
 8000960:	08000fe9 	.word	0x08000fe9
 8000964:	08000fe9 	.word	0x08000fe9
 8000968:	08000fe9 	.word	0x08000fe9
 800096c:	08000fe9 	.word	0x08000fe9
 8000970:	08000fe9 	.word	0x08000fe9
 8000974:	08000fe9 	.word	0x08000fe9
 8000978:	08000fe9 	.word	0x08000fe9
 800097c:	08000fe9 	.word	0x08000fe9
 8000980:	08000fe9 	.word	0x08000fe9
 8000984:	08000fe9 	.word	0x08000fe9
 8000988:	08000fe9 	.word	0x08000fe9
 800098c:	08000fe9 	.word	0x08000fe9
 8000990:	08000fe9 	.word	0x08000fe9
 8000994:	08000fe9 	.word	0x08000fe9
 8000998:	08000fe9 	.word	0x08000fe9
 800099c:	08000fe9 	.word	0x08000fe9
 80009a0:	08000fe9 	.word	0x08000fe9
 80009a4:	08000fe9 	.word	0x08000fe9
 80009a8:	08000fe9 	.word	0x08000fe9
 80009ac:	08000fe9 	.word	0x08000fe9
 80009b0:	08000fe9 	.word	0x08000fe9
 80009b4:	08000fe9 	.word	0x08000fe9
 80009b8:	08000fe9 	.word	0x08000fe9
 80009bc:	08000fe9 	.word	0x08000fe9
 80009c0:	08000fe9 	.word	0x08000fe9
 80009c4:	08000fe9 	.word	0x08000fe9
 80009c8:	08000fe9 	.word	0x08000fe9
 80009cc:	08000fe9 	.word	0x08000fe9
 80009d0:	08000fe9 	.word	0x08000fe9
 80009d4:	08000fe9 	.word	0x08000fe9
 80009d8:	08000fe9 	.word	0x08000fe9
 80009dc:	08000fe9 	.word	0x08000fe9
 80009e0:	08000fe9 	.word	0x08000fe9
 80009e4:	08000fe9 	.word	0x08000fe9
 80009e8:	08000fe9 	.word	0x08000fe9
 80009ec:	08000fe9 	.word	0x08000fe9
 80009f0:	08000fe9 	.word	0x08000fe9
 80009f4:	08000fe9 	.word	0x08000fe9
 80009f8:	08000fe9 	.word	0x08000fe9
 80009fc:	08000fe9 	.word	0x08000fe9
 8000a00:	08000fe9 	.word	0x08000fe9
 8000a04:	08000fe9 	.word	0x08000fe9
 8000a08:	08000fe9 	.word	0x08000fe9
 8000a0c:	08000fe9 	.word	0x08000fe9
 8000a10:	08000fe9 	.word	0x08000fe9
 8000a14:	08000fe9 	.word	0x08000fe9
 8000a18:	08000fe9 	.word	0x08000fe9
 8000a1c:	08000fe9 	.word	0x08000fe9
 8000a20:	08000fe9 	.word	0x08000fe9
 8000a24:	08000fe9 	.word	0x08000fe9
 8000a28:	08000fe9 	.word	0x08000fe9
 8000a2c:	08000fe9 	.word	0x08000fe9
 8000a30:	08000fe9 	.word	0x08000fe9
 8000a34:	08000fe9 	.word	0x08000fe9
 8000a38:	08000fe9 	.word	0x08000fe9
 8000a3c:	08000fe9 	.word	0x08000fe9
 8000a40:	08000fe9 	.word	0x08000fe9
 8000a44:	08000fe9 	.word	0x08000fe9
 8000a48:	08000fe9 	.word	0x08000fe9
 8000a4c:	08000fe9 	.word	0x08000fe9
 8000a50:	08000fe9 	.word	0x08000fe9
 8000a54:	08000fe9 	.word	0x08000fe9
 8000a58:	08000fe9 	.word	0x08000fe9
 8000a5c:	08000fe9 	.word	0x08000fe9
 8000a60:	08000fe9 	.word	0x08000fe9
 8000a64:	08000fe9 	.word	0x08000fe9
 8000a68:	08000fe9 	.word	0x08000fe9
 8000a6c:	08000fe9 	.word	0x08000fe9
 8000a70:	08000fe9 	.word	0x08000fe9
 8000a74:	08000fe9 	.word	0x08000fe9
 8000a78:	08000fc5 	.word	0x08000fc5
 8000a7c:	08000fe9 	.word	0x08000fe9
 8000a80:	08000fe9 	.word	0x08000fe9
 8000a84:	08000fe9 	.word	0x08000fe9
 8000a88:	08000fe9 	.word	0x08000fe9
 8000a8c:	08000fe9 	.word	0x08000fe9
 8000a90:	08000fe9 	.word	0x08000fe9
 8000a94:	08000fe9 	.word	0x08000fe9
 8000a98:	08000fe9 	.word	0x08000fe9
 8000a9c:	08000fe9 	.word	0x08000fe9
 8000aa0:	08000fe9 	.word	0x08000fe9
 8000aa4:	08000fe9 	.word	0x08000fe9
 8000aa8:	08000fe9 	.word	0x08000fe9
 8000aac:	08000fe9 	.word	0x08000fe9
 8000ab0:	08000fe9 	.word	0x08000fe9
 8000ab4:	08000fe9 	.word	0x08000fe9
 8000ab8:	08000fe9 	.word	0x08000fe9
 8000abc:	08000fe9 	.word	0x08000fe9
 8000ac0:	08000fe9 	.word	0x08000fe9
 8000ac4:	08000fe9 	.word	0x08000fe9
 8000ac8:	08000fe9 	.word	0x08000fe9
 8000acc:	08000fe9 	.word	0x08000fe9
 8000ad0:	08000fe9 	.word	0x08000fe9
 8000ad4:	08000fe9 	.word	0x08000fe9
 8000ad8:	08000fe9 	.word	0x08000fe9
 8000adc:	08000fe9 	.word	0x08000fe9
 8000ae0:	08000fe9 	.word	0x08000fe9
 8000ae4:	08000fe9 	.word	0x08000fe9
 8000ae8:	08000fe9 	.word	0x08000fe9
 8000aec:	08000fe9 	.word	0x08000fe9
 8000af0:	08000fe9 	.word	0x08000fe9
 8000af4:	08000fe9 	.word	0x08000fe9
 8000af8:	08000fe9 	.word	0x08000fe9
 8000afc:	08000fe9 	.word	0x08000fe9
 8000b00:	08000fe9 	.word	0x08000fe9
 8000b04:	08000fe9 	.word	0x08000fe9
 8000b08:	08000fe9 	.word	0x08000fe9
 8000b0c:	08000fe9 	.word	0x08000fe9
 8000b10:	08000fe9 	.word	0x08000fe9
 8000b14:	08000fe9 	.word	0x08000fe9
 8000b18:	08000fe9 	.word	0x08000fe9
 8000b1c:	08000fe9 	.word	0x08000fe9
 8000b20:	08000fe9 	.word	0x08000fe9
 8000b24:	08000fe9 	.word	0x08000fe9
 8000b28:	08000fe9 	.word	0x08000fe9
 8000b2c:	08000fe9 	.word	0x08000fe9
 8000b30:	08000fe9 	.word	0x08000fe9
 8000b34:	08000fe9 	.word	0x08000fe9
 8000b38:	08000fe9 	.word	0x08000fe9
 8000b3c:	08000fe9 	.word	0x08000fe9
 8000b40:	08000fe9 	.word	0x08000fe9
 8000b44:	08000fe9 	.word	0x08000fe9
 8000b48:	08000fe9 	.word	0x08000fe9
 8000b4c:	08000fe9 	.word	0x08000fe9
 8000b50:	08000fe9 	.word	0x08000fe9
 8000b54:	08000fe9 	.word	0x08000fe9
 8000b58:	08000fe9 	.word	0x08000fe9
 8000b5c:	08000fe9 	.word	0x08000fe9
 8000b60:	08000fe9 	.word	0x08000fe9
 8000b64:	08000fe9 	.word	0x08000fe9
 8000b68:	08000fe9 	.word	0x08000fe9
 8000b6c:	08000fe9 	.word	0x08000fe9
 8000b70:	08000fe9 	.word	0x08000fe9
 8000b74:	08000fe9 	.word	0x08000fe9
 8000b78:	08000fe9 	.word	0x08000fe9
 8000b7c:	08000fe9 	.word	0x08000fe9
 8000b80:	08000fe9 	.word	0x08000fe9
 8000b84:	08000fe9 	.word	0x08000fe9
 8000b88:	08000fe9 	.word	0x08000fe9
 8000b8c:	08000fe9 	.word	0x08000fe9
 8000b90:	08000fe9 	.word	0x08000fe9
 8000b94:	08000fe9 	.word	0x08000fe9
 8000b98:	08000fe9 	.word	0x08000fe9
 8000b9c:	08000fe9 	.word	0x08000fe9
 8000ba0:	08000fe9 	.word	0x08000fe9
 8000ba4:	08000fe9 	.word	0x08000fe9
 8000ba8:	08000fe9 	.word	0x08000fe9
 8000bac:	08000fe9 	.word	0x08000fe9
 8000bb0:	08000fe9 	.word	0x08000fe9
 8000bb4:	08000fe9 	.word	0x08000fe9
 8000bb8:	08000fe9 	.word	0x08000fe9
 8000bbc:	08000fe9 	.word	0x08000fe9
 8000bc0:	08000fe9 	.word	0x08000fe9
 8000bc4:	08000fe9 	.word	0x08000fe9
 8000bc8:	08000fe9 	.word	0x08000fe9
 8000bcc:	08000fd5 	.word	0x08000fd5
	  {
		  case 1:
			  Reset_all_outs();
 8000bd0:	f7ff fd28 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_1_GPIO_Port, SW1_1_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bda:	48c8      	ldr	r0, [pc, #800]	; (8000efc <main+0x760>)
 8000bdc:	f000 fe5a 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000be0:	2102      	movs	r1, #2
 8000be2:	48c7      	ldr	r0, [pc, #796]	; (8000f00 <main+0x764>)
 8000be4:	f006 fe94 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000be8:	4bc6      	ldr	r3, [pc, #792]	; (8000f04 <main+0x768>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
			break;
 8000bee:	e1fc      	b.n	8000fea <main+0x84e>
		  case 2:
			  Reset_all_outs();
 8000bf0:	f7ff fd18 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_2_GPIO_Port, SW1_2_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48c0      	ldr	r0, [pc, #768]	; (8000efc <main+0x760>)
 8000bfc:	f000 fe4a 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c00:	2102      	movs	r1, #2
 8000c02:	48bf      	ldr	r0, [pc, #764]	; (8000f00 <main+0x764>)
 8000c04:	f006 fe84 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000c08:	4bbe      	ldr	r3, [pc, #760]	; (8000f04 <main+0x768>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
			break;
 8000c0e:	e1ec      	b.n	8000fea <main+0x84e>
		  case 3:
			  Reset_all_outs();
 8000c10:	f7ff fd08 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_3_GPIO_Port, SW1_3_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b8      	ldr	r0, [pc, #736]	; (8000efc <main+0x760>)
 8000c1a:	f000 fe3b 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c1e:	2102      	movs	r1, #2
 8000c20:	48b7      	ldr	r0, [pc, #732]	; (8000f00 <main+0x764>)
 8000c22:	f006 fe75 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000c26:	4bb7      	ldr	r3, [pc, #732]	; (8000f04 <main+0x768>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e1dd      	b.n	8000fea <main+0x84e>
		  case 4:
			  Reset_all_outs();
 8000c2e:	f7ff fcf9 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_4_GPIO_Port, SW1_4_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	48b1      	ldr	r0, [pc, #708]	; (8000efc <main+0x760>)
 8000c38:	f000 fe2c 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	48b0      	ldr	r0, [pc, #704]	; (8000f00 <main+0x764>)
 8000c40:	f006 fe66 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000c44:	4baf      	ldr	r3, [pc, #700]	; (8000f04 <main+0x768>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
			break;
 8000c4a:	e1ce      	b.n	8000fea <main+0x84e>
		  case 5:
			  Reset_all_outs();
 8000c4c:	f7ff fcea 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_5_GPIO_Port, SW1_5_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	48a9      	ldr	r0, [pc, #676]	; (8000efc <main+0x760>)
 8000c56:	f000 fe1d 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	48a8      	ldr	r0, [pc, #672]	; (8000f00 <main+0x764>)
 8000c5e:	f006 fe57 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000c62:	4ba8      	ldr	r3, [pc, #672]	; (8000f04 <main+0x768>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
			break;
 8000c68:	e1bf      	b.n	8000fea <main+0x84e>
		  case 6:
			  Reset_all_outs();
 8000c6a:	f7ff fcdb 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_6_GPIO_Port, SW1_6_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	48a4      	ldr	r0, [pc, #656]	; (8000f08 <main+0x76c>)
 8000c76:	f000 fe0d 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	48a0      	ldr	r0, [pc, #640]	; (8000f00 <main+0x764>)
 8000c7e:	f006 fe47 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000c82:	4ba0      	ldr	r3, [pc, #640]	; (8000f04 <main+0x768>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
			break;
 8000c88:	e1af      	b.n	8000fea <main+0x84e>
		  case 7:
			  Reset_all_outs();
 8000c8a:	f7ff fccb 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_7_GPIO_Port, SW1_7_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c94:	489c      	ldr	r0, [pc, #624]	; (8000f08 <main+0x76c>)
 8000c96:	f000 fdfd 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4898      	ldr	r0, [pc, #608]	; (8000f00 <main+0x764>)
 8000c9e:	f006 fe37 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000ca2:	4b98      	ldr	r3, [pc, #608]	; (8000f04 <main+0x768>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
			break;
 8000ca8:	e19f      	b.n	8000fea <main+0x84e>
		  case 8:
			  Reset_all_outs();
 8000caa:	f7ff fcbb 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW1_8_GPIO_Port, SW1_8_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	4894      	ldr	r0, [pc, #592]	; (8000f08 <main+0x76c>)
 8000cb6:	f000 fded 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000cba:	2102      	movs	r1, #2
 8000cbc:	4890      	ldr	r0, [pc, #576]	; (8000f00 <main+0x764>)
 8000cbe:	f006 fe27 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000cc2:	4b90      	ldr	r3, [pc, #576]	; (8000f04 <main+0x768>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
			break;
 8000cc8:	e18f      	b.n	8000fea <main+0x84e>
		  case 9:
			  Reset_all_outs();
 8000cca:	f7ff fcab 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_9_GPIO_Port, SW2_9_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	488d      	ldr	r0, [pc, #564]	; (8000f0c <main+0x770>)
 8000cd6:	f000 fddd 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4888      	ldr	r0, [pc, #544]	; (8000f00 <main+0x764>)
 8000cde:	f006 fe17 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000ce2:	4b88      	ldr	r3, [pc, #544]	; (8000f04 <main+0x768>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
			break;
 8000ce8:	e17f      	b.n	8000fea <main+0x84e>
		  case 10:
			  Reset_all_outs();
 8000cea:	f7ff fc9b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_10_GPIO_Port, SW2_10_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf4:	4885      	ldr	r0, [pc, #532]	; (8000f0c <main+0x770>)
 8000cf6:	f000 fdcd 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	4880      	ldr	r0, [pc, #512]	; (8000f00 <main+0x764>)
 8000cfe:	f006 fe07 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d02:	4b80      	ldr	r3, [pc, #512]	; (8000f04 <main+0x768>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
			break;
 8000d08:	e16f      	b.n	8000fea <main+0x84e>
		  case 11:
			  Reset_all_outs();
 8000d0a:	f7ff fc8b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_11_GPIO_Port, SW2_11_Pin, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d14:	487d      	ldr	r0, [pc, #500]	; (8000f0c <main+0x770>)
 8000d16:	f000 fdbd 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4878      	ldr	r0, [pc, #480]	; (8000f00 <main+0x764>)
 8000d1e:	f006 fdf7 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <main+0x768>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
			break;
 8000d28:	e15f      	b.n	8000fea <main+0x84e>
		  case 12:
			  Reset_all_outs();
 8000d2a:	f7ff fc7b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_12_GPIO_Port, SW2_12_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	4874      	ldr	r0, [pc, #464]	; (8000f08 <main+0x76c>)
 8000d36:	f000 fdad 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4870      	ldr	r0, [pc, #448]	; (8000f00 <main+0x764>)
 8000d3e:	f006 fde7 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d42:	4b70      	ldr	r3, [pc, #448]	; (8000f04 <main+0x768>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]
			break;
 8000d48:	e14f      	b.n	8000fea <main+0x84e>
		  case 13:
			  Reset_all_outs();
 8000d4a:	f7ff fc6b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_13_GPIO_Port, SW2_13_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d54:	4869      	ldr	r0, [pc, #420]	; (8000efc <main+0x760>)
 8000d56:	f000 fd9d 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4868      	ldr	r0, [pc, #416]	; (8000f00 <main+0x764>)
 8000d5e:	f006 fdd7 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d62:	4b68      	ldr	r3, [pc, #416]	; (8000f04 <main+0x768>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
			break;
 8000d68:	e13f      	b.n	8000fea <main+0x84e>
		  case 14:
			  Reset_all_outs();
 8000d6a:	f7ff fc5b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_14_GPIO_Port, SW2_14_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2140      	movs	r1, #64	; 0x40
 8000d72:	4865      	ldr	r0, [pc, #404]	; (8000f08 <main+0x76c>)
 8000d74:	f000 fd8e 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4861      	ldr	r0, [pc, #388]	; (8000f00 <main+0x764>)
 8000d7c:	f006 fdc8 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d80:	4b60      	ldr	r3, [pc, #384]	; (8000f04 <main+0x768>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
			break;
 8000d86:	e130      	b.n	8000fea <main+0x84e>
		  case 15:
			  Reset_all_outs();
 8000d88:	f7ff fc4c 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_15_GPIO_Port, SW2_15_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	485d      	ldr	r0, [pc, #372]	; (8000f08 <main+0x76c>)
 8000d92:	f000 fd7f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000d96:	2102      	movs	r1, #2
 8000d98:	4859      	ldr	r0, [pc, #356]	; (8000f00 <main+0x764>)
 8000d9a:	f006 fdb9 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000d9e:	4b59      	ldr	r3, [pc, #356]	; (8000f04 <main+0x768>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
			break;
 8000da4:	e121      	b.n	8000fea <main+0x84e>
		  case 16:
			  Reset_all_outs();
 8000da6:	f7ff fc3d 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW2_16_GPIO_Port, SW2_16_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db0:	4855      	ldr	r0, [pc, #340]	; (8000f08 <main+0x76c>)
 8000db2:	f000 fd6f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000db6:	2102      	movs	r1, #2
 8000db8:	4851      	ldr	r0, [pc, #324]	; (8000f00 <main+0x764>)
 8000dba:	f006 fda9 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000dbe:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <main+0x768>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
			break;
 8000dc4:	e111      	b.n	8000fea <main+0x84e>
		  case 17:
			  Reset_all_outs();
 8000dc6:	f7ff fc2d 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_17_GPIO_Port, SW3_17_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	484a      	ldr	r0, [pc, #296]	; (8000efc <main+0x760>)
 8000dd2:	f000 fd5f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4849      	ldr	r0, [pc, #292]	; (8000f00 <main+0x764>)
 8000dda:	f006 fd99 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <main+0x768>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			break;
 8000de4:	e101      	b.n	8000fea <main+0x84e>
		  case 18:
			  Reset_all_outs();
 8000de6:	f7ff fc1d 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_18_GPIO_Port, SW3_18_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df0:	4842      	ldr	r0, [pc, #264]	; (8000efc <main+0x760>)
 8000df2:	f000 fd4f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000df6:	2102      	movs	r1, #2
 8000df8:	4841      	ldr	r0, [pc, #260]	; (8000f00 <main+0x764>)
 8000dfa:	f006 fd89 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000dfe:	4b41      	ldr	r3, [pc, #260]	; (8000f04 <main+0x768>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
			break;
 8000e04:	e0f1      	b.n	8000fea <main+0x84e>
		  case 19:
			  Reset_all_outs();
 8000e06:	f7ff fc0d 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_19_GPIO_Port, SW3_19_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e10:	483a      	ldr	r0, [pc, #232]	; (8000efc <main+0x760>)
 8000e12:	f000 fd3f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	4839      	ldr	r0, [pc, #228]	; (8000f00 <main+0x764>)
 8000e1a:	f006 fd79 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <main+0x768>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			break;
 8000e24:	e0e1      	b.n	8000fea <main+0x84e>
		  case 20:
			  Reset_all_outs();
 8000e26:	f7ff fbfd 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_20_GPIO_Port, SW3_20_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4832      	ldr	r0, [pc, #200]	; (8000efc <main+0x760>)
 8000e32:	f000 fd2f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000e36:	2102      	movs	r1, #2
 8000e38:	4831      	ldr	r0, [pc, #196]	; (8000f00 <main+0x764>)
 8000e3a:	f006 fd69 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <main+0x768>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
			break;
 8000e44:	e0d1      	b.n	8000fea <main+0x84e>
		  case 21:
			  Reset_all_outs();
 8000e46:	f7ff fbed 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_21_GPIO_Port, SW3_21_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	482e      	ldr	r0, [pc, #184]	; (8000f08 <main+0x76c>)
 8000e50:	f000 fd20 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000e54:	2102      	movs	r1, #2
 8000e56:	482a      	ldr	r0, [pc, #168]	; (8000f00 <main+0x764>)
 8000e58:	f006 fd5a 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x768>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			break;
 8000e62:	e0c2      	b.n	8000fea <main+0x84e>
		  case 22:
			  Reset_all_outs();
 8000e64:	f7ff fbde 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_22_GPIO_Port, SW3_22_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	4826      	ldr	r0, [pc, #152]	; (8000f08 <main+0x76c>)
 8000e6e:	f000 fd11 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000e72:	2102      	movs	r1, #2
 8000e74:	4822      	ldr	r0, [pc, #136]	; (8000f00 <main+0x764>)
 8000e76:	f006 fd4b 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <main+0x768>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
			break;
 8000e80:	e0b3      	b.n	8000fea <main+0x84e>
		  case 23:
			  Reset_all_outs();
 8000e82:	f7ff fbcf 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_23_GPIO_Port, SW3_23_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2102      	movs	r1, #2
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <main+0x760>)
 8000e8c:	f000 fd02 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000e90:	2102      	movs	r1, #2
 8000e92:	481b      	ldr	r0, [pc, #108]	; (8000f00 <main+0x764>)
 8000e94:	f006 fd3c 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <main+0x768>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			break;
 8000e9e:	e0a4      	b.n	8000fea <main+0x84e>
		  case 24:
			  Reset_all_outs();
 8000ea0:	f7ff fbc0 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW3_24_GPIO_Port, SW3_24_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <main+0x760>)
 8000eaa:	f000 fcf3 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4813      	ldr	r0, [pc, #76]	; (8000f00 <main+0x764>)
 8000eb2:	f006 fd2d 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <main+0x768>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
			break;
 8000ebc:	e095      	b.n	8000fea <main+0x84e>
		  case 25:
			  Reset_all_outs();
 8000ebe:	f7ff fbb1 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_25_GPIO_Port, SW4_25_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <main+0x770>)
 8000ec8:	f000 fce4 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <main+0x764>)
 8000ed0:	f006 fd1e 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <main+0x768>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			break;
 8000eda:	e086      	b.n	8000fea <main+0x84e>
		  case 26:
			  Reset_all_outs();
 8000edc:	f7ff fba2 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_26_GPIO_Port, SW4_26_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2140      	movs	r1, #64	; 0x40
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <main+0x770>)
 8000ee6:	f000 fcd5 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000eea:	2102      	movs	r1, #2
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <main+0x764>)
 8000eee:	f006 fd0f 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <main+0x768>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
			break;
 8000ef8:	e077      	b.n	8000fea <main+0x84e>
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000134 	.word	0x20000134
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000
		  case 27:
			  Reset_all_outs();
 8000f10:	f7ff fb88 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_27_GPIO_Port, SW4_27_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2120      	movs	r1, #32
 8000f18:	4836      	ldr	r0, [pc, #216]	; (8000ff4 <main+0x858>)
 8000f1a:	f000 fcbb 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <main+0x85c>)
 8000f22:	f006 fcf5 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <main+0x860>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			break;
 8000f2c:	e05d      	b.n	8000fea <main+0x84e>
		  case 28:
			  Reset_all_outs();
 8000f2e:	f7ff fb79 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_28_GPIO_Port, SW4_28_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	482f      	ldr	r0, [pc, #188]	; (8000ff4 <main+0x858>)
 8000f38:	f000 fcac 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	482e      	ldr	r0, [pc, #184]	; (8000ff8 <main+0x85c>)
 8000f40:	f006 fce6 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <main+0x860>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
			break;
 8000f4a:	e04e      	b.n	8000fea <main+0x84e>
		  case 29:
			  Reset_all_outs();
 8000f4c:	f7ff fb6a 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_29_GPIO_Port, SW4_29_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2101      	movs	r1, #1
 8000f54:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <main+0x858>)
 8000f56:	f000 fc9d 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <main+0x85c>)
 8000f5e:	f006 fcd7 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <main+0x860>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e03f      	b.n	8000fea <main+0x84e>
		  case 30:
			  Reset_all_outs();
 8000f6a:	f7ff fb5b 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_30_GPIO_Port, SW4_30_Pin, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2102      	movs	r1, #2
 8000f72:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <main+0x858>)
 8000f74:	f000 fc8e 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000f78:	2102      	movs	r1, #2
 8000f7a:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <main+0x85c>)
 8000f7c:	f006 fcc8 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <main+0x860>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
			break;
 8000f86:	e030      	b.n	8000fea <main+0x84e>
		  case 31:
			  Reset_all_outs();
 8000f88:	f7ff fb4c 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_31_GPIO_Port, SW4_31_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <main+0x858>)
 8000f92:	f000 fc7f 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000f96:	2102      	movs	r1, #2
 8000f98:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <main+0x85c>)
 8000f9a:	f006 fcb9 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <main+0x860>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
			break;
 8000fa4:	e021      	b.n	8000fea <main+0x84e>
		  case 32:
			  Reset_all_outs();
 8000fa6:	f7ff fb3d 	bl	8000624 <Reset_all_outs>
	  			HAL_GPIO_WritePin(SW4_32_GPIO_Port, SW4_32_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2108      	movs	r1, #8
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <main+0x858>)
 8000fb0:	f000 fc70 	bl	8001894 <HAL_GPIO_WritePin>
	  			CDC_Transmit_FS(ANTWORT_DT, 2);
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <main+0x85c>)
 8000fb8:	f006 fcaa 	bl	8007910 <CDC_Transmit_FS>
	  			RxData[0] = 0x00;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <main+0x860>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			break;
 8000fc2:	e012      	b.n	8000fea <main+0x84e>

		case 170: //запрос опознания, отвечаем на это 0xBB
			CDC_Transmit_FS(ID, 2);
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <main+0x864>)
 8000fc8:	f006 fca2 	bl	8007910 <CDC_Transmit_FS>
			RxData[0] = 0x00;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <main+0x860>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
			break;
 8000fd2:	e00a      	b.n	8000fea <main+0x84e>
		case 0xFF: //команда полной остановки
			Reset_all_outs();
 8000fd4:	f7ff fb26 	bl	8000624 <Reset_all_outs>
			CDC_Transmit_FS(ANTWORT, 2);
 8000fd8:	2102      	movs	r1, #2
 8000fda:	480a      	ldr	r0, [pc, #40]	; (8001004 <main+0x868>)
 8000fdc:	f006 fc98 	bl	8007910 <CDC_Transmit_FS>
			RxData[0] = 0x00;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <main+0x860>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
			break;
 8000fe6:	e000      	b.n	8000fea <main+0x84e>
		default:
			;
			break;
 8000fe8:	bf00      	nop
	  }
  	  HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 f988 	bl	8001300 <HAL_Delay>
  	  CDC_Receive_FS(RxData, 1);
 8000ff0:	f7ff bbe0 	b.w	80007b4 <main+0x18>
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000134 	.word	0x20000134
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2234      	movs	r2, #52	; 0x34
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f007 f970 	bl	80082fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <SystemClock_Config+0xd0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <SystemClock_Config+0xd0>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xd4>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 7;
 800107c:	2307      	movs	r3, #7
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001080:	2360      	movs	r3, #96	; 0x60
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001084:	2306      	movs	r3, #6
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fca5 	bl	80039e4 <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010a0:	f000 f81e 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	230f      	movs	r3, #15
 80010a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 feca 	bl	8002e58 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ca:	f000 f809 	bl	80010e0 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f89a 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <OTG_FS_IRQHandler+0x10>)
 8001196:	f000 fced 	bl	8001b74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000161c 	.word	0x2000161c

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f007 f85d 	bl	80082b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff facf 	bl	800079c <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800120c:	0800838c 	.word	0x0800838c
  ldr r2, =_sbss
 8001210:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001214:	20001d48 	.word	0x20001d48

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff ff4c 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f967 	bl	8001552 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	20000014 	.word	0x20000014
 80012bc:	20000010 	.word	0x20000010

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000014 	.word	0x20000014
 80012e4:	20000138 	.word	0x20000138

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000138 	.word	0x20000138

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000014 	.word	0x20000014

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e165      	b.n	8001854 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 8154 	bne.w	800184e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d130      	bne.n	8001620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d017      	beq.n	800165c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80ae 	beq.w	800184e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_GPIO_Init+0x300>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a5c      	ldr	r2, [pc, #368]	; (800186c <HAL_GPIO_Init+0x300>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b5a      	ldr	r3, [pc, #360]	; (800186c <HAL_GPIO_Init+0x300>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_GPIO_Init+0x304>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4f      	ldr	r2, [pc, #316]	; (8001874 <HAL_GPIO_Init+0x308>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_GPIO_Init+0x30c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_Init+0x216>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_GPIO_Init+0x310>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x212>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x314>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x20e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4b      	ldr	r2, [pc, #300]	; (8001884 <HAL_GPIO_Init+0x318>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x20a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_GPIO_Init+0x31c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x206>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_GPIO_Init+0x320>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x202>
 800176a:	2306      	movs	r3, #6
 800176c:	e00c      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800176e:	2307      	movs	r3, #7
 8001770:	e00a      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001772:	2305      	movs	r3, #5
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001776:	2304      	movs	r3, #4
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x21c>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x304>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b3a      	ldr	r3, [pc, #232]	; (8001890 <HAL_GPIO_Init+0x324>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a31      	ldr	r2, [pc, #196]	; (8001890 <HAL_GPIO_Init+0x324>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x324>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_GPIO_Init+0x324>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <HAL_GPIO_Init+0x324>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001848:	4a11      	ldr	r2, [pc, #68]	; (8001890 <HAL_GPIO_Init+0x324>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f ae96 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40021400 	.word	0x40021400
 800188c:	40021800 	.word	0x40021800
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018b0:	e003      	b.n	80018ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018b2:	887b      	ldrh	r3, [r7, #2]
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c8:	b08f      	sub	sp, #60	; 0x3c
 80018ca:	af0a      	add	r7, sp, #40	; 0x28
 80018cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e116      	b.n	8001b06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f006 f966 	bl	8007bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2203      	movs	r2, #3
 80018fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fc17 	bl	800414a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	687e      	ldr	r6, [r7, #4]
 8001924:	466d      	mov	r5, sp
 8001926:	f106 0410 	add.w	r4, r6, #16
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001936:	e885 0003 	stmia.w	r5, {r0, r1}
 800193a:	1d33      	adds	r3, r6, #4
 800193c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193e:	6838      	ldr	r0, [r7, #0]
 8001940:	f002 faee 	bl	8003f20 <USB_CoreInit>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0d7      	b.n	8001b06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fc05 	bl	800416c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e04a      	b.n	80019fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	333d      	adds	r3, #61	; 0x3d
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	333c      	adds	r3, #60	; 0x3c
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	b298      	uxth	r0, r3
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3344      	adds	r3, #68	; 0x44
 80019a4:	4602      	mov	r2, r0
 80019a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3340      	adds	r3, #64	; 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	3348      	adds	r3, #72	; 0x48
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	334c      	adds	r3, #76	; 0x4c
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3354      	adds	r3, #84	; 0x54
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	3301      	adds	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3af      	bcc.n	8001968 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e044      	b.n	8001a98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3b5      	bcc.n	8001a0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	687e      	ldr	r6, [r7, #4]
 8001aaa:	466d      	mov	r5, sp
 8001aac:	f106 0410 	add.w	r4, r6, #16
 8001ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001abc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac0:	1d33      	adds	r3, r6, #4
 8001ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f002 fb9d 	bl	8004204 <USB_DevInit>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e014      	b.n	8001b06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d102      	bne.n	8001afa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 f98b 	bl	8002e10 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fcdf 	bl	80054c2 <USB_DevDisconnect>

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_Start+0x1c>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e020      	b.n	8001b6c <HAL_PCD_Start+0x5e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d109      	bne.n	8001b4e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d005      	beq.n	8001b4e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 fae8 	bl	8004128 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fc8f 	bl	8005480 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b08d      	sub	sp, #52	; 0x34
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fd4d 	bl	800562a <USB_GetMode>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 84b7 	bne.w	8002506 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fcb1 	bl	8005504 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 84ad 	beq.w	8002504 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fc9e 	bl	8005504 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f002 0202 	and.w	r2, r2, #2
 8001be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 fc8c 	bl	8005504 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d161      	bne.n	8001cba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699a      	ldr	r2, [r3, #24]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0210 	bic.w	r2, r2, #16
 8001c04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	0c5b      	lsrs	r3, r3, #17
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d124      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d035      	beq.n	8001caa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a38      	ldr	r0, [r7, #32]
 8001c52:	f003 fac3 	bl	80051dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c62:	441a      	add	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c74:	441a      	add	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	621a      	str	r2, [r3, #32]
 8001c7a:	e016      	b.n	8001caa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	0c5b      	lsrs	r3, r3, #17
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d110      	bne.n	8001caa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c8e:	2208      	movs	r2, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f003 faa2 	bl	80051dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ca4:	441a      	add	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fc20 	bl	8005504 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cce:	f040 80a7 	bne.w	8001e20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fc25 	bl	800552a <USB_ReadDevAllOutEpInterrupt>
 8001ce0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ce2:	e099      	b.n	8001e18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 808e 	beq.w	8001e0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fc49 	bl	8005592 <USB_ReadDevOutEPInterrupt>
 8001d00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 feef 	bl	8002b04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00c      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 ffc5 	bl	8002cd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d60:	461a      	mov	r2, r3
 8001d62:	2310      	movs	r3, #16
 8001d64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d030      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b80      	cmp	r3, #128	; 0x80
 8001d7a:	d109      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2200      	movs	r2, #0
 8001db2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f006 f81e 	bl	8007dfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2302      	movs	r3, #2
 8001dd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	015a      	lsls	r2, r3, #5
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de8:	461a      	mov	r2, r3
 8001dea:	2320      	movs	r3, #32
 8001dec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e04:	461a      	mov	r2, r3
 8001e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	3301      	adds	r3, #1
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f47f af62 	bne.w	8001ce4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fb6d 	bl	8005504 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e34:	f040 80db 	bne.w	8001fee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fb8e 	bl	800555e <USB_ReadDevAllInEpInterrupt>
 8001e42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e48:	e0cd      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80c2 	beq.w	8001fda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fbb4 	bl	80055ce <USB_ReadDevInEPInterrupt>
 8001e66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d057      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	2201      	movs	r2, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69f9      	ldr	r1, [r7, #28]
 8001e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e92:	4013      	ands	r3, r2
 8001e94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d132      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	334c      	adds	r3, #76	; 0x4c
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4403      	add	r3, r0
 8001ed0:	3348      	adds	r3, #72	; 0x48
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4419      	add	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4403      	add	r3, r0
 8001ee4:	334c      	adds	r3, #76	; 0x4c
 8001ee6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d113      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x3a2>
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3354      	adds	r3, #84	; 0x54
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d108      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2101      	movs	r1, #1
 8001f12:	f003 fbbb 	bl	800568c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f005 fee8 	bl	8007cf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f54:	461a      	mov	r2, r3
 8001f56:	2310      	movs	r3, #16
 8001f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f70:	461a      	mov	r2, r3
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d023      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f82:	6a38      	ldr	r0, [r7, #32]
 8001f84:	f002 fa9c 	bl	80044c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3338      	adds	r3, #56	; 0x38
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f005 ff35 	bl	8007e20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fd08 	bl	80029ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3301      	adds	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f af2e 	bne.w	8001e4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fa86 	bl	8005504 <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002002:	d122      	bne.n	800204a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 f8af 	bl	8008190 <HAL_PCDEx_LPM_Callback>
 8002032:	e002      	b.n	800203a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f005 fed3 	bl	8007de0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fa58 	bl	8005504 <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800205e:	d112      	bne.n	8002086 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f005 fe8f 	bl	8007d94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002084:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fa3a 	bl	8005504 <USB_ReadInterrupts>
 8002090:	4603      	mov	r3, r0
 8002092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209a:	d121      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80020aa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d111      	bne.n	80020da <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	f003 020f 	and.w	r2, r3, #15
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80020d0:	2101      	movs	r1, #1
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f006 f85c 	bl	8008190 <HAL_PCDEx_LPM_Callback>
 80020d8:	e002      	b.n	80020e0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f005 fe5a 	bl	8007d94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fa0d 	bl	8005504 <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	f040 80b7 	bne.w	8002266 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2110      	movs	r1, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f002 f9d4 	bl	80044c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800211c:	e046      	b.n	80021ac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212a:	461a      	mov	r2, r3
 800212c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002130:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002142:	0151      	lsls	r1, r2, #5
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	440a      	add	r2, r1
 8002148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800214c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002150:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	461a      	mov	r2, r3
 8002160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002164:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	0151      	lsls	r1, r2, #5
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	440a      	add	r2, r1
 800217c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002184:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	440a      	add	r2, r1
 800219c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	3301      	adds	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d3b3      	bcc.n	800211e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e2:	f043 030b 	orr.w	r3, r3, #11
 80021e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021f8:	f043 030b 	orr.w	r3, r3, #11
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	e015      	b.n	800222c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002212:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002216:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002226:	f043 030b 	orr.w	r3, r3, #11
 800222a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800223a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800223e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002250:	461a      	mov	r2, r3
 8002252:	f003 fa1b 	bl	800568c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 f94a 	bl	8005504 <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	d124      	bne.n	80022c6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f9e0 	bl	8005646 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f002 f995 	bl	80045ba <USB_GetDevSpeed>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	f000 fec2 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4620      	mov	r0, r4
 80022ac:	f001 fe9a 	bl	8003fe4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f005 fd46 	bl	8007d42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 f91a 	bl	8005504 <USB_ReadInterrupts>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d10a      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 fd23 	bl	8007d26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f002 0208 	and.w	r2, r2, #8
 80022ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 f905 	bl	8005504 <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d122      	bne.n	800234a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002310:	2301      	movs	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	e014      	b.n	8002340 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fb27 	bl	8002988 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	3301      	adds	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	429a      	cmp	r2, r3
 8002348:	d3e5      	bcc.n	8002316 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 f8d8 	bl	8005504 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800235e:	d13b      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
 8002364:	e02b      	b.n	80023be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3340      	adds	r3, #64	; 0x40
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d115      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800238c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	da12      	bge.n	80023b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	333f      	adds	r3, #63	; 0x3f
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fae8 	bl	8002988 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3ce      	bcc.n	8002366 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f891 	bl	8005504 <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023ec:	d155      	bne.n	800249a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	e045      	b.n	8002480 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d12e      	bne.n	800247a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800241c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	da2b      	bge.n	800247a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800242e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002432:	429a      	cmp	r2, r3
 8002434:	d121      	bne.n	800247a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6053      	str	r3, [r2, #4]
            break;
 8002478:	e007      	b.n	800248a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	429a      	cmp	r2, r3
 8002488:	d3b4      	bcc.n	80023f4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 f830 	bl	8005504 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ae:	d10a      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f005 fcc7 	bl	8007e44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 f81a 	bl	8005504 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d115      	bne.n	8002506 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f005 fcb7 	bl	8007e60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e000      	b.n	8002506 <HAL_PCD_IRQHandler+0x992>
      return;
 8002504:	bf00      	nop
    }
  }
}
 8002506:	3734      	adds	r7, #52	; 0x34
 8002508:	46bd      	mov	sp, r7
 800250a:	bd90      	pop	{r4, r7, pc}

0800250c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_PCD_SetAddress+0x1a>
 8002522:	2302      	movs	r3, #2
 8002524:	e013      	b.n	800254e <HAL_PCD_SetAddress+0x42>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f002 ff78 	bl	8005434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b084      	sub	sp, #16
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	4608      	mov	r0, r1
 8002560:	4611      	mov	r1, r2
 8002562:	461a      	mov	r2, r3
 8002564:	4603      	mov	r3, r0
 8002566:	70fb      	strb	r3, [r7, #3]
 8002568:	460b      	mov	r3, r1
 800256a:	803b      	strh	r3, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	da0f      	bge.n	800259c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	3338      	adds	r3, #56	; 0x38
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
 800259a:	e00f      	b.n	80025bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	3304      	adds	r3, #4
 80025b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025c8:	883a      	ldrh	r2, [r7, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	78ba      	ldrb	r2, [r7, #2]
 80025d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025e6:	78bb      	ldrb	r3, [r7, #2]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d102      	bne.n	80025f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_PCD_EP_Open+0xaa>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e00e      	b.n	800261e <HAL_PCD_EP_Open+0xc8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	4618      	mov	r0, r3
 8002610:	f001 fff8 	bl	8004604 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800261c:	7afb      	ldrb	r3, [r7, #11]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002636:	2b00      	cmp	r3, #0
 8002638:	da0f      	bge.n	800265a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	3338      	adds	r3, #56	; 0x38
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	705a      	strb	r2, [r3, #1]
 8002658:	e00f      	b.n	800267a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	3304      	adds	r3, #4
 8002672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_PCD_EP_Close+0x6e>
 8002690:	2302      	movs	r3, #2
 8002692:	e00e      	b.n	80026b2 <HAL_PCD_EP_Close+0x8c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 f836 	bl	8004714 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	460b      	mov	r3, r1
 80026c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	b2da      	uxtb	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	6979      	ldr	r1, [r7, #20]
 800272e:	f002 fb15 	bl	8004d5c <USB_EP0StartXfer>
 8002732:	e008      	b.n	8002746 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	6979      	ldr	r1, [r7, #20]
 8002742:	f002 f8c3 	bl	80048cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	460b      	mov	r3, r1
 800278e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002790:	7afb      	ldrb	r3, [r7, #11]
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	3338      	adds	r3, #56	; 0x38
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	3304      	adds	r3, #4
 80027a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2200      	movs	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2201      	movs	r2, #1
 80027be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6979      	ldr	r1, [r7, #20]
 80027f2:	f002 fab3 	bl	8004d5c <USB_EP0StartXfer>
 80027f6:	e008      	b.n	800280a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	f002 f861 	bl	80048cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d901      	bls.n	8002832 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e050      	b.n	80028d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002836:	2b00      	cmp	r3, #0
 8002838:	da0f      	bge.n	800285a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	3338      	adds	r3, #56	; 0x38
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	705a      	strb	r2, [r3, #1]
 8002858:	e00d      	b.n	8002876 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	3304      	adds	r3, #4
 800286e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_PCD_EP_SetStall+0x82>
 8002892:	2302      	movs	r3, #2
 8002894:	e01e      	b.n	80028d4 <HAL_PCD_EP_SetStall+0xc0>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fcf1 	bl	800528c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	b2d9      	uxtb	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028c4:	461a      	mov	r2, r3
 80028c6:	f002 fee1 	bl	800568c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 020f 	and.w	r2, r3, #15
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d901      	bls.n	80028fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e042      	b.n	8002980 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da0f      	bge.n	8002922 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
 8002920:	e00f      	b.n	8002942 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_PCD_EP_ClrStall+0x86>
 800295e:	2302      	movs	r3, #2
 8002960:	e00e      	b.n	8002980 <HAL_PCD_EP_ClrStall+0xa4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fcf9 	bl	8005368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da0c      	bge.n	80029b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	3338      	adds	r3, #56	; 0x38
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	3304      	adds	r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fb18 	bl	800500c <USB_EPStopXfer>
 80029dc:	4603      	mov	r3, r0
 80029de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029e0:	7afb      	ldrb	r3, [r7, #11]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b08a      	sub	sp, #40	; 0x28
 80029ee:	af02      	add	r7, sp, #8
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	3338      	adds	r3, #56	; 0x38
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3304      	adds	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d901      	bls.n	8002a22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06c      	b.n	8002afc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d902      	bls.n	8002a3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3303      	adds	r3, #3
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a46:	e02b      	b.n	8002aa0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d902      	bls.n	8002a64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3303      	adds	r3, #3
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6919      	ldr	r1, [r3, #16]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4603      	mov	r3, r0
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f002 fb6c 	bl	8005160 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	441a      	add	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d809      	bhi.n	8002aca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a1a      	ldr	r2, [r3, #32]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d203      	bcs.n	8002aca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1be      	bne.n	8002a48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d811      	bhi.n	8002afa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2201      	movs	r2, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002af6:	4013      	ands	r3, r2
 8002af8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	333c      	adds	r3, #60	; 0x3c
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d17b      	bne.n	8002c32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4a61      	ldr	r2, [pc, #388]	; (8002ccc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	f240 80b9 	bls.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b3 	beq.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6c:	6093      	str	r3, [r2, #8]
 8002b6e:	e0a7      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	461a      	mov	r2, r3
 8002b88:	2320      	movs	r3, #32
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	e098      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 8093 	bne.w	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d90f      	bls.n	8002bc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	e07e      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	440b      	add	r3, r1
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bee:	1ad2      	subs	r2, r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d114      	bne.n	8002c24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f002 fd3c 	bl	800568c <USB_EP0_OutStart>
 8002c14:	e006      	b.n	8002c24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	441a      	add	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f005 f846 	bl	8007cbc <HAL_PCD_DataOutStageCallback>
 8002c30:	e046      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d124      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c50:	461a      	mov	r2, r3
 8002c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c56:	6093      	str	r3, [r2, #8]
 8002c58:	e032      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	2320      	movs	r3, #32
 8002c74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f005 f81d 	bl	8007cbc <HAL_PCD_DataOutStageCallback>
 8002c82:	e01d      	b.n	8002cc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d114      	bne.n	8002cb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cac:	461a      	mov	r2, r3
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f002 fcec 	bl	800568c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 fffe 	bl	8007cbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	4f54300a 	.word	0x4f54300a
 8002cd0:	4f54310a 	.word	0x4f54310a

08002cd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	333c      	adds	r3, #60	; 0x3c
 8002cec:	3304      	adds	r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d90e      	bls.n	8002d28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d20:	461a      	mov	r2, r3
 8002d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f004 ffb5 	bl	8007c98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d90c      	bls.n	8002d50 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d108      	bne.n	8002d50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	f002 fc9e 	bl	800568c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	4f54300a 	.word	0x4f54300a

08002d60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	70fb      	strb	r3, [r7, #3]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d7e:	883b      	ldrh	r3, [r7, #0]
 8002d80:	0419      	lsls	r1, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e028      	b.n	8002de0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e00d      	b.n	8002dbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3340      	adds	r3, #64	; 0x40
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3ec      	bcc.n	8002da2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dc8:	883b      	ldrh	r3, [r7, #0]
 8002dca:	0418      	lsls	r0, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4302      	orrs	r2, r0
 8002dd8:	3340      	adds	r3, #64	; 0x40
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	f043 0303 	orr.w	r3, r3, #3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cc      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90c      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e067      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7fe f9ce 	bl	80012e8 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe f9ca 	bl	80012e8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 fb57 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe f92e 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	0800836c 	.word	0x0800836c
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000010 	.word	0x20000010

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c

0800303c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	496c      	ldr	r1, [pc, #432]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003092:	2301      	movs	r3, #1
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80030a2:	4b64      	ldr	r3, [pc, #400]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b0:	4960      	ldr	r1, [pc, #384]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d0:	4b58      	ldr	r3, [pc, #352]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4955      	ldr	r1, [pc, #340]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d101      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80030f0:	2301      	movs	r3, #1
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80030fc:	2301      	movs	r3, #1
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800310c:	4b49      	ldr	r3, [pc, #292]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800310e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	4946      	ldr	r1, [pc, #280]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312a:	d101      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003138:	2301      	movs	r3, #1
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 808a 	beq.w	800325e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a38      	ldr	r2, [pc, #224]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a33      	ldr	r2, [pc, #204]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003172:	f7fe f8b9 	bl	80012e8 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003178:	e008      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe f8b5 	bl	80012e8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e278      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800318c:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003198:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d028      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b6:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d114      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe f883 	bl	80012e8 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7fe f87f 	bl	80012e8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e240      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0ee      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003214:	d114      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	4902      	ldr	r1, [pc, #8]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]
 8003230:	e00c      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	42470e40 	.word	0x42470e40
 8003240:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a49      	ldr	r2, [pc, #292]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003246:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800324e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	4944      	ldr	r1, [pc, #272]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800325a:	4313      	orrs	r3, r2
 800325c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003272:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003280:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4937      	ldr	r1, [pc, #220]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	492e      	ldr	r1, [pc, #184]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d011      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	4926      	ldr	r1, [pc, #152]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e2:	d101      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	491a      	ldr	r1, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d011      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	4911      	ldr	r1, [pc, #68]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003336:	2301      	movs	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d005      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	f040 80ff 	bne.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003352:	f7fd ffc9 	bl	80012e8 <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003358:	e00e      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800335a:	f7fd ffc5 	bl	80012e8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d907      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e188      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800336c:	40023800 	.word	0x40023800
 8003370:	424711e0 	.word	0x424711e0
 8003374:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003378:	4b7e      	ldr	r3, [pc, #504]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ea      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d009      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d028      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d124      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	3301      	adds	r3, #1
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033be:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	0e1b      	lsrs	r3, r3, #24
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	4961      	ldr	r1, [pc, #388]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003414:	2b00      	cmp	r3, #0
 8003416:	d035      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003420:	d130      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003422:	4b54      	ldr	r3, [pc, #336]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	0f1b      	lsrs	r3, r3, #28
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	019b      	lsls	r3, r3, #6
 800344c:	431a      	orrs	r2, r3
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	431a      	orrs	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	071b      	lsls	r3, r3, #28
 8003464:	4943      	ldr	r1, [pc, #268]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800346c:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800346e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003472:	f023 021f 	bic.w	r2, r3, #31
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	493d      	ldr	r1, [pc, #244]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d029      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003498:	d124      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800349c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	3301      	adds	r3, #1
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b2:	0f1b      	lsrs	r3, r3, #28
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	071b      	lsls	r3, r3, #28
 80034dc:	4925      	ldr	r1, [pc, #148]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	4917      	ldr	r1, [pc, #92]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003524:	f7fd fee0 	bl	80012e8 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800352c:	f7fd fedc 	bl	80012e8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e09f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 8095 	bne.w	800367c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003558:	f7fd fec6 	bl	80012e8 <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800355e:	e00f      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003560:	f7fd fec2 	bl	80012e8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d908      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e085      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	42470068 	.word	0x42470068
 800357c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358c:	d0e8      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d02b      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d127      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80035b6:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	431a      	orrs	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	061b      	lsls	r3, r3, #24
 80035e4:	4928      	ldr	r1, [pc, #160]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	3b01      	subs	r3, #1
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4922      	ldr	r1, [pc, #136]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d01d      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361a:	d118      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	0e1b      	lsrs	r3, r3, #24
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	019b      	lsls	r3, r3, #6
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	4910      	ldr	r1, [pc, #64]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003654:	f7fd fe48 	bl	80012e8 <HAL_GetTick>
 8003658:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800365c:	f7fd fe44 	bl	80012e8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e007      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367a:	d1ef      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3730      	adds	r7, #48	; 0x30
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	42470070 	.word	0x42470070

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b0a6      	sub	sp, #152	; 0x98
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b6:	4bc8      	ldr	r3, [pc, #800]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	f200 817e 	bhi.w	80039c0 <HAL_RCC_GetSysClockFreq+0x330>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	08003701 	.word	0x08003701
 80036d0:	080039c1 	.word	0x080039c1
 80036d4:	080039c1 	.word	0x080039c1
 80036d8:	080039c1 	.word	0x080039c1
 80036dc:	08003709 	.word	0x08003709
 80036e0:	080039c1 	.word	0x080039c1
 80036e4:	080039c1 	.word	0x080039c1
 80036e8:	080039c1 	.word	0x080039c1
 80036ec:	08003711 	.word	0x08003711
 80036f0:	080039c1 	.word	0x080039c1
 80036f4:	080039c1 	.word	0x080039c1
 80036f8:	080039c1 	.word	0x080039c1
 80036fc:	0800387b 	.word	0x0800387b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4bb6      	ldr	r3, [pc, #728]	; (80039dc <HAL_RCC_GetSysClockFreq+0x34c>)
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003706:	e15f      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003708:	4bb5      	ldr	r3, [pc, #724]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x350>)
 800370a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800370e:	e15b      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003710:	4bb1      	ldr	r3, [pc, #708]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800371c:	4bae      	ldr	r3, [pc, #696]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d031      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003728:	4bab      	ldr	r3, [pc, #684]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	2200      	movs	r2, #0
 8003730:	66bb      	str	r3, [r7, #104]	; 0x68
 8003732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	663b      	str	r3, [r7, #96]	; 0x60
 800373c:	2300      	movs	r3, #0
 800373e:	667b      	str	r3, [r7, #100]	; 0x64
 8003740:	4ba7      	ldr	r3, [pc, #668]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003742:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003746:	462a      	mov	r2, r5
 8003748:	fb03 f202 	mul.w	r2, r3, r2
 800374c:	2300      	movs	r3, #0
 800374e:	4621      	mov	r1, r4
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	4aa2      	ldr	r2, [pc, #648]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003758:	4621      	mov	r1, r4
 800375a:	fba1 1202 	umull	r1, r2, r1, r2
 800375e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003760:	460a      	mov	r2, r1
 8003762:	67ba      	str	r2, [r7, #120]	; 0x78
 8003764:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003766:	4413      	add	r3, r2
 8003768:	67fb      	str	r3, [r7, #124]	; 0x7c
 800376a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800376e:	2200      	movs	r2, #0
 8003770:	65bb      	str	r3, [r7, #88]	; 0x58
 8003772:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003774:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003778:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800377c:	f7fc fd42 	bl	8000204 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800378a:	e064      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378c:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	2200      	movs	r2, #0
 8003794:	653b      	str	r3, [r7, #80]	; 0x50
 8003796:	657a      	str	r2, [r7, #84]	; 0x54
 8003798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a0:	2300      	movs	r3, #0
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ba:	0150      	lsls	r0, r2, #5
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4621      	mov	r1, r4
 80037c2:	1a51      	subs	r1, r2, r1
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	4629      	mov	r1, r5
 80037c8:	eb63 0301 	sbc.w	r3, r3, r1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037da:	4659      	mov	r1, fp
 80037dc:	018b      	lsls	r3, r1, #6
 80037de:	4651      	mov	r1, sl
 80037e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e4:	4651      	mov	r1, sl
 80037e6:	018a      	lsls	r2, r1, #6
 80037e8:	4651      	mov	r1, sl
 80037ea:	ebb2 0801 	subs.w	r8, r2, r1
 80037ee:	4659      	mov	r1, fp
 80037f0:	eb63 0901 	sbc.w	r9, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003800:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003804:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003808:	4690      	mov	r8, r2
 800380a:	4699      	mov	r9, r3
 800380c:	4623      	mov	r3, r4
 800380e:	eb18 0303 	adds.w	r3, r8, r3
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	462b      	mov	r3, r5
 8003816:	eb49 0303 	adc.w	r3, r9, r3
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003828:	4629      	mov	r1, r5
 800382a:	028b      	lsls	r3, r1, #10
 800382c:	4621      	mov	r1, r4
 800382e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003832:	4621      	mov	r1, r4
 8003834:	028a      	lsls	r2, r1, #10
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383e:	2200      	movs	r2, #0
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
 8003842:	647a      	str	r2, [r7, #68]	; 0x44
 8003844:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003848:	f7fc fcdc 	bl	8000204 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003856:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003868:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800386c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003878:	e0a6      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800387a:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003886:	4b54      	ldr	r3, [pc, #336]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02a      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	2200      	movs	r2, #0
 800389a:	63bb      	str	r3, [r7, #56]	; 0x38
 800389c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038a4:	2100      	movs	r1, #0
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x350>)
 80038a8:	fb03 f201 	mul.w	r2, r3, r1
 80038ac:	2300      	movs	r3, #0
 80038ae:	fb00 f303 	mul.w	r3, r0, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x350>)
 80038b6:	fba0 1202 	umull	r1, r2, r0, r2
 80038ba:	677a      	str	r2, [r7, #116]	; 0x74
 80038bc:	460a      	mov	r2, r1
 80038be:	673a      	str	r2, [r7, #112]	; 0x70
 80038c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038c2:	4413      	add	r3, r2
 80038c4:	677b      	str	r3, [r7, #116]	; 0x74
 80038c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ca:	2200      	movs	r2, #0
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	637a      	str	r2, [r7, #52]	; 0x34
 80038d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80038d8:	f7fc fc94 	bl	8000204 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4613      	mov	r3, r2
 80038e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038e6:	e05b      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	2200      	movs	r2, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	f04f 0000 	mov.w	r0, #0
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	0159      	lsls	r1, r3, #5
 8003912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003916:	0150      	lsls	r0, r2, #5
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4641      	mov	r1, r8
 800391e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb63 0b01 	sbc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800393c:	ebb2 040a 	subs.w	r4, r2, sl
 8003940:	eb63 050b 	sbc.w	r5, r3, fp
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	00eb      	lsls	r3, r5, #3
 800394e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003952:	00e2      	lsls	r2, r4, #3
 8003954:	4614      	mov	r4, r2
 8003956:	461d      	mov	r5, r3
 8003958:	4643      	mov	r3, r8
 800395a:	18e3      	adds	r3, r4, r3
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	464b      	mov	r3, r9
 8003960:	eb45 0303 	adc.w	r3, r5, r3
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003972:	4629      	mov	r1, r5
 8003974:	028b      	lsls	r3, r1, #10
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800397c:	4621      	mov	r1, r4
 800397e:	028a      	lsls	r2, r1, #10
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003988:	2200      	movs	r2, #0
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	61fa      	str	r2, [r7, #28]
 800398e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003992:	f7fc fc37 	bl	8000204 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4613      	mov	r3, r2
 800399c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x348>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	0f1b      	lsrs	r3, r3, #28
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80039ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80039be:	e003      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_RCC_GetSysClockFreq+0x34c>)
 80039c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80039c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3798      	adds	r7, #152	; 0x98
 80039d0:	46bd      	mov	sp, r7
 80039d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	00f42400 	.word	0x00f42400
 80039e0:	00d59f80 	.word	0x00d59f80

080039e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e28d      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8083 	beq.w	8003b0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a04:	4b94      	ldr	r3, [pc, #592]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a10:	4b91      	ldr	r3, [pc, #580]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a1c:	4b8e      	ldr	r3, [pc, #568]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a28:	d00c      	beq.n	8003a44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2a:	4b8b      	ldr	r3, [pc, #556]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d112      	bne.n	8003a5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	4b84      	ldr	r3, [pc, #528]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05b      	beq.n	8003b08 <HAL_RCC_OscConfig+0x124>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d157      	bne.n	8003b08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e25a      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x90>
 8003a66:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e01d      	b.n	8003ab0 <HAL_RCC_OscConfig+0xcc>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0xb4>
 8003a7e:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0xcc>
 8003a98:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b6c      	ldr	r3, [pc, #432]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6b      	ldr	r2, [pc, #428]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fc16 	bl	80012e8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fc12 	bl	80012e8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e21f      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xdc>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fc02 	bl	80012e8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fd fbfe 	bl	80012e8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	; 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e20b      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afa:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x104>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d06f      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b16:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x186>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1d3      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4937      	ldr	r1, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_OscConfig+0x278>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fbab 	bl	80012e8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd fba7 	bl	80012e8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1b4      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4925      	ldr	r1, [pc, #148]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_OscConfig+0x278>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fb8a 	bl	80012e8 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd fb86 	bl	80012e8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e193      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d036      	beq.n	8003c70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_RCC_OscConfig+0x27c>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fb6a 	bl	80012e8 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fd fb66 	bl	80012e8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e173      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x234>
 8003c36:	e01b      	b.n	8003c70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fb53 	bl	80012e8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	e00e      	b.n	8003c64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd fb4f 	bl	80012e8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d907      	bls.n	8003c64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e15c      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470000 	.word	0x42470000
 8003c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ea      	bne.n	8003c46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8097 	beq.w	8003dac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x4b0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x4b0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x4b0>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fb0f 	bl	80012e8 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fd fb0b 	bl	80012e8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e118      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x4b0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x31e>
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e01c      	b.n	8003d3c <HAL_RCC_OscConfig+0x358>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x340>
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b5e      	ldr	r3, [pc, #376]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0x358>
 8003d24:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd fad0 	bl	80012e8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd facc 	bl	80012e8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0d7      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ee      	beq.n	8003d4c <HAL_RCC_OscConfig+0x368>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd faba 	bl	80012e8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fab6 	bl	80012e8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0c1      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ee      	bne.n	8003d78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80ad 	beq.w	8003f10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d060      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d145      	bne.n	8003e56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x4b4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fa8a 	bl	80012e8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd fa86 	bl	80012e8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e093      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	019b      	lsls	r3, r3, #6
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	491b      	ldr	r1, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_OscConfig+0x4b4>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2e:	f7fd fa5b 	bl	80012e8 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e36:	f7fd fa57 	bl	80012e8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e064      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x452>
 8003e54:	e05c      	b.n	8003f10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x4b4>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fa44 	bl	80012e8 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd fa40 	bl	80012e8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e04d      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x480>
 8003e82:	e045      	b.n	8003f10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e040      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <HAL_RCC_OscConfig+0x538>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d030      	beq.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d129      	bne.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d122      	bne.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d119      	bne.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d10f      	bne.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800

08003f20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f20:	b084      	sub	sp, #16
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	f107 001c 	add.w	r0, r7, #28
 8003f2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d122      	bne.n	8003f7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d105      	bne.n	8003f72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f001 fbe8 	bl	8005748 <USB_CoreReset>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
 8003f7c:	e01a      	b.n	8003fb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f001 fbdc 	bl	8005748 <USB_CoreReset>
 8003f90:	4603      	mov	r3, r0
 8003f92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fa6:	e005      	b.n	8003fb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10b      	bne.n	8003fd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f043 0206 	orr.w	r2, r3, #6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fde:	b004      	add	sp, #16
 8003fe0:	4770      	bx	lr
	...

08003fe4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d165      	bne.n	80040c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	; (8004100 <USB_SetTurnaroundTime+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d906      	bls.n	800400e <USB_SetTurnaroundTime+0x2a>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <USB_SetTurnaroundTime+0x120>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d202      	bcs.n	800400e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004008:	230f      	movs	r3, #15
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e062      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <USB_SetTurnaroundTime+0x120>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d306      	bcc.n	8004024 <USB_SetTurnaroundTime+0x40>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <USB_SetTurnaroundTime+0x124>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d202      	bcs.n	8004024 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800401e:	230e      	movs	r3, #14
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e057      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a38      	ldr	r2, [pc, #224]	; (8004108 <USB_SetTurnaroundTime+0x124>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d306      	bcc.n	800403a <USB_SetTurnaroundTime+0x56>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a37      	ldr	r2, [pc, #220]	; (800410c <USB_SetTurnaroundTime+0x128>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d202      	bcs.n	800403a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004034:	230d      	movs	r3, #13
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e04c      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a33      	ldr	r2, [pc, #204]	; (800410c <USB_SetTurnaroundTime+0x128>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d306      	bcc.n	8004050 <USB_SetTurnaroundTime+0x6c>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <USB_SetTurnaroundTime+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d802      	bhi.n	8004050 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800404a:	230c      	movs	r3, #12
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e041      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <USB_SetTurnaroundTime+0x12c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d906      	bls.n	8004066 <USB_SetTurnaroundTime+0x82>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <USB_SetTurnaroundTime+0x130>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d802      	bhi.n	8004066 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004060:	230b      	movs	r3, #11
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e036      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <USB_SetTurnaroundTime+0x130>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d906      	bls.n	800407c <USB_SetTurnaroundTime+0x98>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <USB_SetTurnaroundTime+0x134>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d802      	bhi.n	800407c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004076:	230a      	movs	r3, #10
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e02b      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a26      	ldr	r2, [pc, #152]	; (8004118 <USB_SetTurnaroundTime+0x134>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d906      	bls.n	8004092 <USB_SetTurnaroundTime+0xae>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a25      	ldr	r2, [pc, #148]	; (800411c <USB_SetTurnaroundTime+0x138>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d202      	bcs.n	8004092 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800408c:	2309      	movs	r3, #9
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e020      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4a21      	ldr	r2, [pc, #132]	; (800411c <USB_SetTurnaroundTime+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d306      	bcc.n	80040a8 <USB_SetTurnaroundTime+0xc4>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <USB_SetTurnaroundTime+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d802      	bhi.n	80040a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040a2:	2308      	movs	r3, #8
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e015      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <USB_SetTurnaroundTime+0x13c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d906      	bls.n	80040be <USB_SetTurnaroundTime+0xda>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <USB_SetTurnaroundTime+0x140>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d202      	bcs.n	80040be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040b8:	2307      	movs	r3, #7
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	e00a      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040be:	2306      	movs	r3, #6
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e007      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040ca:	2309      	movs	r3, #9
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e001      	b.n	80040d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040d0:	2309      	movs	r3, #9
 80040d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	029b      	lsls	r3, r3, #10
 80040e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	00d8acbf 	.word	0x00d8acbf
 8004104:	00e4e1c0 	.word	0x00e4e1c0
 8004108:	00f42400 	.word	0x00f42400
 800410c:	01067380 	.word	0x01067380
 8004110:	011a499f 	.word	0x011a499f
 8004114:	01312cff 	.word	0x01312cff
 8004118:	014ca43f 	.word	0x014ca43f
 800411c:	016e3600 	.word	0x016e3600
 8004120:	01a6ab1f 	.word	0x01a6ab1f
 8004124:	01e84800 	.word	0x01e84800

08004128 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d115      	bne.n	80041ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800419a:	2001      	movs	r0, #1
 800419c:	f7fd f8b0 	bl	8001300 <HAL_Delay>
      ms++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f001 fa3f 	bl	800562a <USB_GetMode>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d01e      	beq.n	80041f0 <USB_SetCurrentMode+0x84>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b31      	cmp	r3, #49	; 0x31
 80041b6:	d9f0      	bls.n	800419a <USB_SetCurrentMode+0x2e>
 80041b8:	e01a      	b.n	80041f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d115      	bne.n	80041ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fd f897 	bl	8001300 <HAL_Delay>
      ms++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 fa26 	bl	800562a <USB_GetMode>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <USB_SetCurrentMode+0x84>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b31      	cmp	r3, #49	; 0x31
 80041e8:	d9f0      	bls.n	80041cc <USB_SetCurrentMode+0x60>
 80041ea:	e001      	b.n	80041f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e005      	b.n	80041fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b32      	cmp	r3, #50	; 0x32
 80041f4:	d101      	bne.n	80041fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004204:	b084      	sub	sp, #16
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e009      	b.n	8004238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3340      	adds	r3, #64	; 0x40
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	2200      	movs	r2, #0
 8004230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0e      	cmp	r3, #14
 800423c:	d9f2      	bls.n	8004224 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11c      	bne.n	800427e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e005      	b.n	800428a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	461a      	mov	r2, r3
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10c      	bne.n	80042ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f965 	bl	8004588 <USB_SetDevSpeed>
 80042be:	e008      	b.n	80042d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042c0:	2101      	movs	r1, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f960 	bl	8004588 <USB_SetDevSpeed>
 80042c8:	e003      	b.n	80042d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ca:	2103      	movs	r1, #3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f95b 	bl	8004588 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042d2:	2110      	movs	r1, #16
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8f3 	bl	80044c0 <USB_FlushTxFifo>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f91f 	bl	8004528 <USB_FlushRxFifo>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	461a      	mov	r2, r3
 8004308:	2300      	movs	r3, #0
 800430a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e043      	b.n	80043a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004334:	d118      	bne.n	8004368 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e013      	b.n	800437a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	461a      	mov	r2, r3
 8004360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e008      	b.n	800437a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	461a      	mov	r2, r3
 800439a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800439e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3301      	adds	r3, #1
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3b7      	bcc.n	800431e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e043      	b.n	800443c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ca:	d118      	bne.n	80043fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e013      	b.n	8004410 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e008      	b.n	8004410 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d3b7      	bcc.n	80043b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <USB_DevInit+0x2b8>)
 800447e:	4313      	orrs	r3, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f043 0208 	orr.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044b8:	b004      	add	sp, #16
 80044ba:	4770      	bx	lr
 80044bc:	803c3800 	.word	0x803c3800

080044c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <USB_FlushTxFifo+0x64>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e01b      	b.n	8004518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	daf2      	bge.n	80044ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	019b      	lsls	r3, r3, #6
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <USB_FlushTxFifo+0x64>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e006      	b.n	8004518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b20      	cmp	r3, #32
 8004514:	d0f0      	beq.n	80044f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	00030d40 	.word	0x00030d40

08004528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a11      	ldr	r2, [pc, #68]	; (8004584 <USB_FlushRxFifo+0x5c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e018      	b.n	8004578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	daf2      	bge.n	8004534 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2210      	movs	r2, #16
 8004556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3301      	adds	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a08      	ldr	r2, [pc, #32]	; (8004584 <USB_FlushRxFifo+0x5c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e006      	b.n	8004578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b10      	cmp	r3, #16
 8004574:	d0f0      	beq.n	8004558 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	00030d40 	.word	0x00030d40

08004588 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0306 	and.w	r3, r3, #6
 80045d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045da:	2300      	movs	r3, #0
 80045dc:	75fb      	strb	r3, [r7, #23]
 80045de:	e00a      	b.n	80045f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d002      	beq.n	80045ec <USB_GetDevSpeed+0x32>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d102      	bne.n	80045f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045ec:	2302      	movs	r3, #2
 80045ee:	75fb      	strb	r3, [r7, #23]
 80045f0:	e001      	b.n	80045f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045f2:	230f      	movs	r3, #15
 80045f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d13a      	bne.n	8004696 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	b29b      	uxth	r3, r3
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800463e:	4313      	orrs	r3, r2
 8004640:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d155      	bne.n	8004704 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004674:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	059b      	lsls	r3, r3, #22
 800467a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800467c:	4313      	orrs	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e036      	b.n	8004704 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	68f9      	ldr	r1, [r7, #12]
 80046b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11a      	bne.n	8004704 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	791b      	ldrb	r3, [r3, #4]
 80046e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ea:	430b      	orrs	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d161      	bne.n	80047f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004746:	d11f      	bne.n	8004788 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004762:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004766:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004786:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a8:	4013      	ands	r3, r2
 80047aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047cc:	4013      	ands	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	0159      	lsls	r1, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	440b      	add	r3, r1
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	4619      	mov	r1, r3
 80047ec:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <USB_DeactivateEndpoint+0x1b0>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
 80047f2:	e060      	b.n	80048b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480a:	d11f      	bne.n	800484c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004846:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800484a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	2101      	movs	r1, #1
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	43db      	mvns	r3, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4013      	ands	r3, r2
 800486e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	43db      	mvns	r3, r3
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004890:	4013      	ands	r3, r2
 8004892:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	0159      	lsls	r1, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ae:	4619      	mov	r1, r3
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <USB_DeactivateEndpoint+0x1b4>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	ec337800 	.word	0xec337800
 80048c8:	eff37800 	.word	0xeff37800

080048cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f040 815c 	bne.w	8004ba6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d132      	bne.n	800495c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	0151      	lsls	r1, r2, #5
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	440a      	add	r2, r1
 8004950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004954:	0cdb      	lsrs	r3, r3, #19
 8004956:	04db      	lsls	r3, r3, #19
 8004958:	6113      	str	r3, [r2, #16]
 800495a:	e074      	b.n	8004a46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004976:	0cdb      	lsrs	r3, r3, #19
 8004978:	04db      	lsls	r3, r3, #19
 800497a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800499a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800499e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	440b      	add	r3, r1
 80049b8:	1e59      	subs	r1, r3, #1
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049c4:	4b9d      	ldr	r3, [pc, #628]	; (8004c3c <USB_EPStartXfer+0x370>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	69b9      	ldr	r1, [r7, #24]
 80049ca:	0148      	lsls	r0, r1, #5
 80049cc:	69f9      	ldr	r1, [r7, #28]
 80049ce:	4401      	add	r1, r0
 80049d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049d4:	4313      	orrs	r3, r2
 80049d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	0148      	lsls	r0, r1, #5
 80049f2:	69f9      	ldr	r1, [r7, #28]
 80049f4:	4401      	add	r1, r0
 80049f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049fa:	4313      	orrs	r3, r2
 80049fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	791b      	ldrb	r3, [r3, #4]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d11f      	bne.n	8004a46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	0151      	lsls	r1, r2, #5
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	440a      	add	r2, r1
 8004a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d14b      	bne.n	8004ae4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	461a      	mov	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d128      	bne.n	8004ac2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d110      	bne.n	8004aa2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e00f      	b.n	8004ac2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	0151      	lsls	r1, r2, #5
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004adc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e133      	b.n	8004d4c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	791b      	ldrb	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d015      	beq.n	8004b38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 811b 	beq.w	8004d4c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	2101      	movs	r1, #1
 8004b28:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2c:	69f9      	ldr	r1, [r7, #28]
 8004b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b32:	4313      	orrs	r3, r2
 8004b34:	634b      	str	r3, [r1, #52]	; 0x34
 8004b36:	e109      	b.n	8004d4c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e00f      	b.n	8004b8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6919      	ldr	r1, [r3, #16]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	b298      	uxth	r0, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fade 	bl	8005160 <USB_WritePacket>
 8004ba4:	e0d2      	b.n	8004d4c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc0:	0cdb      	lsrs	r3, r3, #19
 8004bc2:	04db      	lsls	r3, r3, #19
 8004bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d126      	bne.n	8004c40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c08:	69b9      	ldr	r1, [r7, #24]
 8004c0a:	0148      	lsls	r0, r1, #5
 8004c0c:	69f9      	ldr	r1, [r7, #28]
 8004c0e:	4401      	add	r1, r0
 8004c10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c14:	4313      	orrs	r3, r2
 8004c16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c36:	6113      	str	r3, [r2, #16]
 8004c38:	e03a      	b.n	8004cb0 <USB_EPStartXfer+0x3e4>
 8004c3a:	bf00      	nop
 8004c3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	1e5a      	subs	r2, r3, #1
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	8afa      	ldrh	r2, [r7, #22]
 8004c5c:	fb03 f202 	mul.w	r2, r3, r2
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	8afb      	ldrh	r3, [r7, #22]
 8004c74:	04d9      	lsls	r1, r3, #19
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <USB_EPStartXfer+0x48c>)
 8004c78:	400b      	ands	r3, r1
 8004c7a:	69b9      	ldr	r1, [r7, #24]
 8004c7c:	0148      	lsls	r0, r1, #5
 8004c7e:	69f9      	ldr	r1, [r7, #28]
 8004c80:	4401      	add	r1, r0
 8004c82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	69b9      	ldr	r1, [r7, #24]
 8004ca2:	0148      	lsls	r0, r1, #5
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cac:	4313      	orrs	r3, r2
 8004cae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10d      	bne.n	8004cd2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6919      	ldr	r1, [r3, #16]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	460a      	mov	r2, r1
 8004cd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	791b      	ldrb	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d128      	bne.n	8004d2c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d110      	bne.n	8004d0c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e00f      	b.n	8004d2c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	1ff80000 	.word	0x1ff80000

08004d5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	f040 80ce 	bne.w	8004f1a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d132      	bne.n	8004dec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	0cdb      	lsrs	r3, r3, #19
 8004de6:	04db      	lsls	r3, r3, #19
 8004de8:	6113      	str	r3, [r2, #16]
 8004dea:	e04e      	b.n	8004e8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e06:	0cdb      	lsrs	r3, r3, #19
 8004e08:	04db      	lsls	r3, r3, #19
 8004e0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d903      	bls.n	8004e44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	0148      	lsls	r0, r1, #5
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	4401      	add	r1, r0
 8004e82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d11e      	bne.n	8004ece <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	0151      	lsls	r1, r2, #5
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	440a      	add	r2, r1
 8004ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e097      	b.n	8004ffe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8083 	beq.w	8004ffe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	2101      	movs	r1, #1
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f14:	4313      	orrs	r3, r2
 8004f16:	634b      	str	r3, [r1, #52]	; 0x34
 8004f18:	e071      	b.n	8004ffe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f34:	0cdb      	lsrs	r3, r3, #19
 8004f36:	04db      	lsls	r3, r3, #19
 8004f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	6939      	ldr	r1, [r7, #16]
 8004fae:	0148      	lsls	r0, r1, #5
 8004fb0:	6979      	ldr	r1, [r7, #20]
 8004fb2:	4401      	add	r1, r0
 8004fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d10d      	bne.n	8004fde <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	460a      	mov	r2, r1
 8004fdc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ffc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d14a      	bne.n	80050c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800503e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005042:	f040 8086 	bne.w	8005152 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005068:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800508c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f242 7210 	movw	r2, #10000	; 0x2710
 800509a:	4293      	cmp	r3, r2
 800509c:	d902      	bls.n	80050a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
          break;
 80050a2:	e056      	b.n	8005152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050bc:	d0e7      	beq.n	800508e <USB_EPStopXfer+0x82>
 80050be:	e048      	b.n	8005152 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d8:	d13b      	bne.n	8005152 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005120:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f242 7210 	movw	r2, #10000	; 0x2710
 800512e:	4293      	cmp	r3, r2
 8005130:	d902      	bls.n	8005138 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
          break;
 8005136:	e00c      	b.n	8005152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005150:	d0e7      	beq.n	8005122 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
}
 8005154:	4618      	mov	r0, r3
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	460b      	mov	r3, r1
 8005170:	71fb      	strb	r3, [r7, #7]
 8005172:	4613      	mov	r3, r2
 8005174:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800517e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d123      	bne.n	80051ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005186:	88bb      	ldrh	r3, [r7, #4]
 8005188:	3303      	adds	r3, #3
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	e018      	b.n	80051c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	031a      	lsls	r2, r3, #12
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a0:	461a      	mov	r2, r3
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3301      	adds	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3e2      	bcc.n	8005194 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3724      	adds	r7, #36	; 0x24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051dc:	b480      	push	{r7}
 80051de:	b08b      	sub	sp, #44	; 0x2c
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	e014      	b.n	8005232 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	601a      	str	r2, [r3, #0]
    pDest++;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	3301      	adds	r3, #1
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	3301      	adds	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	3301      	adds	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	3301      	adds	r3, #1
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	429a      	cmp	r2, r3
 8005238:	d3e6      	bcc.n	8005208 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800523a:	8bfb      	ldrh	r3, [r7, #30]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524a:	461a      	mov	r2, r3
 800524c:	f107 0310 	add.w	r3, r7, #16
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	b2da      	uxtb	r2, r3
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	701a      	strb	r2, [r3, #0]
      i++;
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	3301      	adds	r3, #1
 800526a:	623b      	str	r3, [r7, #32]
      pDest++;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	3301      	adds	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005272:	8bfb      	ldrh	r3, [r7, #30]
 8005274:	3b01      	subs	r3, #1
 8005276:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005278:	8bfb      	ldrh	r3, [r7, #30]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1ea      	bne.n	8005254 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005280:	4618      	mov	r0, r3
 8005282:	372c      	adds	r7, #44	; 0x2c
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d12c      	bne.n	8005302 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db12      	blt.n	80052e0 <USB_EPSetStall+0x54>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00f      	beq.n	80052e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	e02b      	b.n	800535a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	db12      	blt.n	800533a <USB_EPSetStall+0xae>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005338:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d128      	bne.n	80053d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	791b      	ldrb	r3, [r3, #4]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <USB_EPClearStall+0x4c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	791b      	ldrb	r3, [r3, #4]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d138      	bne.n	8005426 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e027      	b.n	8005426 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d003      	beq.n	8005406 <USB_EPClearStall+0x9e>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d10f      	bne.n	8005426 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005456:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ae:	f023 0302 	bic.w	r3, r3, #2
 80054b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054dc:	f023 0303 	bic.w	r3, r3, #3
 80054e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f0:	f043 0302 	orr.w	r3, r3, #2
 80054f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800551c:	68fb      	ldr	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0c1b      	lsrs	r3, r3, #16
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	b29b      	uxth	r3, r3
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c0:	68bb      	ldr	r3, [r7, #8]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b087      	sub	sp, #28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	b2db      	uxtb	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4013      	ands	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800561c:	68bb      	ldr	r3, [r7, #8]
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0301 	and.w	r3, r3, #1
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	460b      	mov	r3, r1
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	333c      	adds	r3, #60	; 0x3c
 80056a2:	3304      	adds	r3, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4a26      	ldr	r2, [pc, #152]	; (8005744 <USB_EP0_OutStart+0xb8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d90a      	bls.n	80056c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c0:	d101      	bne.n	80056c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e037      	b.n	8005736 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f4:	f043 0318 	orr.w	r3, r3, #24
 80056f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800570c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10f      	bne.n	8005734 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	4f54300a 	.word	0x4f54300a

08005748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <USB_CoreReset+0x64>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e01b      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	daf2      	bge.n	8005754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a09      	ldr	r2, [pc, #36]	; (80057ac <USB_CoreReset+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d0f0      	beq.n	800577e <USB_CoreReset+0x36>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	00030d40 	.word	0x00030d40

080057b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057c0:	f002 fd34 	bl	800822c <USBD_static_malloc>
 80057c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	32b0      	adds	r2, #176	; 0xb0
 80057d6:	2100      	movs	r1, #0
 80057d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057dc:	2302      	movs	r3, #2
 80057de:	e0d4      	b.n	800598a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057e4:	2100      	movs	r1, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f002 fd88 	bl	80082fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	32b0      	adds	r2, #176	; 0xb0
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	32b0      	adds	r2, #176	; 0xb0
 8005806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7c1b      	ldrb	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d138      	bne.n	800588a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005818:	4b5e      	ldr	r3, [pc, #376]	; (8005994 <USBD_CDC_Init+0x1e4>)
 800581a:	7819      	ldrb	r1, [r3, #0]
 800581c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005820:	2202      	movs	r2, #2
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f002 fb91 	bl	8007f4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005828:	4b5a      	ldr	r3, [pc, #360]	; (8005994 <USBD_CDC_Init+0x1e4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	2201      	movs	r2, #1
 8005840:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005842:	4b55      	ldr	r3, [pc, #340]	; (8005998 <USBD_CDC_Init+0x1e8>)
 8005844:	7819      	ldrb	r1, [r3, #0]
 8005846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584a:	2202      	movs	r2, #2
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f002 fb7c 	bl	8007f4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005852:	4b51      	ldr	r3, [pc, #324]	; (8005998 <USBD_CDC_Init+0x1e8>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800586a:	2201      	movs	r2, #1
 800586c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800586e:	4b4b      	ldr	r3, [pc, #300]	; (800599c <USBD_CDC_Init+0x1ec>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	3326      	adds	r3, #38	; 0x26
 8005884:	2210      	movs	r2, #16
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e035      	b.n	80058f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800588a:	4b42      	ldr	r3, [pc, #264]	; (8005994 <USBD_CDC_Init+0x1e4>)
 800588c:	7819      	ldrb	r1, [r3, #0]
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2202      	movs	r2, #2
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fb59 	bl	8007f4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005898:	4b3e      	ldr	r3, [pc, #248]	; (8005994 <USBD_CDC_Init+0x1e4>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 020f 	and.w	r2, r3, #15
 80058a0:	6879      	ldr	r1, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	3324      	adds	r3, #36	; 0x24
 80058ae:	2201      	movs	r2, #1
 80058b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058b2:	4b39      	ldr	r3, [pc, #228]	; (8005998 <USBD_CDC_Init+0x1e8>)
 80058b4:	7819      	ldrb	r1, [r3, #0]
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	2202      	movs	r2, #2
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f002 fb45 	bl	8007f4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <USBD_CDC_Init+0x1e8>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058d8:	2201      	movs	r2, #1
 80058da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058dc:	4b2f      	ldr	r3, [pc, #188]	; (800599c <USBD_CDC_Init+0x1ec>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3326      	adds	r3, #38	; 0x26
 80058f2:	2210      	movs	r2, #16
 80058f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058f6:	4b29      	ldr	r3, [pc, #164]	; (800599c <USBD_CDC_Init+0x1ec>)
 80058f8:	7819      	ldrb	r1, [r3, #0]
 80058fa:	2308      	movs	r3, #8
 80058fc:	2203      	movs	r2, #3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f002 fb23 	bl	8007f4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005904:	4b25      	ldr	r3, [pc, #148]	; (800599c <USBD_CDC_Init+0x1ec>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	2201      	movs	r2, #1
 800591c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	33b0      	adds	r3, #176	; 0xb0
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005954:	2302      	movs	r3, #2
 8005956:	e018      	b.n	800598a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7c1b      	ldrb	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <USBD_CDC_Init+0x1e8>)
 8005962:	7819      	ldrb	r1, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800596a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f002 fbda 	bl	8008128 <USBD_LL_PrepareReceive>
 8005974:	e008      	b.n	8005988 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <USBD_CDC_Init+0x1e8>)
 8005978:	7819      	ldrb	r1, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f002 fbd0 	bl	8008128 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000009f 	.word	0x2000009f
 8005998:	200000a0 	.word	0x200000a0
 800599c:	200000a1 	.word	0x200000a1

080059a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80059ac:	4b3a      	ldr	r3, [pc, #232]	; (8005a98 <USBD_CDC_DeInit+0xf8>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 faef 	bl	8007f96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059b8:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <USBD_CDC_DeInit+0xf8>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3324      	adds	r3, #36	; 0x24
 80059ce:	2200      	movs	r2, #0
 80059d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059d2:	4b32      	ldr	r3, [pc, #200]	; (8005a9c <USBD_CDC_DeInit+0xfc>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 fadc 	bl	8007f96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059de:	4b2f      	ldr	r3, [pc, #188]	; (8005a9c <USBD_CDC_DeInit+0xfc>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f003 020f 	and.w	r2, r3, #15
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059f6:	2200      	movs	r2, #0
 80059f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <USBD_CDC_DeInit+0x100>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f002 fac8 	bl	8007f96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005a06:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <USBD_CDC_DeInit+0x100>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f003 020f 	and.w	r2, r3, #15
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	3324      	adds	r3, #36	; 0x24
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a20:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <USBD_CDC_DeInit+0x100>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3326      	adds	r3, #38	; 0x26
 8005a36:	2200      	movs	r2, #0
 8005a38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	32b0      	adds	r2, #176	; 0xb0
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01f      	beq.n	8005a8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	33b0      	adds	r3, #176	; 0xb0
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	32b0      	adds	r2, #176	; 0xb0
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 fbea 	bl	8008248 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	32b0      	adds	r2, #176	; 0xb0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000009f 	.word	0x2000009f
 8005a9c:	200000a0 	.word	0x200000a0
 8005aa0:	200000a1 	.word	0x200000a1

08005aa4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	32b0      	adds	r2, #176	; 0xb0
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0bf      	b.n	8005c54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d050      	beq.n	8005b82 <USBD_CDC_Setup+0xde>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 80af 	bne.w	8005c44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d03a      	beq.n	8005b64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da1b      	bge.n	8005b30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	33b0      	adds	r3, #176	; 0xb0
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005b0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	88d2      	ldrh	r2, [r2, #6]
 8005b14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b07      	cmp	r3, #7
 8005b1c:	bf28      	it	cs
 8005b1e:	2307      	movcs	r3, #7
 8005b20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	89fa      	ldrh	r2, [r7, #14]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fdb3 	bl	8007694 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b2e:	e090      	b.n	8005c52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	785a      	ldrb	r2, [r3, #1]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	88db      	ldrh	r3, [r3, #6]
 8005b3e:	2b3f      	cmp	r3, #63	; 0x3f
 8005b40:	d803      	bhi.n	8005b4a <USBD_CDC_Setup+0xa6>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	88db      	ldrh	r3, [r3, #6]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	e000      	b.n	8005b4c <USBD_CDC_Setup+0xa8>
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 fdc5 	bl	80076ec <USBD_CtlPrepareRx>
      break;
 8005b62:	e076      	b.n	8005c52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	33b0      	adds	r3, #176	; 0xb0
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	7850      	ldrb	r0, [r2, #1]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4798      	blx	r3
      break;
 8005b80:	e067      	b.n	8005c52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b0b      	cmp	r3, #11
 8005b88:	d851      	bhi.n	8005c2e <USBD_CDC_Setup+0x18a>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <USBD_CDC_Setup+0xec>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005c3d 	.word	0x08005c3d
 8005b98:	08005c2f 	.word	0x08005c2f
 8005b9c:	08005c2f 	.word	0x08005c2f
 8005ba0:	08005c2f 	.word	0x08005c2f
 8005ba4:	08005c2f 	.word	0x08005c2f
 8005ba8:	08005c2f 	.word	0x08005c2f
 8005bac:	08005c2f 	.word	0x08005c2f
 8005bb0:	08005c2f 	.word	0x08005c2f
 8005bb4:	08005c2f 	.word	0x08005c2f
 8005bb8:	08005beb 	.word	0x08005beb
 8005bbc:	08005c15 	.word	0x08005c15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d107      	bne.n	8005bdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bcc:	f107 030a 	add.w	r3, r7, #10
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fd5d 	bl	8007694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bda:	e032      	b.n	8005c42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fce7 	bl	80075b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	75fb      	strb	r3, [r7, #23]
          break;
 8005be8:	e02b      	b.n	8005c42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d107      	bne.n	8005c06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bf6:	f107 030d 	add.w	r3, r7, #13
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fd48 	bl	8007694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c04:	e01d      	b.n	8005c42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fcd2 	bl	80075b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e016      	b.n	8005c42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d00f      	beq.n	8005c40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fcc5 	bl	80075b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c2c:	e008      	b.n	8005c40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fcbe 	bl	80075b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c36:	2303      	movs	r3, #3
 8005c38:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3a:	e002      	b.n	8005c42 <USBD_CDC_Setup+0x19e>
          break;
 8005c3c:	bf00      	nop
 8005c3e:	e008      	b.n	8005c52 <USBD_CDC_Setup+0x1ae>
          break;
 8005c40:	bf00      	nop
      }
      break;
 8005c42:	e006      	b.n	8005c52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fcb3 	bl	80075b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c50:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	32b0      	adds	r2, #176	; 0xb0
 8005c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e065      	b.n	8005d52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	32b0      	adds	r2, #176	; 0xb0
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3318      	adds	r3, #24
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02f      	beq.n	8005d10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	f003 020f 	and.w	r2, r3, #15
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 010f 	and.w	r1, r3, #15
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4403      	add	r3, r0
 8005cd8:	3348      	adds	r3, #72	; 0x48
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d112      	bne.n	8005d10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 020f 	and.w	r2, r3, #15
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3318      	adds	r3, #24
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d02:	78f9      	ldrb	r1, [r7, #3]
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f002 f9ec 	bl	80080e6 <USBD_LL_Transmit>
 8005d0e:	e01f      	b.n	8005d50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	33b0      	adds	r3, #176	; 0xb0
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d010      	beq.n	8005d50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	33b0      	adds	r3, #176	; 0xb0
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d4c:	78fa      	ldrb	r2, [r7, #3]
 8005d4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	32b0      	adds	r2, #176	; 0xb0
 8005d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	32b0      	adds	r2, #176	; 0xb0
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e01a      	b.n	8005dc2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f002 f9ea 	bl	800816a <USBD_LL_GetRxDataSize>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	33b0      	adds	r3, #176	; 0xb0
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	32b0      	adds	r2, #176	; 0xb0
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e025      	b.n	8005e38 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	33b0      	adds	r3, #176	; 0xb0
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01a      	beq.n	8005e36 <USBD_CDC_EP0_RxReady+0x6c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e06:	2bff      	cmp	r3, #255	; 0xff
 8005e08:	d015      	beq.n	8005e36 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	33b0      	adds	r3, #176	; 0xb0
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e2a:	b292      	uxth	r2, r2
 8005e2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	22ff      	movs	r2, #255	; 0xff
 8005e32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e48:	2182      	movs	r1, #130	; 0x82
 8005e4a:	4818      	ldr	r0, [pc, #96]	; (8005eac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e4c:	f000 fd4f 	bl	80068ee <USBD_GetEpDesc>
 8005e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e52:	2101      	movs	r1, #1
 8005e54:	4815      	ldr	r0, [pc, #84]	; (8005eac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e56:	f000 fd4a 	bl	80068ee <USBD_GetEpDesc>
 8005e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e5c:	2181      	movs	r1, #129	; 0x81
 8005e5e:	4813      	ldr	r0, [pc, #76]	; (8005eac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e60:	f000 fd45 	bl	80068ee <USBD_GetEpDesc>
 8005e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2210      	movs	r2, #16
 8005e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e80:	711a      	strb	r2, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e94:	711a      	strb	r2, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2243      	movs	r2, #67	; 0x43
 8005e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	2000005c 	.word	0x2000005c

08005eb0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005eb8:	2182      	movs	r1, #130	; 0x82
 8005eba:	4818      	ldr	r0, [pc, #96]	; (8005f1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ebc:	f000 fd17 	bl	80068ee <USBD_GetEpDesc>
 8005ec0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	4815      	ldr	r0, [pc, #84]	; (8005f1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ec6:	f000 fd12 	bl	80068ee <USBD_GetEpDesc>
 8005eca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ecc:	2181      	movs	r1, #129	; 0x81
 8005ece:	4813      	ldr	r0, [pc, #76]	; (8005f1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ed0:	f000 fd0d 	bl	80068ee <USBD_GetEpDesc>
 8005ed4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d006      	beq.n	8005ef6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	2200      	movs	r2, #0
 8005eec:	711a      	strb	r2, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f042 0202 	orr.w	r2, r2, #2
 8005ef4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	711a      	strb	r2, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f042 0202 	orr.w	r2, r2, #2
 8005f08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2243      	movs	r2, #67	; 0x43
 8005f0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000005c 	.word	0x2000005c

08005f20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f28:	2182      	movs	r1, #130	; 0x82
 8005f2a:	4818      	ldr	r0, [pc, #96]	; (8005f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f2c:	f000 fcdf 	bl	80068ee <USBD_GetEpDesc>
 8005f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f32:	2101      	movs	r1, #1
 8005f34:	4815      	ldr	r0, [pc, #84]	; (8005f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f36:	f000 fcda 	bl	80068ee <USBD_GetEpDesc>
 8005f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f3c:	2181      	movs	r1, #129	; 0x81
 8005f3e:	4813      	ldr	r0, [pc, #76]	; (8005f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f40:	f000 fcd5 	bl	80068ee <USBD_GetEpDesc>
 8005f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f60:	711a      	strb	r2, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f74:	711a      	strb	r2, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2243      	movs	r2, #67	; 0x43
 8005f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000005c 	.word	0x2000005c

08005f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f9e:	4b03      	ldr	r3, [pc, #12]	; (8005fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000018 	.word	0x20000018

08005fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e009      	b.n	8005fd8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	33b0      	adds	r3, #176	; 0xb0
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	32b0      	adds	r2, #176	; 0xb0
 8005ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	e008      	b.n	800601c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	32b0      	adds	r2, #176	; 0xb0
 800603c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006040:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	e004      	b.n	8006056 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	32b0      	adds	r2, #176	; 0xb0
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	32b0      	adds	r2, #176	; 0xb0
 800608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	e025      	b.n	80060e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800609c:	2b00      	cmp	r3, #0
 800609e:	d11f      	bne.n	80060e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <USBD_CDC_TransmitPacket+0x88>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	3318      	adds	r3, #24
 80060c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <USBD_CDC_TransmitPacket+0x88>)
 80060c8:	7819      	ldrb	r1, [r3, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f002 f805 	bl	80080e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	2000009f 	.word	0x2000009f

080060f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32b0      	adds	r2, #176	; 0xb0
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32b0      	adds	r2, #176	; 0xb0
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	e018      	b.n	8006150 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7c1b      	ldrb	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <USBD_CDC_ReceivePacket+0x68>)
 8006128:	7819      	ldrb	r1, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fff7 	bl	8008128 <USBD_LL_PrepareReceive>
 800613a:	e008      	b.n	800614e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <USBD_CDC_ReceivePacket+0x68>)
 800613e:	7819      	ldrb	r1, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006146:	2340      	movs	r3, #64	; 0x40
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 ffed 	bl	8008128 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200000a0 	.word	0x200000a0

0800615c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e01f      	b.n	80061b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	79fa      	ldrb	r2, [r7, #7]
 80061a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fe67 	bl	8007e7c <USBD_LL_Init>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e025      	b.n	8006220 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32ae      	adds	r2, #174	; 0xae
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00f      	beq.n	8006210 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	32ae      	adds	r2, #174	; 0xae
 80061fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	f107 020e 	add.w	r2, r7, #14
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fe6f 	bl	8007f14 <USBD_LL_Start>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	4611      	mov	r1, r2
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	4611      	mov	r1, r2
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f932 	bl	800753e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d01a      	beq.n	8006334 <USBD_LL_SetupStage+0x72>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d822      	bhi.n	8006348 <USBD_LL_SetupStage+0x86>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <USBD_LL_SetupStage+0x4a>
 8006306:	2b01      	cmp	r3, #1
 8006308:	d00a      	beq.n	8006320 <USBD_LL_SetupStage+0x5e>
 800630a:	e01d      	b.n	8006348 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb5f 	bl	80069d8 <USBD_StdDevReq>
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	e020      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fbc7 	bl	8006abc <USBD_StdItfReq>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
      break;
 8006332:	e016      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc29 	bl	8006b94 <USBD_StdEPReq>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]
      break;
 8006346:	e00c      	b.n	8006362 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800634e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006352:	b2db      	uxtb	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fe3c 	bl	8007fd4 <USBD_LL_StallEP>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	bf00      	nop
  }

  return ret;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	460b      	mov	r3, r1
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d16e      	bne.n	8006462 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800638a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006392:	2b03      	cmp	r3, #3
 8006394:	f040 8098 	bne.w	80064c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d913      	bls.n	80063cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	1ad2      	subs	r2, r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	4293      	cmp	r3, r2
 80063bc:	bf28      	it	cs
 80063be:	4613      	movcs	r3, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f001 f9ae 	bl	8007726 <USBD_CtlContinueRx>
 80063ca:	e07d      	b.n	80064c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d014      	beq.n	8006404 <USBD_LL_DataOutStage+0x98>
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d81d      	bhi.n	800641a <USBD_LL_DataOutStage+0xae>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <USBD_LL_DataOutStage+0x7c>
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d003      	beq.n	80063ee <USBD_LL_DataOutStage+0x82>
 80063e6:	e018      	b.n	800641a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75bb      	strb	r3, [r7, #22]
            break;
 80063ec:	e018      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	4619      	mov	r1, r3
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa5e 	bl	80068ba <USBD_CoreFindIF>
 80063fe:	4603      	mov	r3, r0
 8006400:	75bb      	strb	r3, [r7, #22]
            break;
 8006402:	e00d      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800640a:	b2db      	uxtb	r3, r3
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa60 	bl	80068d4 <USBD_CoreFindEP>
 8006414:	4603      	mov	r3, r0
 8006416:	75bb      	strb	r3, [r7, #22]
            break;
 8006418:	e002      	b.n	8006420 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	75bb      	strb	r3, [r7, #22]
            break;
 800641e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006420:	7dbb      	ldrb	r3, [r7, #22]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d119      	bne.n	800645a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d113      	bne.n	800645a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006432:	7dba      	ldrb	r2, [r7, #22]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	32ae      	adds	r2, #174	; 0xae
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006442:	7dba      	ldrb	r2, [r7, #22]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 f974 	bl	8007748 <USBD_CtlSendStatus>
 8006460:	e032      	b.n	80064c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006462:	7afb      	ldrb	r3, [r7, #11]
 8006464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006468:	b2db      	uxtb	r3, r3
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa31 	bl	80068d4 <USBD_CoreFindEP>
 8006472:	4603      	mov	r3, r0
 8006474:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006476:	7dbb      	ldrb	r3, [r7, #22]
 8006478:	2bff      	cmp	r3, #255	; 0xff
 800647a:	d025      	beq.n	80064c8 <USBD_LL_DataOutStage+0x15c>
 800647c:	7dbb      	ldrb	r3, [r7, #22]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d122      	bne.n	80064c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d117      	bne.n	80064be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800648e:	7dba      	ldrb	r2, [r7, #22]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	32ae      	adds	r2, #174	; 0xae
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00f      	beq.n	80064be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800649e:	7dba      	ldrb	r2, [r7, #22]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064a6:	7dba      	ldrb	r2, [r7, #22]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	32ae      	adds	r2, #174	; 0xae
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	7afa      	ldrb	r2, [r7, #11]
 80064b4:	4611      	mov	r1, r2
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	e000      	b.n	80064ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	460b      	mov	r3, r1
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d16f      	bne.n	80065c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3314      	adds	r3, #20
 80064ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d15a      	bne.n	80065ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d914      	bls.n	800652c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	461a      	mov	r2, r3
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 f8d6 	bl	80076ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800651e:	2300      	movs	r3, #0
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 fdff 	bl	8008128 <USBD_LL_PrepareReceive>
 800652a:	e03f      	b.n	80065ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d11c      	bne.n	8006572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006540:	429a      	cmp	r2, r3
 8006542:	d316      	bcc.n	8006572 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800654e:	429a      	cmp	r2, r3
 8006550:	d20f      	bcs.n	8006572 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006552:	2200      	movs	r2, #0
 8006554:	2100      	movs	r1, #0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f001 f8b7 	bl	80076ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 fddc 	bl	8008128 <USBD_LL_PrepareReceive>
 8006570:	e01c      	b.n	80065ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d10f      	bne.n	800659e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f001 fd17 	bl	8007fd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 f8e1 	bl	800776e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03a      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fe42 	bl	8006240 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065c4:	e032      	b.n	800662c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	4619      	mov	r1, r3
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f97f 	bl	80068d4 <USBD_CoreFindEP>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2bff      	cmp	r3, #255	; 0xff
 80065de:	d025      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d122      	bne.n	800662c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d11c      	bne.n	800662c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065f2:	7dfa      	ldrb	r2, [r7, #23]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	32ae      	adds	r2, #174	; 0xae
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d014      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006602:	7dfa      	ldrb	r2, [r7, #23]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800660a:	7dfa      	ldrb	r2, [r7, #23]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	32ae      	adds	r2, #174	; 0xae
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	7afa      	ldrb	r2, [r7, #11]
 8006618:	4611      	mov	r1, r2
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	4798      	blx	r3
 800661e:	4603      	mov	r3, r0
 8006620:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006628:	7dbb      	ldrb	r3, [r7, #22]
 800662a:	e000      	b.n	800662e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d014      	beq.n	800669c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6852      	ldr	r2, [r2, #4]
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	4611      	mov	r1, r2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006698:	2303      	movs	r3, #3
 800669a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	2200      	movs	r2, #0
 80066a0:	2100      	movs	r1, #0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fc51 	bl	8007f4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2240      	movs	r2, #64	; 0x40
 80066b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	2200      	movs	r2, #0
 80066bc:	2180      	movs	r1, #128	; 0x80
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fc43 	bl	8007f4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	621a      	str	r2, [r3, #32]

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b04      	cmp	r3, #4
 8006738:	d106      	bne.n	8006748 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006740:	b2da      	uxtb	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b03      	cmp	r3, #3
 8006768:	d110      	bne.n	800678c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	32ae      	adds	r2, #174	; 0xae
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e01c      	b.n	80067f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d115      	bne.n	80067f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	32ae      	adds	r2, #174	; 0xae
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	; 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	4611      	mov	r1, r2
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32ae      	adds	r2, #174	; 0xae
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e01c      	b.n	8006856 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b03      	cmp	r3, #3
 8006826:	d115      	bne.n	8006854 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	32ae      	adds	r2, #174	; 0xae
 8006832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	32ae      	adds	r2, #174	; 0xae
 8006846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	4611      	mov	r1, r2
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6852      	ldr	r2, [r2, #4]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	4611      	mov	r1, r2
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	4798      	blx	r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	885b      	ldrh	r3, [r3, #2]
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	429a      	cmp	r2, r3
 8006914:	d920      	bls.n	8006958 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800691e:	e013      	b.n	8006948 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006920:	f107 030a 	add.w	r3, r7, #10
 8006924:	4619      	mov	r1, r3
 8006926:	6978      	ldr	r0, [r7, #20]
 8006928:	f000 f81b 	bl	8006962 <USBD_GetNextDesc>
 800692c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	785b      	ldrb	r3, [r3, #1]
 8006932:	2b05      	cmp	r3, #5
 8006934:	d108      	bne.n	8006948 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	429a      	cmp	r2, r3
 8006942:	d008      	beq.n	8006956 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	885b      	ldrh	r3, [r3, #2]
 800694c:	b29a      	uxth	r2, r3
 800694e:	897b      	ldrh	r3, [r7, #10]
 8006950:	429a      	cmp	r2, r3
 8006952:	d8e5      	bhi.n	8006920 <USBD_GetEpDesc+0x32>
 8006954:	e000      	b.n	8006958 <USBD_GetEpDesc+0x6a>
          break;
 8006956:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006958:	693b      	ldr	r3, [r7, #16]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	881a      	ldrh	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	4413      	add	r3, r2
 800697c:	b29a      	uxth	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4413      	add	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	3301      	adds	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069ba:	8a3b      	ldrh	r3, [r7, #16]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	b21a      	sxth	r2, r3
 80069c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069ca:	89fb      	ldrh	r3, [r7, #14]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdDevReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d857      	bhi.n	8006aa6 <USBD_StdDevReq+0xce>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <USBD_StdDevReq+0x42>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d153      	bne.n	8006aa6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	32ae      	adds	r2, #174	; 0xae
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e04a      	b.n	8006ab0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	2b09      	cmp	r3, #9
 8006a20:	d83b      	bhi.n	8006a9a <USBD_StdDevReq+0xc2>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <USBD_StdDevReq+0x50>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a7d 	.word	0x08006a7d
 8006a2c:	08006a91 	.word	0x08006a91
 8006a30:	08006a9b 	.word	0x08006a9b
 8006a34:	08006a87 	.word	0x08006a87
 8006a38:	08006a9b 	.word	0x08006a9b
 8006a3c:	08006a5b 	.word	0x08006a5b
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a9b 	.word	0x08006a9b
 8006a48:	08006a73 	.word	0x08006a73
 8006a4c:	08006a65 	.word	0x08006a65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa3c 	bl	8006ed0 <USBD_GetDescriptor>
          break;
 8006a58:	e024      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fbcb 	bl	80071f8 <USBD_SetAddress>
          break;
 8006a62:	e01f      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fc0a 	bl	8007280 <USBD_SetConfig>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006a70:	e018      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fcad 	bl	80073d4 <USBD_GetConfig>
          break;
 8006a7a:	e013      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fcde 	bl	8007440 <USBD_GetStatus>
          break;
 8006a84:	e00e      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd0d 	bl	80074a8 <USBD_SetFeature>
          break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fd31 	bl	80074fa <USBD_ClrFeature>
          break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fd88 	bl	80075b2 <USBD_CtlError>
          break;
 8006aa2:	bf00      	nop
      }
      break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fd82 	bl	80075b2 <USBD_CtlError>
      break;
 8006aae:	bf00      	nop
  }

  return ret;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d005      	beq.n	8006ae2 <USBD_StdItfReq+0x26>
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d852      	bhi.n	8006b80 <USBD_StdItfReq+0xc4>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <USBD_StdItfReq+0x26>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d14e      	bne.n	8006b80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d840      	bhi.n	8006b72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	889b      	ldrh	r3, [r3, #4]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d836      	bhi.n	8006b68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	889b      	ldrh	r3, [r3, #4]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fed9 	bl	80068ba <USBD_CoreFindIF>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2bff      	cmp	r3, #255	; 0xff
 8006b10:	d01d      	beq.n	8006b4e <USBD_StdItfReq+0x92>
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11a      	bne.n	8006b4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b18:	7bba      	ldrb	r2, [r7, #14]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	; 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00f      	beq.n	8006b48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b28:	7bba      	ldrb	r2, [r7, #14]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b30:	7bba      	ldrb	r2, [r7, #14]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32ae      	adds	r2, #174	; 0xae
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b46:	e004      	b.n	8006b52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b4c:	e001      	b.n	8006b52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	88db      	ldrh	r3, [r3, #6]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d110      	bne.n	8006b7c <USBD_StdItfReq+0xc0>
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10d      	bne.n	8006b7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fdf1 	bl	8007748 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b66:	e009      	b.n	8006b7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fd21 	bl	80075b2 <USBD_CtlError>
          break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fd1c 	bl	80075b2 <USBD_CtlError>
          break;
 8006b7a:	e000      	b.n	8006b7e <USBD_StdItfReq+0xc2>
          break;
 8006b7c:	bf00      	nop
      }
      break;
 8006b7e:	e004      	b.n	8006b8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fd15 	bl	80075b2 <USBD_CtlError>
      break;
 8006b88:	bf00      	nop
  }

  return ret;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	889b      	ldrh	r3, [r3, #4]
 8006ba6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d007      	beq.n	8006bc4 <USBD_StdEPReq+0x30>
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	f200 817f 	bhi.w	8006eb8 <USBD_StdEPReq+0x324>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d02a      	beq.n	8006c14 <USBD_StdEPReq+0x80>
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	f040 817a 	bne.w	8006eb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fe83 	bl	80068d4 <USBD_CoreFindEP>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bd2:	7b7b      	ldrb	r3, [r7, #13]
 8006bd4:	2bff      	cmp	r3, #255	; 0xff
 8006bd6:	f000 8174 	beq.w	8006ec2 <USBD_StdEPReq+0x32e>
 8006bda:	7b7b      	ldrb	r3, [r7, #13]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 8170 	bne.w	8006ec2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006be2:	7b7a      	ldrb	r2, [r7, #13]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bea:	7b7a      	ldrb	r2, [r7, #13]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	32ae      	adds	r2, #174	; 0xae
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8163 	beq.w	8006ec2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006bfc:	7b7a      	ldrb	r2, [r7, #13]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32ae      	adds	r2, #174	; 0xae
 8006c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c12:	e156      	b.n	8006ec2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d008      	beq.n	8006c2e <USBD_StdEPReq+0x9a>
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	f300 8145 	bgt.w	8006eac <USBD_StdEPReq+0x318>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 809b 	beq.w	8006d5e <USBD_StdEPReq+0x1ca>
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d03c      	beq.n	8006ca6 <USBD_StdEPReq+0x112>
 8006c2c:	e13e      	b.n	8006eac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d002      	beq.n	8006c40 <USBD_StdEPReq+0xac>
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d016      	beq.n	8006c6c <USBD_StdEPReq+0xd8>
 8006c3e:	e02c      	b.n	8006c9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00d      	beq.n	8006c62 <USBD_StdEPReq+0xce>
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d00a      	beq.n	8006c62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f9bf 	bl	8007fd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f9bb 	bl	8007fd4 <USBD_LL_StallEP>
 8006c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c60:	e020      	b.n	8006ca4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fca4 	bl	80075b2 <USBD_CtlError>
              break;
 8006c6a:	e01b      	b.n	8006ca4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	885b      	ldrh	r3, [r3, #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10e      	bne.n	8006c92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <USBD_StdEPReq+0xfe>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d008      	beq.n	8006c92 <USBD_StdEPReq+0xfe>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88db      	ldrh	r3, [r3, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f9a1 	bl	8007fd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fd58 	bl	8007748 <USBD_CtlSendStatus>

              break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fc88 	bl	80075b2 <USBD_CtlError>
              break;
 8006ca2:	bf00      	nop
          }
          break;
 8006ca4:	e107      	b.n	8006eb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d002      	beq.n	8006cb8 <USBD_StdEPReq+0x124>
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d016      	beq.n	8006ce4 <USBD_StdEPReq+0x150>
 8006cb6:	e04b      	b.n	8006d50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00d      	beq.n	8006cda <USBD_StdEPReq+0x146>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b80      	cmp	r3, #128	; 0x80
 8006cc2:	d00a      	beq.n	8006cda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 f983 	bl	8007fd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cce:	2180      	movs	r1, #128	; 0x80
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f97f 	bl	8007fd4 <USBD_LL_StallEP>
 8006cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cd8:	e040      	b.n	8006d5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc68 	bl	80075b2 <USBD_CtlError>
              break;
 8006ce2:	e03b      	b.n	8006d5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	885b      	ldrh	r3, [r3, #2]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d136      	bne.n	8006d5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 f989 	bl	8008012 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fd21 	bl	8007748 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff fde2 	bl	80068d4 <USBD_CoreFindEP>
 8006d10:	4603      	mov	r3, r0
 8006d12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d14:	7b7b      	ldrb	r3, [r7, #13]
 8006d16:	2bff      	cmp	r3, #255	; 0xff
 8006d18:	d01f      	beq.n	8006d5a <USBD_StdEPReq+0x1c6>
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11c      	bne.n	8006d5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d20:	7b7a      	ldrb	r2, [r7, #13]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d28:	7b7a      	ldrb	r2, [r7, #13]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	32ae      	adds	r2, #174	; 0xae
 8006d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d38:	7b7a      	ldrb	r2, [r7, #13]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	32ae      	adds	r2, #174	; 0xae
 8006d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d4e:	e004      	b.n	8006d5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fc2d 	bl	80075b2 <USBD_CtlError>
              break;
 8006d58:	e000      	b.n	8006d5c <USBD_StdEPReq+0x1c8>
              break;
 8006d5a:	bf00      	nop
          }
          break;
 8006d5c:	e0ab      	b.n	8006eb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d002      	beq.n	8006d70 <USBD_StdEPReq+0x1dc>
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d032      	beq.n	8006dd4 <USBD_StdEPReq+0x240>
 8006d6e:	e097      	b.n	8006ea0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <USBD_StdEPReq+0x1f2>
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d004      	beq.n	8006d86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc17 	bl	80075b2 <USBD_CtlError>
                break;
 8006d84:	e091      	b.n	8006eaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da0b      	bge.n	8006da6 <USBD_StdEPReq+0x212>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	3304      	adds	r3, #4
 8006da4:	e00b      	b.n	8006dbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc61 	bl	8007694 <USBD_CtlSendData>
              break;
 8006dd2:	e06a      	b.n	8006eaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	da11      	bge.n	8006e00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d117      	bne.n	8006e26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fbda 	bl	80075b2 <USBD_CtlError>
                  break;
 8006dfe:	e054      	b.n	8006eaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fbc7 	bl	80075b2 <USBD_CtlError>
                  break;
 8006e24:	e041      	b.n	8006eaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da0b      	bge.n	8006e46 <USBD_StdEPReq+0x2b2>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	3310      	adds	r3, #16
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	3304      	adds	r3, #4
 8006e44:	e00b      	b.n	8006e5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <USBD_StdEPReq+0x2d8>
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b80      	cmp	r3, #128	; 0x80
 8006e6a:	d103      	bne.n	8006e74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e00e      	b.n	8006e92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f8e9 	bl	8008050 <USBD_LL_IsStallEP>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e002      	b.n	8006e92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2202      	movs	r2, #2
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbfb 	bl	8007694 <USBD_CtlSendData>
              break;
 8006e9e:	e004      	b.n	8006eaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fb85 	bl	80075b2 <USBD_CtlError>
              break;
 8006ea8:	bf00      	nop
          }
          break;
 8006eaa:	e004      	b.n	8006eb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fb7f 	bl	80075b2 <USBD_CtlError>
          break;
 8006eb4:	bf00      	nop
      }
      break;
 8006eb6:	e005      	b.n	8006ec4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb79 	bl	80075b2 <USBD_CtlError>
      break;
 8006ec0:	e000      	b.n	8006ec4 <USBD_StdEPReq+0x330>
      break;
 8006ec2:	bf00      	nop
  }

  return ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	2b0e      	cmp	r3, #14
 8006ef2:	f200 8152 	bhi.w	800719a <USBD_GetDescriptor+0x2ca>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_GetDescriptor+0x2c>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f6d 	.word	0x08006f6d
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006fc5 	.word	0x08006fc5
 8006f08:	0800719b 	.word	0x0800719b
 8006f0c:	0800719b 	.word	0x0800719b
 8006f10:	0800713b 	.word	0x0800713b
 8006f14:	08007167 	.word	0x08007167
 8006f18:	0800719b 	.word	0x0800719b
 8006f1c:	0800719b 	.word	0x0800719b
 8006f20:	0800719b 	.word	0x0800719b
 8006f24:	0800719b 	.word	0x0800719b
 8006f28:	0800719b 	.word	0x0800719b
 8006f2c:	0800719b 	.word	0x0800719b
 8006f30:	0800719b 	.word	0x0800719b
 8006f34:	08006f39 	.word	0x08006f39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00b      	beq.n	8006f5c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	7c12      	ldrb	r2, [r2, #16]
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f5a:	e126      	b.n	80071aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb27 	bl	80075b2 <USBD_CtlError>
        err++;
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	3301      	adds	r3, #1
 8006f68:	72fb      	strb	r3, [r7, #11]
      break;
 8006f6a:	e11e      	b.n	80071aa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	7c12      	ldrb	r2, [r2, #16]
 8006f78:	f107 0108 	add.w	r1, r7, #8
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	60f8      	str	r0, [r7, #12]
      break;
 8006f82:	e112      	b.n	80071aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	7c1b      	ldrb	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	f107 0208 	add.w	r2, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fa6:	e100      	b.n	80071aa <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	f107 0208 	add.w	r2, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
      break;
 8006fc2:	e0f2      	b.n	80071aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	885b      	ldrh	r3, [r3, #2]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	f200 80ac 	bhi.w	8007128 <USBD_GetDescriptor+0x258>
 8006fd0:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBD_GetDescriptor+0x108>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08006ff1 	.word	0x08006ff1
 8006fdc:	08007025 	.word	0x08007025
 8006fe0:	08007059 	.word	0x08007059
 8006fe4:	0800708d 	.word	0x0800708d
 8006fe8:	080070c1 	.word	0x080070c1
 8006fec:	080070f5 	.word	0x080070f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7c12      	ldrb	r2, [r2, #16]
 8007008:	f107 0108 	add.w	r1, r7, #8
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007012:	e091      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 facb 	bl	80075b2 <USBD_CtlError>
            err++;
 800701c:	7afb      	ldrb	r3, [r7, #11]
 800701e:	3301      	adds	r3, #1
 8007020:	72fb      	strb	r3, [r7, #11]
          break;
 8007022:	e089      	b.n	8007138 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007046:	e077      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fab1 	bl	80075b2 <USBD_CtlError>
            err++;
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	3301      	adds	r3, #1
 8007054:	72fb      	strb	r3, [r7, #11]
          break;
 8007056:	e06f      	b.n	8007138 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 0108 	add.w	r1, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707a:	e05d      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fa97 	bl	80075b2 <USBD_CtlError>
            err++;
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	3301      	adds	r3, #1
 8007088:	72fb      	strb	r3, [r7, #11]
          break;
 800708a:	e055      	b.n	8007138 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7c12      	ldrb	r2, [r2, #16]
 80070a4:	f107 0108 	add.w	r1, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ae:	e043      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa7d 	bl	80075b2 <USBD_CtlError>
            err++;
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	3301      	adds	r3, #1
 80070bc:	72fb      	strb	r3, [r7, #11]
          break;
 80070be:	e03b      	b.n	8007138 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7c12      	ldrb	r2, [r2, #16]
 80070d8:	f107 0108 	add.w	r1, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e2:	e029      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa63 	bl	80075b2 <USBD_CtlError>
            err++;
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	3301      	adds	r3, #1
 80070f0:	72fb      	strb	r3, [r7, #11]
          break;
 80070f2:	e021      	b.n	8007138 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7c12      	ldrb	r2, [r2, #16]
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007116:	e00f      	b.n	8007138 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa49 	bl	80075b2 <USBD_CtlError>
            err++;
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	3301      	adds	r3, #1
 8007124:	72fb      	strb	r3, [r7, #11]
          break;
 8007126:	e007      	b.n	8007138 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fa41 	bl	80075b2 <USBD_CtlError>
          err++;
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	3301      	adds	r3, #1
 8007134:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007136:	bf00      	nop
      }
      break;
 8007138:	e037      	b.n	80071aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7c1b      	ldrb	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f107 0208 	add.w	r2, r7, #8
 800714e:	4610      	mov	r0, r2
 8007150:	4798      	blx	r3
 8007152:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007154:	e029      	b.n	80071aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa2a 	bl	80075b2 <USBD_CtlError>
        err++;
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	3301      	adds	r3, #1
 8007162:	72fb      	strb	r3, [r7, #11]
      break;
 8007164:	e021      	b.n	80071aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7c1b      	ldrb	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f107 0208 	add.w	r2, r7, #8
 800717a:	4610      	mov	r0, r2
 800717c:	4798      	blx	r3
 800717e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
 8007184:	2207      	movs	r2, #7
 8007186:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007188:	e00f      	b.n	80071aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa10 	bl	80075b2 <USBD_CtlError>
        err++;
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	3301      	adds	r3, #1
 8007196:	72fb      	strb	r3, [r7, #11]
      break;
 8007198:	e007      	b.n	80071aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa08 	bl	80075b2 <USBD_CtlError>
      err++;
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	3301      	adds	r3, #1
 80071a6:	72fb      	strb	r3, [r7, #11]
      break;
 80071a8:	bf00      	nop
  }

  if (err != 0U)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11e      	bne.n	80071ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	88db      	ldrh	r3, [r3, #6]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d016      	beq.n	80071e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80071b8:	893b      	ldrh	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00e      	beq.n	80071dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	88da      	ldrh	r2, [r3, #6]
 80071c2:	893b      	ldrh	r3, [r7, #8]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	bf28      	it	cs
 80071c8:	4613      	movcs	r3, r2
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ce:	893b      	ldrh	r3, [r7, #8]
 80071d0:	461a      	mov	r2, r3
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa5d 	bl	8007694 <USBD_CtlSendData>
 80071da:	e009      	b.n	80071f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9e7 	bl	80075b2 <USBD_CtlError>
 80071e4:	e004      	b.n	80071f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 faae 	bl	8007748 <USBD_CtlSendStatus>
 80071ec:	e000      	b.n	80071f0 <USBD_GetDescriptor+0x320>
    return;
 80071ee:	bf00      	nop
  }
}
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop

080071f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	889b      	ldrh	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d131      	bne.n	800726e <USBD_SetAddress+0x76>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	88db      	ldrh	r3, [r3, #6]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d12d      	bne.n	800726e <USBD_SetAddress+0x76>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	2b7f      	cmp	r3, #127	; 0x7f
 8007218:	d829      	bhi.n	800726e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	885b      	ldrh	r3, [r3, #2]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007224:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b03      	cmp	r3, #3
 8007230:	d104      	bne.n	800723c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f9bc 	bl	80075b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	e01d      	b.n	8007278 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7bfa      	ldrb	r2, [r7, #15]
 8007240:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 ff2d 	bl	80080a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa7a 	bl	8007748 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007262:	e009      	b.n	8007278 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726c:	e004      	b.n	8007278 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f99e 	bl	80075b2 <USBD_CtlError>
  }
}
 8007276:	bf00      	nop
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	885b      	ldrh	r3, [r3, #2]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	4b4e      	ldr	r3, [pc, #312]	; (80073d0 <USBD_SetConfig+0x150>)
 8007296:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007298:	4b4d      	ldr	r3, [pc, #308]	; (80073d0 <USBD_SetConfig+0x150>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d905      	bls.n	80072ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f985 	bl	80075b2 <USBD_CtlError>
    return USBD_FAIL;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e08c      	b.n	80073c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d002      	beq.n	80072be <USBD_SetConfig+0x3e>
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d029      	beq.n	8007310 <USBD_SetConfig+0x90>
 80072bc:	e075      	b.n	80073aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072be:	4b44      	ldr	r3, [pc, #272]	; (80073d0 <USBD_SetConfig+0x150>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d020      	beq.n	8007308 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80072c6:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <USBD_SetConfig+0x150>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <USBD_SetConfig+0x150>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fe ffbd 	bl	8006256 <USBD_SetClassConfig>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f962 	bl	80075b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072f6:	e065      	b.n	80073c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fa25 	bl	8007748 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2203      	movs	r2, #3
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007306:	e05d      	b.n	80073c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fa1d 	bl	8007748 <USBD_CtlSendStatus>
      break;
 800730e:	e059      	b.n	80073c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <USBD_SetConfig+0x150>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d112      	bne.n	800733e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007320:	4b2b      	ldr	r3, [pc, #172]	; (80073d0 <USBD_SetConfig+0x150>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <USBD_SetConfig+0x150>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7fe ffac 	bl	800628e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa06 	bl	8007748 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800733c:	e042      	b.n	80073c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800733e:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <USBD_SetConfig+0x150>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	461a      	mov	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d02a      	beq.n	80073a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fe ff9a 	bl	800628e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800735a:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <USBD_SetConfig+0x150>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <USBD_SetConfig+0x150>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fe ff73 	bl	8006256 <USBD_SetClassConfig>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00f      	beq.n	800739a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f918 	bl	80075b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fe ff7f 	bl	800628e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007398:	e014      	b.n	80073c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f9d4 	bl	8007748 <USBD_CtlSendStatus>
      break;
 80073a0:	e010      	b.n	80073c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f9d0 	bl	8007748 <USBD_CtlSendStatus>
      break;
 80073a8:	e00c      	b.n	80073c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f900 	bl	80075b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <USBD_SetConfig+0x150>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fe ff68 	bl	800628e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073be:	2303      	movs	r3, #3
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	bf00      	nop
  }

  return ret;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000013c 	.word	0x2000013c

080073d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	88db      	ldrh	r3, [r3, #6]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d004      	beq.n	80073f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f8e2 	bl	80075b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073ee:	e023      	b.n	8007438 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	dc02      	bgt.n	8007402 <USBD_GetConfig+0x2e>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc03      	bgt.n	8007408 <USBD_GetConfig+0x34>
 8007400:	e015      	b.n	800742e <USBD_GetConfig+0x5a>
 8007402:	2b03      	cmp	r3, #3
 8007404:	d00b      	beq.n	800741e <USBD_GetConfig+0x4a>
 8007406:	e012      	b.n	800742e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3308      	adds	r3, #8
 8007412:	2201      	movs	r2, #1
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f93c 	bl	8007694 <USBD_CtlSendData>
        break;
 800741c:	e00c      	b.n	8007438 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	2201      	movs	r2, #1
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f934 	bl	8007694 <USBD_CtlSendData>
        break;
 800742c:	e004      	b.n	8007438 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8be 	bl	80075b2 <USBD_CtlError>
        break;
 8007436:	bf00      	nop
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	2b02      	cmp	r3, #2
 8007456:	d81e      	bhi.n	8007496 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	88db      	ldrh	r3, [r3, #6]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d004      	beq.n	800746a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8a5 	bl	80075b2 <USBD_CtlError>
        break;
 8007468:	e01a      	b.n	80074a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007476:	2b00      	cmp	r3, #0
 8007478:	d005      	beq.n	8007486 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	330c      	adds	r3, #12
 800748a:	2202      	movs	r2, #2
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f900 	bl	8007694 <USBD_CtlSendData>
      break;
 8007494:	e004      	b.n	80074a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f88a 	bl	80075b2 <USBD_CtlError>
      break;
 800749e:	bf00      	nop
  }
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f940 	bl	8007748 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80074c8:	e013      	b.n	80074f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d10b      	bne.n	80074ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	889b      	ldrh	r3, [r3, #4]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	b29b      	uxth	r3, r3
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f930 	bl	8007748 <USBD_CtlSendStatus>
}
 80074e8:	e003      	b.n	80074f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f860 	bl	80075b2 <USBD_CtlError>
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	2b02      	cmp	r3, #2
 8007510:	d80b      	bhi.n	800752a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10c      	bne.n	8007534 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f910 	bl	8007748 <USBD_CtlSendStatus>
      }
      break;
 8007528:	e004      	b.n	8007534 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f840 	bl	80075b2 <USBD_CtlError>
      break;
 8007532:	e000      	b.n	8007536 <USBD_ClrFeature+0x3c>
      break;
 8007534:	bf00      	nop
  }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7ff fa17 	bl	800699c <SWAPBYTE>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fa0a 	bl	800699c <SWAPBYTE>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff f9fd 	bl	800699c <SWAPBYTE>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	80da      	strh	r2, [r3, #6]
}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fd08 	bl	8007fd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fd04 	bl	8007fd4 <USBD_LL_StallEP>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d036      	beq.n	8007658 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075ee:	6938      	ldr	r0, [r7, #16]
 80075f0:	f000 f836 	bl	8007660 <USBD_GetLen>
 80075f4:	4603      	mov	r3, r0
 80075f6:	3301      	adds	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	4413      	add	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7812      	ldrb	r2, [r2, #0]
 800760c:	701a      	strb	r2, [r3, #0]
  idx++;
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	3301      	adds	r3, #1
 8007612:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	2203      	movs	r2, #3
 800761c:	701a      	strb	r2, [r3, #0]
  idx++;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	3301      	adds	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007624:	e013      	b.n	800764e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	4413      	add	r3, r2
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3301      	adds	r3, #1
 8007636:	613b      	str	r3, [r7, #16]
    idx++;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	3301      	adds	r3, #1
 800763c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	4413      	add	r3, r2
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
    idx++;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	3301      	adds	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e7      	bne.n	8007626 <USBD_GetString+0x52>
 8007656:	e000      	b.n	800765a <USBD_GetString+0x86>
    return;
 8007658:	bf00      	nop
  }
}
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007670:	e005      	b.n	800767e <USBD_GetLen+0x1e>
  {
    len++;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	3301      	adds	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	3301      	adds	r3, #1
 800767c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f5      	bne.n	8007672 <USBD_GetLen+0x12>
  }

  return len;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	2100      	movs	r1, #0
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fd13 	bl	80080e6 <USBD_LL_Transmit>

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	2100      	movs	r1, #0
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fd02 	bl	80080e6 <USBD_LL_Transmit>

  return USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2203      	movs	r2, #3
 80076fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	2100      	movs	r1, #0
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 fd06 	bl	8008128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	2100      	movs	r1, #0
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fcf5 	bl	8008128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2204      	movs	r2, #4
 8007754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007758:	2300      	movs	r3, #0
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fcc1 	bl	80080e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2205      	movs	r2, #5
 800777a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777e:	2300      	movs	r3, #0
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fccf 	bl	8008128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007798:	2200      	movs	r2, #0
 800779a:	4912      	ldr	r1, [pc, #72]	; (80077e4 <MX_USB_DEVICE_Init+0x50>)
 800779c:	4812      	ldr	r0, [pc, #72]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 800779e:	f7fe fcdd 	bl	800615c <USBD_Init>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077a8:	f7f9 fc9a 	bl	80010e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077ac:	490f      	ldr	r1, [pc, #60]	; (80077ec <MX_USB_DEVICE_Init+0x58>)
 80077ae:	480e      	ldr	r0, [pc, #56]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077b0:	f7fe fd04 	bl	80061bc <USBD_RegisterClass>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077ba:	f7f9 fc91 	bl	80010e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077be:	490c      	ldr	r1, [pc, #48]	; (80077f0 <MX_USB_DEVICE_Init+0x5c>)
 80077c0:	4809      	ldr	r0, [pc, #36]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077c2:	f7fe fbf5 	bl	8005fb0 <USBD_CDC_RegisterInterface>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077cc:	f7f9 fc88 	bl	80010e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077d0:	4805      	ldr	r0, [pc, #20]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077d2:	f7fe fd29 	bl	8006228 <USBD_Start>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077dc:	f7f9 fc80 	bl	80010e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077e0:	bf00      	nop
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	200000b8 	.word	0x200000b8
 80077e8:	20000140 	.word	0x20000140
 80077ec:	20000024 	.word	0x20000024
 80077f0:	200000a4 	.word	0x200000a4

080077f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077f8:	2200      	movs	r2, #0
 80077fa:	4905      	ldr	r1, [pc, #20]	; (8007810 <CDC_Init_FS+0x1c>)
 80077fc:	4805      	ldr	r0, [pc, #20]	; (8007814 <CDC_Init_FS+0x20>)
 80077fe:	f7fe fbf1 	bl	8005fe4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007802:	4905      	ldr	r1, [pc, #20]	; (8007818 <CDC_Init_FS+0x24>)
 8007804:	4803      	ldr	r0, [pc, #12]	; (8007814 <CDC_Init_FS+0x20>)
 8007806:	f7fe fc0f 	bl	8006028 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800780a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800780c:	4618      	mov	r0, r3
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000c1c 	.word	0x20000c1c
 8007814:	20000140 	.word	0x20000140
 8007818:	2000041c 	.word	0x2000041c

0800781c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007820:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
 8007838:	4613      	mov	r3, r2
 800783a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	2b23      	cmp	r3, #35	; 0x23
 8007840:	d84a      	bhi.n	80078d8 <CDC_Control_FS+0xac>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <CDC_Control_FS+0x1c>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	080078d9 	.word	0x080078d9
 800784c:	080078d9 	.word	0x080078d9
 8007850:	080078d9 	.word	0x080078d9
 8007854:	080078d9 	.word	0x080078d9
 8007858:	080078d9 	.word	0x080078d9
 800785c:	080078d9 	.word	0x080078d9
 8007860:	080078d9 	.word	0x080078d9
 8007864:	080078d9 	.word	0x080078d9
 8007868:	080078d9 	.word	0x080078d9
 800786c:	080078d9 	.word	0x080078d9
 8007870:	080078d9 	.word	0x080078d9
 8007874:	080078d9 	.word	0x080078d9
 8007878:	080078d9 	.word	0x080078d9
 800787c:	080078d9 	.word	0x080078d9
 8007880:	080078d9 	.word	0x080078d9
 8007884:	080078d9 	.word	0x080078d9
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078d9 	.word	0x080078d9
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	080078d9 	.word	0x080078d9
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078d9 	.word	0x080078d9
 80078d0:	080078d9 	.word	0x080078d9
 80078d4:	080078d9 	.word	0x080078d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078d8:	bf00      	nop
  }

  return (USBD_OK);
 80078da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t Len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <CDC_Receive_FS+0x24>)
 80078f6:	f7fe fb97 	bl	8006028 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078fa:	4804      	ldr	r0, [pc, #16]	; (800790c <CDC_Receive_FS+0x24>)
 80078fc:	f7fe fbf8 	bl	80060f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007900:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000140 	.word	0x20000140

08007910 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <CDC_Transmit_FS+0x48>)
 8007922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007926:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007932:	2301      	movs	r3, #1
 8007934:	e00b      	b.n	800794e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007936:	887b      	ldrh	r3, [r7, #2]
 8007938:	461a      	mov	r2, r3
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4806      	ldr	r0, [pc, #24]	; (8007958 <CDC_Transmit_FS+0x48>)
 800793e:	f7fe fb51 	bl	8005fe4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <CDC_Transmit_FS+0x48>)
 8007944:	f7fe fb8e 	bl	8006064 <USBD_CDC_TransmitPacket>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000140 	.word	0x20000140

0800795c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800796e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007972:	4618      	mov	r0, r3
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2212      	movs	r2, #18
 8007990:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	200000d8 	.word	0x200000d8

080079a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2204      	movs	r2, #4
 80079b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079b6:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	200000f8 	.word	0x200000f8

080079c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4907      	ldr	r1, [pc, #28]	; (80079fc <USBD_FS_ProductStrDescriptor+0x34>)
 80079de:	4808      	ldr	r0, [pc, #32]	; (8007a00 <USBD_FS_ProductStrDescriptor+0x38>)
 80079e0:	f7ff fdf8 	bl	80075d4 <USBD_GetString>
 80079e4:	e004      	b.n	80079f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4904      	ldr	r1, [pc, #16]	; (80079fc <USBD_FS_ProductStrDescriptor+0x34>)
 80079ea:	4805      	ldr	r0, [pc, #20]	; (8007a00 <USBD_FS_ProductStrDescriptor+0x38>)
 80079ec:	f7ff fdf2 	bl	80075d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	2000141c 	.word	0x2000141c
 8007a00:	08008324 	.word	0x08008324

08007a04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4904      	ldr	r1, [pc, #16]	; (8007a24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a14:	4804      	ldr	r0, [pc, #16]	; (8007a28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a16:	f7ff fddd 	bl	80075d4 <USBD_GetString>
  return USBD_StrDesc;
 8007a1a:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	2000141c 	.word	0x2000141c
 8007a28:	0800833c 	.word	0x0800833c

08007a2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	221a      	movs	r2, #26
 8007a3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a3e:	f000 f855 	bl	8007aec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a42:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200000fc 	.word	0x200000fc

08007a50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a68:	f7ff fdb4 	bl	80075d4 <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a74:	f7ff fdae 	bl	80075d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000141c 	.word	0x2000141c
 8007a88:	08008350 	.word	0x08008350

08007a8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	4907      	ldr	r1, [pc, #28]	; (8007ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aa2:	4808      	ldr	r0, [pc, #32]	; (8007ac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007aa4:	f7ff fd96 	bl	80075d4 <USBD_GetString>
 8007aa8:	e004      	b.n	8007ab4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4904      	ldr	r1, [pc, #16]	; (8007ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ab0:	f7ff fd90 	bl	80075d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	2000141c 	.word	0x2000141c
 8007ac4:	0800835c 	.word	0x0800835c

08007ac8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	220c      	movs	r2, #12
 8007ad8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	200000ec 	.word	0x200000ec

08007aec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <Get_SerialNum+0x44>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <Get_SerialNum+0x48>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <Get_SerialNum+0x4c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b12:	2208      	movs	r2, #8
 8007b14:	4909      	ldr	r1, [pc, #36]	; (8007b3c <Get_SerialNum+0x50>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f814 	bl	8007b44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	4908      	ldr	r1, [pc, #32]	; (8007b40 <Get_SerialNum+0x54>)
 8007b20:	68b8      	ldr	r0, [r7, #8]
 8007b22:	f000 f80f 	bl	8007b44 <IntToUnicode>
  }
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	1fff7a10 	.word	0x1fff7a10
 8007b34:	1fff7a14 	.word	0x1fff7a14
 8007b38:	1fff7a18 	.word	0x1fff7a18
 8007b3c:	200000fe 	.word	0x200000fe
 8007b40:	2000010e 	.word	0x2000010e

08007b44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e027      	b.n	8007bac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	0f1b      	lsrs	r3, r3, #28
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	d80b      	bhi.n	8007b7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0f1b      	lsrs	r3, r3, #28
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	440b      	add	r3, r1
 8007b74:	3230      	adds	r2, #48	; 0x30
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	e00a      	b.n	8007b92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	0f1b      	lsrs	r3, r3, #28
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	4619      	mov	r1, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	440b      	add	r3, r1
 8007b8c:	3237      	adds	r2, #55	; 0x37
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
 8007bac:	7dfa      	ldrb	r2, [r7, #23]
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d3d3      	bcc.n	8007b5c <IntToUnicode+0x18>
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b0a0      	sub	sp, #128	; 0x80
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007bdc:	f107 0310 	add.w	r3, r7, #16
 8007be0:	225c      	movs	r2, #92	; 0x5c
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fb89 	bl	80082fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf2:	d149      	bne.n	8007c88 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bf8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007bfe:	f107 0310 	add.w	r3, r7, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fb fa1a 	bl	800303c <HAL_RCCEx_PeriphCLKConfig>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007c0e:	f7f9 fa67 	bl	80010e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	4a1d      	ldr	r2, [pc, #116]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	6313      	str	r3, [r2, #48]	; 0x30
 8007c22:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c34:	2302      	movs	r3, #2
 8007c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c40:	230a      	movs	r3, #10
 8007c42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4812      	ldr	r0, [pc, #72]	; (8007c94 <HAL_PCD_MspInit+0xd0>)
 8007c4c:	f7f9 fc8e 	bl	800156c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c54:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5a:	6353      	str	r3, [r2, #52]	; 0x34
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8007c6c:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <HAL_PCD_MspInit+0xcc>)
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	2043      	movs	r0, #67	; 0x43
 8007c7e:	f7f9 fc3e 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c82:	2043      	movs	r0, #67	; 0x43
 8007c84:	f7f9 fc57 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3780      	adds	r7, #128	; 0x80
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40020000 	.word	0x40020000

08007c98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f7fe fb07 	bl	80062c2 <USBD_LL_SetupStage>
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f7fe fb41 	bl	800636c <USBD_LL_DataOutStage>
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b082      	sub	sp, #8
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	334c      	adds	r3, #76	; 0x4c
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f7fe fbda 	bl	80064d2 <USBD_LL_DataInStage>
}
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fd0e 	bl	8006756 <USBD_LL_SOF>
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	e008      	b.n	8007d6e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d102      	bne.n	8007d6a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d64:	2301      	movs	r3, #1
 8007d66:	73fb      	strb	r3, [r7, #15]
 8007d68:	e001      	b.n	8007d6e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d6a:	f7f9 f9b9 	bl	80010e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fcae 	bl	80066da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fc56 	bl	8006636 <USBD_LL_Reset>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fca9 	bl	80066fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <HAL_PCD_SuspendCallback+0x48>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	4a03      	ldr	r2, [pc, #12]	; (8007ddc <HAL_PCD_SuspendCallback+0x48>)
 8007dce:	f043 0306 	orr.w	r3, r3, #6
 8007dd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fc99 	bl	8006726 <USBD_LL_Resume>
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fcf1 	bl	80067fa <USBD_LL_IsoOUTIncomplete>
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe fcad 	bl	8006796 <USBD_LL_IsoINIncomplete>
}
 8007e3c:	bf00      	nop
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fd03 	bl	800685e <USBD_LL_DevConnected>
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fd00 	bl	8006874 <USBD_LL_DevDisconnected>
}
 8007e74:	bf00      	nop
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d13c      	bne.n	8007f06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e8c:	4a20      	ldr	r2, [pc, #128]	; (8007f10 <USBD_LL_Init+0x94>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <USBD_LL_Init+0x94>)
 8007e98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e9c:	4b1c      	ldr	r3, [pc, #112]	; (8007f10 <USBD_LL_Init+0x94>)
 8007e9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ea2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007ea4:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007eaa:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <USBD_LL_Init+0x94>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007eb0:	4b17      	ldr	r3, [pc, #92]	; (8007f10 <USBD_LL_Init+0x94>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007eb6:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <USBD_LL_Init+0x94>)
 8007eb8:	2202      	movs	r2, #2
 8007eba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ebc:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ec2:	4b13      	ldr	r3, [pc, #76]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ec8:	4b11      	ldr	r3, [pc, #68]	; (8007f10 <USBD_LL_Init+0x94>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ece:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007eda:	480d      	ldr	r0, [pc, #52]	; (8007f10 <USBD_LL_Init+0x94>)
 8007edc:	f7f9 fcf3 	bl	80018c6 <HAL_PCD_Init>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ee6:	f7f9 f8fb 	bl	80010e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007eea:	2180      	movs	r1, #128	; 0x80
 8007eec:	4808      	ldr	r0, [pc, #32]	; (8007f10 <USBD_LL_Init+0x94>)
 8007eee:	f7fa ff7e 	bl	8002dee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ef2:	2240      	movs	r2, #64	; 0x40
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4806      	ldr	r0, [pc, #24]	; (8007f10 <USBD_LL_Init+0x94>)
 8007ef8:	f7fa ff32 	bl	8002d60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007efc:	2280      	movs	r2, #128	; 0x80
 8007efe:	2101      	movs	r1, #1
 8007f00:	4803      	ldr	r0, [pc, #12]	; (8007f10 <USBD_LL_Init+0x94>)
 8007f02:	f7fa ff2d 	bl	8002d60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000161c 	.word	0x2000161c

08007f14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f9 fdef 	bl	8001b0e <HAL_PCD_Start>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f990 	bl	800825c <USBD_Get_USB_Status>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	4608      	mov	r0, r1
 8007f54:	4611      	mov	r1, r2
 8007f56:	461a      	mov	r2, r3
 8007f58:	4603      	mov	r3, r0
 8007f5a:	70fb      	strb	r3, [r7, #3]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70bb      	strb	r3, [r7, #2]
 8007f60:	4613      	mov	r3, r2
 8007f62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f72:	78bb      	ldrb	r3, [r7, #2]
 8007f74:	883a      	ldrh	r2, [r7, #0]
 8007f76:	78f9      	ldrb	r1, [r7, #3]
 8007f78:	f7fa faed 	bl	8002556 <HAL_PCD_EP_Open>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f96a 	bl	800825c <USBD_Get_USB_Status>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fa fb36 	bl	8002626 <HAL_PCD_EP_Close>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 f94b 	bl	800825c <USBD_Get_USB_Status>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fa fc0e 	bl	8002814 <HAL_PCD_EP_SetStall>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 f92c 	bl	800825c <USBD_Get_USB_Status>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008008:	7bbb      	ldrb	r3, [r7, #14]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fa fc53 	bl	80028dc <HAL_PCD_EP_ClrStall>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f90d 	bl	800825c <USBD_Get_USB_Status>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008046:	7bbb      	ldrb	r3, [r7, #14]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008062:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008068:	2b00      	cmp	r3, #0
 800806a:	da0b      	bge.n	8008084 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	333e      	adds	r3, #62	; 0x3e
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	e00b      	b.n	800809c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	4613      	mov	r3, r2
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800809a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fa fa20 	bl	800250c <HAL_PCD_SetAddress>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f8c2 	bl	800825c <USBD_Get_USB_Status>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b086      	sub	sp, #24
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	460b      	mov	r3, r1
 80080f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008104:	7af9      	ldrb	r1, [r7, #11]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	f7fa fb39 	bl	8002780 <HAL_PCD_EP_Transmit>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f8a1 	bl	800825c <USBD_Get_USB_Status>
 800811a:	4603      	mov	r3, r0
 800811c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800811e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	460b      	mov	r3, r1
 8008136:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008146:	7af9      	ldrb	r1, [r7, #11]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	f7fa fab5 	bl	80026ba <HAL_PCD_EP_Receive>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 f880 	bl	800825c <USBD_Get_USB_Status>
 800815c:	4603      	mov	r3, r0
 800815e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008160:	7dbb      	ldrb	r3, [r7, #22]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7fa fae5 	bl	8002750 <HAL_PCD_EP_GetRxCount>
 8008186:	4603      	mov	r3, r0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_PCDEx_LPM_Callback+0x18>
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d01f      	beq.n	80081e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80081a6:	e03b      	b.n	8008220 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80081b0:	f7f8 ff2a 	bl	8001008 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <HAL_PCDEx_LPM_Callback+0x98>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <HAL_PCDEx_LPM_Callback+0x98>)
 80081ba:	f023 0306 	bic.w	r3, r3, #6
 80081be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe faa1 	bl	8006726 <USBD_LL_Resume>
    break;
 80081e4:	e01c      	b.n	8008220 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fa78 	bl	80066fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_PCDEx_LPM_Callback+0x98>)
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	4a04      	ldr	r2, [pc, #16]	; (8008228 <HAL_PCDEx_LPM_Callback+0x98>)
 8008218:	f043 0306 	orr.w	r3, r3, #6
 800821c:	6113      	str	r3, [r2, #16]
    break;
 800821e:	bf00      	nop
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	e000ed00 	.word	0xe000ed00

0800822c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008234:	4b03      	ldr	r3, [pc, #12]	; (8008244 <USBD_static_malloc+0x18>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20001b28 	.word	0x20001b28

08008248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]

}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d817      	bhi.n	80082a0 <USBD_Get_USB_Status+0x44>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBD_Get_USB_Status+0x1c>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	08008289 	.word	0x08008289
 800827c:	0800828f 	.word	0x0800828f
 8008280:	08008295 	.word	0x08008295
 8008284:	0800829b 	.word	0x0800829b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73fb      	strb	r3, [r7, #15]
    break;
 800828c:	e00b      	b.n	80082a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
    break;
 8008292:	e008      	b.n	80082a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
    break;
 8008298:	e005      	b.n	80082a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800829a:	2303      	movs	r3, #3
 800829c:	73fb      	strb	r3, [r7, #15]
    break;
 800829e:	e002      	b.n	80082a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	73fb      	strb	r3, [r7, #15]
    break;
 80082a4:	bf00      	nop
  }
  return usb_status;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <__libc_init_array>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4d0d      	ldr	r5, [pc, #52]	; (80082ec <__libc_init_array+0x38>)
 80082b8:	4c0d      	ldr	r4, [pc, #52]	; (80082f0 <__libc_init_array+0x3c>)
 80082ba:	1b64      	subs	r4, r4, r5
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	2600      	movs	r6, #0
 80082c0:	42a6      	cmp	r6, r4
 80082c2:	d109      	bne.n	80082d8 <__libc_init_array+0x24>
 80082c4:	4d0b      	ldr	r5, [pc, #44]	; (80082f4 <__libc_init_array+0x40>)
 80082c6:	4c0c      	ldr	r4, [pc, #48]	; (80082f8 <__libc_init_array+0x44>)
 80082c8:	f000 f820 	bl	800830c <_init>
 80082cc:	1b64      	subs	r4, r4, r5
 80082ce:	10a4      	asrs	r4, r4, #2
 80082d0:	2600      	movs	r6, #0
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	d105      	bne.n	80082e2 <__libc_init_array+0x2e>
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082dc:	4798      	blx	r3
 80082de:	3601      	adds	r6, #1
 80082e0:	e7ee      	b.n	80082c0 <__libc_init_array+0xc>
 80082e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e6:	4798      	blx	r3
 80082e8:	3601      	adds	r6, #1
 80082ea:	e7f2      	b.n	80082d2 <__libc_init_array+0x1e>
 80082ec:	08008384 	.word	0x08008384
 80082f0:	08008384 	.word	0x08008384
 80082f4:	08008384 	.word	0x08008384
 80082f8:	08008388 	.word	0x08008388

080082fc <memset>:
 80082fc:	4402      	add	r2, r0
 80082fe:	4603      	mov	r3, r0
 8008300:	4293      	cmp	r3, r2
 8008302:	d100      	bne.n	8008306 <memset+0xa>
 8008304:	4770      	bx	lr
 8008306:	f803 1b01 	strb.w	r1, [r3], #1
 800830a:	e7f9      	b.n	8008300 <memset+0x4>

0800830c <_init>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr

08008318 <_fini>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr
