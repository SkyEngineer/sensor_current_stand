
test_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d20  08007d20  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08007d20  08007d20  00017d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d28  08007d28  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d2c  08007d2c  00017d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08007d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000118  08007e48  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  08007e48  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5f6  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c85  00000000  00000000  0002f73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000323c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00032fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e5a  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001085e  00000000  00000000  000578da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e0d  00000000  00000000  00068138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  00131f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000118 	.word	0x20000118
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007cb0 	.word	0x08007cb0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000011c 	.word	0x2000011c
 8000200:	08007cb0 	.word	0x08007cb0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a3b      	ldr	r2, [pc, #236]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a34      	ldr	r2, [pc, #208]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b32      	ldr	r3, [pc, #200]	; (8000614 <MX_GPIO_Init+0x10c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_GPIO_Init+0x10c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a2d      	ldr	r2, [pc, #180]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a26      	ldr	r2, [pc, #152]	; (8000614 <MX_GPIO_Init+0x10c>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b24      	ldr	r3, [pc, #144]	; (8000614 <MX_GPIO_Init+0x10c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_4_E_Pin|MUX_4_S0_Pin|MUX_1_S2_Pin|MUX_1_E_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x110>)
 8000596:	f000 fe4f 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUX_4_S1_Pin|MUX_4_S2_Pin|MUX_2_S2_Pin|MUX_1_S0_Pin
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 715c 	mov.w	r1, #880	; 0x370
 80005a0:	481e      	ldr	r0, [pc, #120]	; (800061c <MX_GPIO_Init+0x114>)
 80005a2:	f000 fe49 	bl	8001238 <HAL_GPIO_WritePin>
                          |MUX_1_S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_3_E_Pin|MUX_3_S0_Pin|MUX_3_S1_Pin|MUX_3_S2_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 4107 	movw	r1, #62471	; 0xf407
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <MX_GPIO_Init+0x118>)
 80005ae:	f000 fe43 	bl	8001238 <HAL_GPIO_WritePin>
                          |E_U_MUX_Pin|MUX_2_E_Pin|MUX_2_S0_Pin|MUX_2_S1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MUX_4_E_Pin|MUX_4_S0_Pin|MUX_1_S2_Pin|MUX_1_E_Pin;
 80005b2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4813      	ldr	r0, [pc, #76]	; (8000618 <MX_GPIO_Init+0x110>)
 80005cc:	f000 fca0 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MUX_4_S1_Pin|MUX_4_S2_Pin|MUX_2_S2_Pin|MUX_1_S0_Pin
 80005d0:	f44f 735c 	mov.w	r3, #880	; 0x370
 80005d4:	617b      	str	r3, [r7, #20]
                          |MUX_1_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_GPIO_Init+0x114>)
 80005ea:	f000 fc91 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MUX_3_E_Pin|MUX_3_S0_Pin|MUX_3_S1_Pin|MUX_3_S2_Pin
 80005ee:	f24f 4307 	movw	r3, #62471	; 0xf407
 80005f2:	617b      	str	r3, [r7, #20]
                          |E_U_MUX_Pin|MUX_2_E_Pin|MUX_2_S0_Pin|MUX_2_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_GPIO_Init+0x118>)
 8000608:	f000 fc82 	bl	8000f10 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020000 	.word	0x40020000
 800061c:	40020800 	.word	0x40020800
 8000620:	40020400 	.word	0x40020400

08000624 <Init_MUX>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// инициализация выходов мультиплексоров
void Init_MUX(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	// сначала адресные выходы в ноль
	Reset_all_addr_MUX();
 8000628:	f000 f80e 	bl	8000648 <Reset_all_addr_MUX>

	// подаем питание
	HAL_GPIO_WritePin(E_U_MUX_GPIO_Port, E_U_MUX_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <Init_MUX+0x20>)
 8000634:	f000 fe00 	bl	8001238 <HAL_GPIO_WritePin>

	// задержку на переходный процесс
	HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fb33 	bl	8000ca4 <HAL_Delay>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020400 	.word	0x40020400

08000648 <Reset_all_addr_MUX>:

// отключение адресных выходов для всех мультиплексоров
void Reset_all_addr_MUX(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	// сначал запрет общий для всх групп, потом адреса обнуляем
	HAL_GPIO_WritePin(MUX_1_E_GPIO_Port, MUX_1_E_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	482b      	ldr	r0, [pc, #172]	; (8000700 <Reset_all_addr_MUX+0xb8>)
 8000654:	f000 fdf0 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_2_E_GPIO_Port, MUX_2_E_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4829      	ldr	r0, [pc, #164]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 8000660:	f000 fdea 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_3_E_GPIO_Port, MUX_3_E_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	4826      	ldr	r0, [pc, #152]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 800066a:	f000 fde5 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_4_E_GPIO_Port, MUX_4_E_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	4823      	ldr	r0, [pc, #140]	; (8000700 <Reset_all_addr_MUX+0xb8>)
 8000674:	f000 fde0 	bl	8001238 <HAL_GPIO_WritePin>

	// Группа 1. Адреса
	HAL_GPIO_WritePin(MUX_1_S0_GPIO_Port, MUX_1_S0_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4822      	ldr	r0, [pc, #136]	; (8000708 <Reset_all_addr_MUX+0xc0>)
 8000680:	f000 fdda 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_1_S1_GPIO_Port, MUX_1_S1_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068a:	481f      	ldr	r0, [pc, #124]	; (8000708 <Reset_all_addr_MUX+0xc0>)
 800068c:	f000 fdd4 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_1_S2_GPIO_Port, MUX_1_S2_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <Reset_all_addr_MUX+0xb8>)
 8000698:	f000 fdce 	bl	8001238 <HAL_GPIO_WritePin>

	// Группа 2. Адреса
	HAL_GPIO_WritePin(MUX_2_S0_GPIO_Port, MUX_2_S0_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a2:	4818      	ldr	r0, [pc, #96]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 80006a4:	f000 fdc8 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_2_S1_GPIO_Port, MUX_2_S1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 80006b0:	f000 fdc2 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_2_S2_GPIO_Port, MUX_2_S2_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2140      	movs	r1, #64	; 0x40
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <Reset_all_addr_MUX+0xc0>)
 80006ba:	f000 fdbd 	bl	8001238 <HAL_GPIO_WritePin>

	// Группа 3. Адреса
	HAL_GPIO_WritePin(MUX_3_S0_GPIO_Port, MUX_3_S0_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2102      	movs	r1, #2
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 80006c4:	f000 fdb8 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_3_S1_GPIO_Port, MUX_3_S1_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2104      	movs	r1, #4
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 80006ce:	f000 fdb3 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_3_S2_GPIO_Port, MUX_3_S2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <Reset_all_addr_MUX+0xbc>)
 80006da:	f000 fdad 	bl	8001238 <HAL_GPIO_WritePin>

	// Группа 4. Адреса
	HAL_GPIO_WritePin(MUX_4_S0_GPIO_Port, MUX_4_S0_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <Reset_all_addr_MUX+0xb8>)
 80006e4:	f000 fda8 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_4_S1_GPIO_Port, MUX_4_S1_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2110      	movs	r1, #16
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <Reset_all_addr_MUX+0xc0>)
 80006ee:	f000 fda3 	bl	8001238 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_4_S2_GPIO_Port, MUX_4_S2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <Reset_all_addr_MUX+0xc0>)
 80006f8:	f000 fd9e 	bl	8001238 <HAL_GPIO_WritePin>

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800

0800070c <Reset_all_addr_MUX_and_U_MUX>:

void Reset_all_addr_MUX_and_U_MUX(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	Reset_all_addr_MUX();
 8000710:	f7ff ff9a 	bl	8000648 <Reset_all_addr_MUX>
	HAL_GPIO_WritePin(E_U_MUX_GPIO_Port, E_U_MUX_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4802      	ldr	r0, [pc, #8]	; (8000724 <Reset_all_addr_MUX_and_U_MUX+0x18>)
 800071c:	f000 fd8c 	bl	8001238 <HAL_GPIO_WritePin>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020400 	.word	0x40020400

08000728 <Enable_Sensor_Current>:

void Enable_Sensor_Current(uint8_t num)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	// отключаем все адресные выходы
	Reset_all_addr_MUX();
 8000732:	f7ff ff89 	bl	8000648 <Reset_all_addr_MUX>

	/* включаем мультиплексор нужной группы----------------*/
	// Группа 1 0x01...0x8 (1...8)
	if ((num >= 0x01) && (num <= 0x08))
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d039      	beq.n	80007b0 <Enable_Sensor_Current+0x88>
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b08      	cmp	r3, #8
 8000740:	d836      	bhi.n	80007b0 <Enable_Sensor_Current+0x88>
	{
		HAL_GPIO_WritePin(MUX_1_E_GPIO_Port, MUX_1_E_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	4868      	ldr	r0, [pc, #416]	; (80008ec <Enable_Sensor_Current+0x1c4>)
 800074a:	f000 fd75 	bl	8001238 <HAL_GPIO_WritePin>
		// включаем определенный датчик
		struct point center = {num-1};
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	3b01      	subs	r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000758:	b2da      	uxtb	r2, r3
 800075a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800075e:	f362 0306 	bfi	r3, r2, #0, #7
 8000762:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		union code c;
		c.p = center;
 8000766:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800076a:	f887 3020 	strb.w	r3, [r7, #32]

		HAL_GPIO_WritePin(MUX_1_S0_GPIO_Port, MUX_1_S0_Pin, c.byte.a0);
 800076e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000772:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	485c      	ldr	r0, [pc, #368]	; (80008f0 <Enable_Sensor_Current+0x1c8>)
 8000780:	f000 fd5a 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_1_S1_GPIO_Port, MUX_1_S1_Pin, c.byte.a1);
 8000784:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000788:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000794:	4856      	ldr	r0, [pc, #344]	; (80008f0 <Enable_Sensor_Current+0x1c8>)
 8000796:	f000 fd4f 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_1_S2_GPIO_Port, MUX_1_S2_Pin, c.byte.a2);
 800079a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800079e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007aa:	4850      	ldr	r0, [pc, #320]	; (80008ec <Enable_Sensor_Current+0x1c4>)
 80007ac:	f000 fd44 	bl	8001238 <HAL_GPIO_WritePin>
	}
	// Группа 2 0x09...0x10 (9...16)
	if ((num >= 0x09) && (num <= 0x10))
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d931      	bls.n	800081a <Enable_Sensor_Current+0xf2>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b10      	cmp	r3, #16
 80007ba:	d82e      	bhi.n	800081a <Enable_Sensor_Current+0xf2>
	{
		HAL_GPIO_WritePin(MUX_2_E_GPIO_Port, MUX_2_E_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	484c      	ldr	r0, [pc, #304]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 80007c4:	f000 fd38 	bl	8001238 <HAL_GPIO_WritePin>
		struct point center = {num-1-8};
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	3b09      	subs	r3, #9
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	7f3b      	ldrb	r3, [r7, #28]
 80007d6:	f362 0306 	bfi	r3, r2, #0, #7
 80007da:	773b      	strb	r3, [r7, #28]
		union code c;
		c.p = center;
 80007dc:	7f3b      	ldrb	r3, [r7, #28]
 80007de:	763b      	strb	r3, [r7, #24]

		HAL_GPIO_WritePin(MUX_2_S0_GPIO_Port, MUX_2_S0_Pin, c.byte.a0);
 80007e0:	7e3b      	ldrb	r3, [r7, #24]
 80007e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	4841      	ldr	r0, [pc, #260]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 80007f0:	f000 fd22 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_2_S1_GPIO_Port, MUX_2_S1_Pin, c.byte.a1);
 80007f4:	7e3b      	ldrb	r3, [r7, #24]
 80007f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	461a      	mov	r2, r3
 80007fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000802:	483c      	ldr	r0, [pc, #240]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 8000804:	f000 fd18 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_2_S2_GPIO_Port, MUX_2_S2_Pin, c.byte.a2);
 8000808:	7e3b      	ldrb	r3, [r7, #24]
 800080a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4836      	ldr	r0, [pc, #216]	; (80008f0 <Enable_Sensor_Current+0x1c8>)
 8000816:	f000 fd0f 	bl	8001238 <HAL_GPIO_WritePin>
	}

	// Группа 3 0x11...0x18 (17...24)
	if ((num >= 0x11) && (num <= 0x18))
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b10      	cmp	r3, #16
 800081e:	d92f      	bls.n	8000880 <Enable_Sensor_Current+0x158>
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b18      	cmp	r3, #24
 8000824:	d82c      	bhi.n	8000880 <Enable_Sensor_Current+0x158>
	{
		HAL_GPIO_WritePin(MUX_3_E_GPIO_Port, MUX_3_E_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	2101      	movs	r1, #1
 800082a:	4832      	ldr	r0, [pc, #200]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 800082c:	f000 fd04 	bl	8001238 <HAL_GPIO_WritePin>
		struct point center = {num-1-24};
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	3b19      	subs	r3, #25
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7d3b      	ldrb	r3, [r7, #20]
 800083e:	f362 0306 	bfi	r3, r2, #0, #7
 8000842:	753b      	strb	r3, [r7, #20]
		union code c;
		c.p = center;
 8000844:	7d3b      	ldrb	r3, [r7, #20]
 8000846:	743b      	strb	r3, [r7, #16]

		HAL_GPIO_WritePin(MUX_3_S0_GPIO_Port, MUX_3_S0_Pin, c.byte.a0);
 8000848:	7c3b      	ldrb	r3, [r7, #16]
 800084a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	2102      	movs	r1, #2
 8000854:	4827      	ldr	r0, [pc, #156]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 8000856:	f000 fcef 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_3_S1_GPIO_Port, MUX_3_S1_Pin, c.byte.a1);
 800085a:	7c3b      	ldrb	r3, [r7, #16]
 800085c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	2104      	movs	r1, #4
 8000866:	4823      	ldr	r0, [pc, #140]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 8000868:	f000 fce6 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_3_S2_GPIO_Port, MUX_3_S2_Pin, c.byte.a2);
 800086c:	7c3b      	ldrb	r3, [r7, #16]
 800086e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	481e      	ldr	r0, [pc, #120]	; (80008f4 <Enable_Sensor_Current+0x1cc>)
 800087c:	f000 fcdc 	bl	8001238 <HAL_GPIO_WritePin>
	}

	// Группа 4 0x19...0x20 (25...32)
	if ((num >= 0x19) && (num <= 0x20))
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b18      	cmp	r3, #24
 8000884:	d92e      	bls.n	80008e4 <Enable_Sensor_Current+0x1bc>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b20      	cmp	r3, #32
 800088a:	d82b      	bhi.n	80008e4 <Enable_Sensor_Current+0x1bc>
	{
		HAL_GPIO_WritePin(MUX_4_E_GPIO_Port, MUX_4_E_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <Enable_Sensor_Current+0x1c4>)
 8000892:	f000 fcd1 	bl	8001238 <HAL_GPIO_WritePin>
		struct point center = {num-1-31};
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3b20      	subs	r3, #32
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	7b3b      	ldrb	r3, [r7, #12]
 80008a4:	f362 0306 	bfi	r3, r2, #0, #7
 80008a8:	733b      	strb	r3, [r7, #12]
		union code c;
		c.p = center;
 80008aa:	7b3b      	ldrb	r3, [r7, #12]
 80008ac:	723b      	strb	r3, [r7, #8]

		HAL_GPIO_WritePin(MUX_4_S0_GPIO_Port, MUX_4_S0_Pin, c.byte.a0);
 80008ae:	7a3b      	ldrb	r3, [r7, #8]
 80008b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <Enable_Sensor_Current+0x1c4>)
 80008bc:	f000 fcbc 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_4_S1_GPIO_Port, MUX_4_S1_Pin, c.byte.a1);
 80008c0:	7a3b      	ldrb	r3, [r7, #8]
 80008c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <Enable_Sensor_Current+0x1c8>)
 80008ce:	f000 fcb3 	bl	8001238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_4_S2_GPIO_Port, MUX_4_S2_Pin, c.byte.a2);
 80008d2:	7a3b      	ldrb	r3, [r7, #8]
 80008d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	2120      	movs	r1, #32
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <Enable_Sensor_Current+0x1c8>)
 80008e0:	f000 fcaa 	bl	8001238 <HAL_GPIO_WritePin>
	}
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020400 	.word	0x40020400

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 f960 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f854 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f7ff fe00 	bl	8000508 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000908:	f006 fc16 	bl	8007138 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // инициализируем выходы и подаем питание
  Init_MUX();
 800090c:	f7ff fe8a 	bl	8000624 <Init_MUX>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	  //обработка запроса
	  	  CDC_Receive_FS(RxData,  (uint32_t)1);
 8000910:	2101      	movs	r1, #1
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <main+0xa4>)
 8000914:	f006 fcba 	bl	800728c <CDC_Receive_FS>
	  	  // необходимо отработать условие, что одновременно может быть включен только один датчик
	  	  // то есть каждый раз обнуляем все выходы
	  	  //

	  	  // если у нас присланный запрос - в диапазоне номеров датчиков
	  	  if ((RxData[0] > 0x00) && (RxData[0] <= 0x20))
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <main+0xa4>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d010      	beq.n	8000942 <main+0x4a>
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <main+0xa4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b20      	cmp	r3, #32
 8000926:	d80c      	bhi.n	8000942 <main+0x4a>
	  	  {
	  		  Enable_Sensor_Current(RxData[0]);
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <main+0xa4>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fefb 	bl	8000728 <Enable_Sensor_Current>
	  		  RxData[0] = 0;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <main+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
	  		  // передаём ответ
	  		  CDC_Transmit_FS(ANTWORT_DT, 1);								// отвечаем, что выставили пин
 8000938:	2101      	movs	r1, #1
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <main+0xa8>)
 800093c:	f006 fcba 	bl	80072b4 <CDC_Transmit_FS>
 8000940:	e027      	b.n	8000992 <main+0x9a>
	  	  }
	  	  // если нет
	  	  else
	  	  {
	  		  switch (RxData[0])
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <main+0xa4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d018      	beq.n	800097c <main+0x84>
 800094a:	2bff      	cmp	r3, #255	; 0xff
 800094c:	dc20      	bgt.n	8000990 <main+0x98>
 800094e:	2baa      	cmp	r3, #170	; 0xaa
 8000950:	d002      	beq.n	8000958 <main+0x60>
 8000952:	2bfe      	cmp	r3, #254	; 0xfe
 8000954:	d008      	beq.n	8000968 <main+0x70>
	  				RxData[0] = 0;
	  				break;

	  			default:
	  				//CDC_Transmit_FS(0x00, 1);
	  				break;
 8000956:	e01b      	b.n	8000990 <main+0x98>
	  				CDC_Transmit_FS(ID, 1);
 8000958:	2101      	movs	r1, #1
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <main+0xac>)
 800095c:	f006 fcaa 	bl	80072b4 <CDC_Transmit_FS>
	  				RxData[0] = 0;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <main+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	  				break;
 8000966:	e014      	b.n	8000992 <main+0x9a>
	  				Reset_all_addr_MUX();
 8000968:	f7ff fe6e 	bl	8000648 <Reset_all_addr_MUX>
	  				RxData[0] = 0;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <main+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
	  				CDC_Transmit_FS(ANTWORT, 1);
 8000972:	2101      	movs	r1, #1
 8000974:	480c      	ldr	r0, [pc, #48]	; (80009a8 <main+0xb0>)
 8000976:	f006 fc9d 	bl	80072b4 <CDC_Transmit_FS>
	  				break;
 800097a:	e00a      	b.n	8000992 <main+0x9a>
	  				Reset_all_addr_MUX_and_U_MUX();
 800097c:	f7ff fec6 	bl	800070c <Reset_all_addr_MUX_and_U_MUX>
	  				CDC_Transmit_FS(ANTWORT, 1);
 8000980:	2101      	movs	r1, #1
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <main+0xb0>)
 8000984:	f006 fc96 	bl	80072b4 <CDC_Transmit_FS>
	  				RxData[0] = 0;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <main+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
	  				break;
 800098e:	e000      	b.n	8000992 <main+0x9a>
	  				break;
 8000990:	bf00      	nop

	  		  }
	  	  }
	  	  HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f000 f986 	bl	8000ca4 <HAL_Delay>
	  	  CDC_Receive_FS(RxData,  (uint32_t)1);
 8000998:	e7ba      	b.n	8000910 <main+0x18>
 800099a:	bf00      	nop
 800099c:	20000134 	.word	0x20000134
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000004 	.word	0x20000004

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 f970 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <SystemClock_Config+0xd0>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <SystemClock_Config+0xd0>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <SystemClock_Config+0xd0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <SystemClock_Config+0xd4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <SystemClock_Config+0xd4>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <SystemClock_Config+0xd4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 7;
 8000a20:	2307      	movs	r3, #7
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a24:	2348      	movs	r3, #72	; 0x48
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fca5 	bl	8003388 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a44:	f000 f81e 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2102      	movs	r1, #2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fec9 	bl	80027fc <HAL_RCC_ClockConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a70:	f000 f808 	bl	8000a84 <Error_Handler>
  }
}
 8000a74:	bf00      	nop
 8000a76:	3750      	adds	r7, #80	; 0x50
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f89a 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <OTG_FS_IRQHandler+0x10>)
 8000b3a:	f000 fced 	bl	8001518 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000161c 	.word	0x2000161c

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ffd7 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f007 f85d 	bl	8007c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff feab 	bl	80008f8 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8000bb0:	08007d30 	.word	0x08007d30
  ldr r2, =_sbss
 8000bb4:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8000bb8:	20001d48 	.word	0x20001d48

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f94f 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff ff4c 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f967 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f92f 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	20000014 	.word	0x20000014
 8000c60:	20000010 	.word	0x20000010

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000014 	.word	0x20000014
 8000c88:	20000138 	.word	0x20000138

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000138 	.word	0x20000138

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000014 	.word	0x20000014

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e165      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8154 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ae 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_GPIO_Init+0x304>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x20a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x206>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x202>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x304>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_GPIO_Init+0x324>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae96 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800126a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126c:	b08f      	sub	sp, #60	; 0x3c
 800126e:	af0a      	add	r7, sp, #40	; 0x28
 8001270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e116      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f006 f966 	bl	8007568 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fc17 	bl	8003aee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	687e      	ldr	r6, [r7, #4]
 80012c8:	466d      	mov	r5, sp
 80012ca:	f106 0410 	add.w	r4, r6, #16
 80012ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012da:	e885 0003 	stmia.w	r5, {r0, r1}
 80012de:	1d33      	adds	r3, r6, #4
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f002 faee 	bl	80038c4 <USB_CoreInit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0d7      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fc05 	bl	8003b10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e04a      	b.n	80013a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	333d      	adds	r3, #61	; 0x3d
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	333c      	adds	r3, #60	; 0x3c
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	b298      	uxth	r0, r3
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3344      	adds	r3, #68	; 0x44
 8001348:	4602      	mov	r2, r0
 800134a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	3340      	adds	r3, #64	; 0x40
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3348      	adds	r3, #72	; 0x48
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334c      	adds	r3, #76	; 0x4c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3354      	adds	r3, #84	; 0x54
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3301      	adds	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3af      	bcc.n	800130c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e044      	b.n	800143c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3b5      	bcc.n	80013b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	687e      	ldr	r6, [r7, #4]
 800144e:	466d      	mov	r5, sp
 8001450:	f106 0410 	add.w	r4, r6, #16
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001460:	e885 0003 	stmia.w	r5, {r0, r1}
 8001464:	1d33      	adds	r3, r6, #4
 8001466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f002 fb9d 	bl	8003ba8 <USB_DevInit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e014      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f001 f98b 	bl	80027b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fcdf 	bl	8004e66 <USB_DevDisconnect>

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_PCD_Start+0x1c>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e020      	b.n	8001510 <HAL_PCD_Start+0x5e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d109      	bne.n	80014f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d005      	beq.n	80014f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fae8 	bl	8003acc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fc8f 	bl	8004e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08d      	sub	sp, #52	; 0x34
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fd4d 	bl	8004fce <USB_GetMode>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 84b7 	bne.w	8001eaa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fcb1 	bl	8004ea8 <USB_ReadInterrupts>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 84ad 	beq.w	8001ea8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fc9e 	bl	8004ea8 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b02      	cmp	r3, #2
 8001574:	d107      	bne.n	8001586 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695a      	ldr	r2, [r3, #20]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f002 0202 	and.w	r2, r2, #2
 8001584:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 fc8c 	bl	8004ea8 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b10      	cmp	r3, #16
 8001598:	d161      	bne.n	800165e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0210 	bic.w	r2, r2, #16
 80015a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 020f 	and.w	r2, r3, #15
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	3304      	adds	r3, #4
 80015c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	0c5b      	lsrs	r3, r3, #17
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d124      	bne.n	8001620 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d035      	beq.n	800164e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6a38      	ldr	r0, [r7, #32]
 80015f6:	f003 fac3 	bl	8004b80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001606:	441a      	add	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001618:	441a      	add	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	621a      	str	r2, [r3, #32]
 800161e:	e016      	b.n	800164e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	0c5b      	lsrs	r3, r3, #17
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	2b06      	cmp	r3, #6
 800162a:	d110      	bne.n	800164e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001632:	2208      	movs	r2, #8
 8001634:	4619      	mov	r1, r3
 8001636:	6a38      	ldr	r0, [r7, #32]
 8001638:	f003 faa2 	bl	8004b80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001648:	441a      	add	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0210 	orr.w	r2, r2, #16
 800165c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fc20 	bl	8004ea8 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001672:	f040 80a7 	bne.w	80017c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fc25 	bl	8004ece <USB_ReadDevAllOutEpInterrupt>
 8001684:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001686:	e099      	b.n	80017bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 808e 	beq.w	80017b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fc49 	bl	8004f36 <USB_ReadDevOutEPInterrupt>
 80016a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00c      	beq.n	80016ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	015a      	lsls	r2, r3, #5
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016bc:	461a      	mov	r2, r3
 80016be:	2301      	movs	r3, #1
 80016c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 feef 	bl	80024a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00c      	beq.n	80016ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	2308      	movs	r3, #8
 80016e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 ffc5 	bl	8002678 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001704:	461a      	mov	r2, r3
 8001706:	2310      	movs	r3, #16
 8001708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d030      	beq.n	8001776 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b80      	cmp	r3, #128	; 0x80
 800171e:	d109      	bne.n	8001734 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	78db      	ldrb	r3, [r3, #3]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2200      	movs	r2, #0
 8001756:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4619      	mov	r1, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f006 f81e 	bl	80077a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	015a      	lsls	r2, r3, #5
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001770:	461a      	mov	r2, r3
 8001772:	2302      	movs	r3, #2
 8001774:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178c:	461a      	mov	r2, r3
 800178e:	2320      	movs	r3, #32
 8001790:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a8:	461a      	mov	r2, r3
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	3301      	adds	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f af62 	bne.w	8001688 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fb6d 	bl	8004ea8 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d8:	f040 80db 	bne.w	8001992 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fb8e 	bl	8004f02 <USB_ReadDevAllInEpInterrupt>
 80017e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017ec:	e0cd      	b.n	800198a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80c2 	beq.w	800197e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fbb4 	bl	8004f72 <USB_ReadDevInEPInterrupt>
 800180a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d057      	beq.n	80018c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	2201      	movs	r2, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001836:	4013      	ands	r3, r2
 8001838:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001846:	461a      	mov	r2, r3
 8001848:	2301      	movs	r3, #1
 800184a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d132      	bne.n	80018ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	334c      	adds	r3, #76	; 0x4c
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4403      	add	r3, r0
 8001874:	3348      	adds	r3, #72	; 0x48
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4419      	add	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4403      	add	r3, r0
 8001888:	334c      	adds	r3, #76	; 0x4c
 800188a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	2b00      	cmp	r3, #0
 8001890:	d113      	bne.n	80018ba <HAL_PCD_IRQHandler+0x3a2>
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3354      	adds	r3, #84	; 0x54
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d108      	bne.n	80018ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018b2:	461a      	mov	r2, r3
 80018b4:	2101      	movs	r1, #1
 80018b6:	f003 fbbb 	bl	8005030 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f005 fee8 	bl	8007696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018dc:	461a      	mov	r2, r3
 80018de:	2308      	movs	r3, #8
 80018e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f8:	461a      	mov	r2, r3
 80018fa:	2310      	movs	r3, #16
 80018fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	461a      	mov	r2, r3
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001926:	6a38      	ldr	r0, [r7, #32]
 8001928:	f002 fa9c 	bl	8003e64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3338      	adds	r3, #56	; 0x38
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f005 ff35 	bl	80077c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001966:	461a      	mov	r2, r3
 8001968:	2302      	movs	r3, #2
 800196a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fd08 	bl	800238e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3301      	adds	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	f47f af2e 	bne.w	80017ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 fa86 	bl	8004ea8 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a6:	d122      	bne.n	80019ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019ce:	2100      	movs	r1, #0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f006 f8af 	bl	8007b34 <HAL_PCDEx_LPM_Callback>
 80019d6:	e002      	b.n	80019de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f005 fed3 	bl	8007784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fa58 	bl	8004ea8 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a02:	d112      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d102      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f005 fe8f 	bl	8007738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a28:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fa3a 	bl	8004ea8 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a3e:	d121      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a4e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d111      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a74:	2101      	movs	r1, #1
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f006 f85c 	bl	8007b34 <HAL_PCDEx_LPM_Callback>
 8001a7c:	e002      	b.n	8001a84 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f005 fe5a 	bl	8007738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fa0d 	bl	8004ea8 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a98:	f040 80b7 	bne.w	8001c0a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f9d4 	bl	8003e64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac0:	e046      	b.n	8001b50 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ad4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae6:	0151      	lsls	r1, r2, #5
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	440a      	add	r2, r1
 8001aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001af4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b02:	461a      	mov	r2, r3
 8001b04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b08:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1a:	0151      	lsls	r1, r2, #5
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	440a      	add	r2, r1
 8001b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3a:	0151      	lsls	r1, r2, #5
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	440a      	add	r2, r1
 8001b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b48:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3b3      	bcc.n	8001ac2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b68:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b86:	f043 030b 	orr.w	r3, r3, #11
 8001b8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b9c:	f043 030b 	orr.w	r3, r3, #11
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	e015      	b.n	8001bd0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bca:	f043 030b 	orr.w	r3, r3, #11
 8001bce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001be2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f003 fa1b 	bl	8005030 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 f94a 	bl	8004ea8 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c1e:	d124      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f9e0 	bl	8004fea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 f995 	bl	8003f5e <USB_GetDevSpeed>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681c      	ldr	r4, [r3, #0]
 8001c40:	f000 fec2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8001c44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f001 fe9a 	bl	8003988 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 fd46 	bl	80076e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f91a 	bl	8004ea8 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d10a      	bne.n	8001c94 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f005 fd23 	bl	80076ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 0208 	and.w	r2, r2, #8
 8001c92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 f905 	bl	8004ea8 <USB_ReadInterrupts>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d122      	bne.n	8001cee <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	e014      	b.n	8001ce4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fb27 	bl	800232c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3e5      	bcc.n	8001cba <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f8d8 	bl	8004ea8 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d02:	d13b      	bne.n	8001d7c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e02b      	b.n	8001d62 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3340      	adds	r3, #64	; 0x40
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d115      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da12      	bge.n	8001d5c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	333f      	adds	r3, #63	; 0x3f
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fae8 	bl	800232c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3ce      	bcc.n	8001d0a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 f891 	bl	8004ea8 <USB_ReadInterrupts>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d90:	d155      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	e045      	b.n	8001e24 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d12e      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da2b      	bge.n	8001e1e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001dd2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d121      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10a      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6053      	str	r3, [r2, #4]
            break;
 8001e1c:	e007      	b.n	8001e2e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3301      	adds	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3b4      	bcc.n	8001d98 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 f830 	bl	8004ea8 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d10a      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f005 fcc7 	bl	80077e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f81a 	bl	8004ea8 <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d115      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f005 fcb7 	bl	8007804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e000      	b.n	8001eaa <HAL_PCD_IRQHandler+0x992>
      return;
 8001ea8:	bf00      	nop
    }
  }
}
 8001eaa:	3734      	adds	r7, #52	; 0x34
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}

08001eb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_PCD_SetAddress+0x1a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e013      	b.n	8001ef2 <HAL_PCD_SetAddress+0x42>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 ff78 	bl	8004dd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	4608      	mov	r0, r1
 8001f04:	4611      	mov	r1, r2
 8001f06:	461a      	mov	r2, r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	70fb      	strb	r3, [r7, #3]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	803b      	strh	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da0f      	bge.n	8001f40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3338      	adds	r3, #56	; 0x38
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	705a      	strb	r2, [r3, #1]
 8001f3e:	e00f      	b.n	8001f60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f6c:	883a      	ldrh	r2, [r7, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	78ba      	ldrb	r2, [r7, #2]
 8001f76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f8a:	78bb      	ldrb	r3, [r7, #2]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d102      	bne.n	8001f96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_EP_Open+0xaa>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e00e      	b.n	8001fc2 <HAL_PCD_EP_Open+0xc8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fff8 	bl	8003fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da0f      	bge.n	8001ffe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00f      	b.n	800201e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_PCD_EP_Close+0x6e>
 8002034:	2302      	movs	r3, #2
 8002036:	e00e      	b.n	8002056 <HAL_PCD_EP_Close+0x8c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68f9      	ldr	r1, [r7, #12]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 f836 	bl	80040b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	460b      	mov	r3, r1
 800206c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	f002 fb15 	bl	8004700 <USB_EP0StartXfer>
 80020d6:	e008      	b.n	80020ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	f002 f8c3 	bl	8004270 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	460b      	mov	r3, r1
 8002132:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3338      	adds	r3, #56	; 0x38
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	3304      	adds	r3, #4
 800214a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2201      	movs	r2, #1
 8002162:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	b2da      	uxtb	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	6979      	ldr	r1, [r7, #20]
 8002196:	f002 fab3 	bl	8004700 <USB_EP0StartXfer>
 800219a:	e008      	b.n	80021ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	f002 f861 	bl	8004270 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 020f 	and.w	r2, r3, #15
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d901      	bls.n	80021d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e050      	b.n	8002278 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da0f      	bge.n	80021fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	705a      	strb	r2, [r3, #1]
 80021fc:	e00d      	b.n	800221a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_PCD_EP_SetStall+0x82>
 8002236:	2302      	movs	r3, #2
 8002238:	e01e      	b.n	8002278 <HAL_PCD_EP_SetStall+0xc0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fcf1 	bl	8004c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	b2d9      	uxtb	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002268:	461a      	mov	r2, r3
 800226a:	f002 fee1 	bl	8005030 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d901      	bls.n	800229e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e042      	b.n	8002324 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800229e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da0f      	bge.n	80022c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3338      	adds	r3, #56	; 0x38
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	705a      	strb	r2, [r3, #1]
 80022c4:	e00f      	b.n	80022e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 020f 	and.w	r2, r3, #15
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3304      	adds	r3, #4
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_EP_ClrStall+0x86>
 8002302:	2302      	movs	r3, #2
 8002304:	e00e      	b.n	8002324 <HAL_PCD_EP_ClrStall+0xa4>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fcf9 	bl	8004d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da0c      	bge.n	800235a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3338      	adds	r3, #56	; 0x38
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	e00c      	b.n	8002374 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fb18 	bl	80049b0 <USB_EPStopXfer>
 8002380:	4603      	mov	r3, r0
 8002382:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002384:	7afb      	ldrb	r3, [r7, #11]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b08a      	sub	sp, #40	; 0x28
 8002392:	af02      	add	r7, sp, #8
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3338      	adds	r3, #56	; 0x38
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d901      	bls.n	80023c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06c      	b.n	80024a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d902      	bls.n	80023e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3303      	adds	r3, #3
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ea:	e02b      	b.n	8002444 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d902      	bls.n	8002408 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3303      	adds	r3, #3
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002420:	b2db      	uxtb	r3, r3
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4603      	mov	r3, r0
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f002 fb6c 	bl	8004b04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	441a      	add	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	441a      	add	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	b29b      	uxth	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	429a      	cmp	r2, r3
 8002458:	d809      	bhi.n	800246e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002462:	429a      	cmp	r2, r3
 8002464:	d203      	bcs.n	800246e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1be      	bne.n	80023ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	429a      	cmp	r2, r3
 8002478:	d811      	bhi.n	800249e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	2201      	movs	r2, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	43db      	mvns	r3, r3
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800249a:	4013      	ands	r3, r2
 800249c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	333c      	adds	r3, #60	; 0x3c
 80024c0:	3304      	adds	r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d17b      	bne.n	80025d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4a61      	ldr	r2, [pc, #388]	; (8002670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f240 80b9 	bls.w	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80b3 	beq.w	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002510:	6093      	str	r3, [r2, #8]
 8002512:	e0a7      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252a:	461a      	mov	r2, r3
 800252c:	2320      	movs	r3, #32
 800252e:	6093      	str	r3, [r2, #8]
 8002530:	e098      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8093 	bne.w	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d90f      	bls.n	8002566 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	e07e      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	0159      	lsls	r1, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	440b      	add	r3, r1
 8002588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	1ad2      	subs	r2, r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	f002 fd3c 	bl	8005030 <USB_EP0_OutStart>
 80025b8:	e006      	b.n	80025c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	441a      	add	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f005 f846 	bl	8007660 <HAL_PCD_DataOutStageCallback>
 80025d4:	e046      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4a26      	ldr	r2, [pc, #152]	; (8002674 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d124      	bne.n	8002628 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f4:	461a      	mov	r2, r3
 80025f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	e032      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002614:	461a      	mov	r2, r3
 8002616:	2320      	movs	r3, #32
 8002618:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f005 f81d 	bl	8007660 <HAL_PCD_DataOutStageCallback>
 8002626:	e01d      	b.n	8002664 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <PCD_EP_OutXfrComplete_int+0x1b0>
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d108      	bne.n	8002658 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002650:	461a      	mov	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f002 fcec 	bl	8005030 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f004 fffe 	bl	8007660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	4f54300a 	.word	0x4f54300a
 8002674:	4f54310a 	.word	0x4f54310a

08002678 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	333c      	adds	r3, #60	; 0x3c
 8002690:	3304      	adds	r3, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <PCD_EP_OutSetupPacket_int+0x88>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d90e      	bls.n	80026cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f004 ffb5 	bl	800763c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <PCD_EP_OutSetupPacket_int+0x88>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d90c      	bls.n	80026f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026ec:	461a      	mov	r2, r3
 80026ee:	2101      	movs	r1, #1
 80026f0:	f002 fc9e 	bl	8005030 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	4f54300a 	.word	0x4f54300a

08002704 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	0419      	lsls	r1, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	430a      	orrs	r2, r1
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
 8002730:	e028      	b.n	8002784 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4413      	add	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e00d      	b.n	8002762 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3340      	adds	r3, #64	; 0x40
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	3b01      	subs	r3, #1
 8002768:	429a      	cmp	r2, r3
 800276a:	d3ec      	bcc.n	8002746 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800276c:	883b      	ldrh	r3, [r7, #0]
 800276e:	0418      	lsls	r0, r3, #16
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	3b01      	subs	r3, #1
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4302      	orrs	r2, r0
 800277c:	3340      	adds	r3, #64	; 0x40
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	f043 0303 	orr.w	r3, r3, #3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0cc      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d90c      	bls.n	8002838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e067      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7fe f9ce 	bl	8000c8c <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe f9ca 	bl	8000c8c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002982:	f000 fb57 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe f92e 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08007d10 	.word	0x08007d10
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000010 	.word	0x20000010

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000000c 	.word	0x2000000c

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	496c      	ldr	r1, [pc, #432]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d010      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002a46:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4960      	ldr	r1, [pc, #384]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a74:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4955      	ldr	r1, [pc, #340]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d101      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002a94:	2301      	movs	r3, #1
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abe:	4946      	ldr	r1, [pc, #280]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 808a 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b0a:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a33      	ldr	r2, [pc, #204]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b16:	f7fe f8b9 	bl	8000c8c <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe f8b5 	bl	8000c8c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e278      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b3c:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d02f      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d028      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d114      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe f883 	bl	8000c8c <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f87f 	bl	8000c8c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e240      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ee      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb8:	d114      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bce:	4902      	ldr	r1, [pc, #8]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
 8002bd4:	e00c      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42470e40 	.word	0x42470e40
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a49      	ldr	r2, [pc, #292]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	4944      	ldr	r1, [pc, #272]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002c16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002c24:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4937      	ldr	r1, [pc, #220]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c46:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c54:	492e      	ldr	r1, [pc, #184]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	4926      	ldr	r1, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c86:	d101      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	491a      	ldr	r1, [pc, #104]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d011      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	4911      	ldr	r1, [pc, #68]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cec:	f040 80ff 	bne.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf6:	f7fd ffc9 	bl	8000c8c <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cfc:	e00e      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cfe:	f7fd ffc5 	bl	8000c8c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d907      	bls.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e188      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	424711e0 	.word	0x424711e0
 8002d18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ea      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d028      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d124      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d50:	4b71      	ldr	r3, [pc, #452]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d68:	0e1b      	lsrs	r3, r3, #24
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	431a      	orrs	r2, r3
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	4961      	ldr	r1, [pc, #388]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d035      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc4:	d130      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dde:	0f1b      	lsrs	r3, r3, #28
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	019b      	lsls	r3, r3, #6
 8002df0:	431a      	orrs	r2, r3
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	4943      	ldr	r1, [pc, #268]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e16:	f023 021f 	bic.w	r2, r3, #31
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	493d      	ldr	r1, [pc, #244]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d029      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d124      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e56:	0f1b      	lsrs	r3, r3, #28
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	019b      	lsls	r3, r3, #6
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
 8002e74:	431a      	orrs	r2, r3
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	071b      	lsls	r3, r3, #28
 8002e80:	4925      	ldr	r1, [pc, #148]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	071b      	lsls	r3, r3, #28
 8002eba:	4917      	ldr	r1, [pc, #92]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fd fee0 	bl	8000c8c <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ed0:	f7fd fedc 	bl	8000c8c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e09f      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 8095 	bne.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002efc:	f7fd fec6 	bl	8000c8c <HAL_GetTick>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f02:	e00f      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f04:	f7fd fec2 	bl	8000c8c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d908      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e085      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	42470068 	.word	0x42470068
 8002f20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f24:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d0e8      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d02b      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d127      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	3301      	adds	r3, #1
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	041b      	lsls	r3, r3, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	4928      	ldr	r1, [pc, #160]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4922      	ldr	r1, [pc, #136]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fbe:	d118      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc6:	0e1b      	lsrs	r3, r3, #24
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	019b      	lsls	r3, r3, #6
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	4910      	ldr	r1, [pc, #64]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fd fe48 	bl	8000c8c <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003000:	f7fd fe44 	bl	8000c8c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e007      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301e:	d1ef      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3730      	adds	r7, #48	; 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	42470070 	.word	0x42470070

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b0a6      	sub	sp, #152	; 0x98
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305a:	4bc8      	ldr	r3, [pc, #800]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b0c      	cmp	r3, #12
 8003064:	f200 817e 	bhi.w	8003364 <HAL_RCC_GetSysClockFreq+0x330>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCC_GetSysClockFreq+0x3c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	08003365 	.word	0x08003365
 8003078:	08003365 	.word	0x08003365
 800307c:	08003365 	.word	0x08003365
 8003080:	080030ad 	.word	0x080030ad
 8003084:	08003365 	.word	0x08003365
 8003088:	08003365 	.word	0x08003365
 800308c:	08003365 	.word	0x08003365
 8003090:	080030b5 	.word	0x080030b5
 8003094:	08003365 	.word	0x08003365
 8003098:	08003365 	.word	0x08003365
 800309c:	08003365 	.word	0x08003365
 80030a0:	0800321f 	.word	0x0800321f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4bb6      	ldr	r3, [pc, #728]	; (8003380 <HAL_RCC_GetSysClockFreq+0x34c>)
 80030a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80030aa:	e15f      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ac:	4bb5      	ldr	r3, [pc, #724]	; (8003384 <HAL_RCC_GetSysClockFreq+0x350>)
 80030ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030b2:	e15b      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4bb1      	ldr	r3, [pc, #708]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c0:	4bae      	ldr	r3, [pc, #696]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d031      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030cc:	4bab      	ldr	r3, [pc, #684]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	2200      	movs	r2, #0
 80030d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	663b      	str	r3, [r7, #96]	; 0x60
 80030e0:	2300      	movs	r3, #0
 80030e2:	667b      	str	r3, [r7, #100]	; 0x64
 80030e4:	4ba7      	ldr	r3, [pc, #668]	; (8003384 <HAL_RCC_GetSysClockFreq+0x350>)
 80030e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030ea:	462a      	mov	r2, r5
 80030ec:	fb03 f202 	mul.w	r2, r3, r2
 80030f0:	2300      	movs	r3, #0
 80030f2:	4621      	mov	r1, r4
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	4aa2      	ldr	r2, [pc, #648]	; (8003384 <HAL_RCC_GetSysClockFreq+0x350>)
 80030fc:	4621      	mov	r1, r4
 80030fe:	fba1 1202 	umull	r1, r2, r1, r2
 8003102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003104:	460a      	mov	r2, r1
 8003106:	67ba      	str	r2, [r7, #120]	; 0x78
 8003108:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800310a:	4413      	add	r3, r2
 800310c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800310e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003112:	2200      	movs	r2, #0
 8003114:	65bb      	str	r3, [r7, #88]	; 0x58
 8003116:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003118:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800311c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003120:	f7fd f870 	bl	8000204 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800312e:	e064      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003130:	4b92      	ldr	r3, [pc, #584]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	2200      	movs	r2, #0
 8003138:	653b      	str	r3, [r7, #80]	; 0x50
 800313a:	657a      	str	r2, [r7, #84]	; 0x54
 800313c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
 8003144:	2300      	movs	r3, #0
 8003146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003148:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800314c:	4622      	mov	r2, r4
 800314e:	462b      	mov	r3, r5
 8003150:	f04f 0000 	mov.w	r0, #0
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	0159      	lsls	r1, r3, #5
 800315a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315e:	0150      	lsls	r0, r2, #5
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4621      	mov	r1, r4
 8003166:	1a51      	subs	r1, r2, r1
 8003168:	6139      	str	r1, [r7, #16]
 800316a:	4629      	mov	r1, r5
 800316c:	eb63 0301 	sbc.w	r3, r3, r1
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800317e:	4659      	mov	r1, fp
 8003180:	018b      	lsls	r3, r1, #6
 8003182:	4651      	mov	r1, sl
 8003184:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003188:	4651      	mov	r1, sl
 800318a:	018a      	lsls	r2, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ebb2 0801 	subs.w	r8, r2, r1
 8003192:	4659      	mov	r1, fp
 8003194:	eb63 0901 	sbc.w	r9, r3, r1
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ac:	4690      	mov	r8, r2
 80031ae:	4699      	mov	r9, r3
 80031b0:	4623      	mov	r3, r4
 80031b2:	eb18 0303 	adds.w	r3, r8, r3
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	462b      	mov	r3, r5
 80031ba:	eb49 0303 	adc.w	r3, r9, r3
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031cc:	4629      	mov	r1, r5
 80031ce:	028b      	lsls	r3, r1, #10
 80031d0:	4621      	mov	r1, r4
 80031d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d6:	4621      	mov	r1, r4
 80031d8:	028a      	lsls	r2, r1, #10
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e2:	2200      	movs	r2, #0
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
 80031e6:	647a      	str	r2, [r7, #68]	; 0x44
 80031e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ec:	f7fd f80a 	bl	8000204 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031fa:	4b60      	ldr	r3, [pc, #384]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	3301      	adds	r3, #1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800320c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800321c:	e0a6      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321e:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003226:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322a:	4b54      	ldr	r3, [pc, #336]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02a      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b51      	ldr	r3, [pc, #324]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	2200      	movs	r2, #0
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003248:	2100      	movs	r1, #0
 800324a:	4b4e      	ldr	r3, [pc, #312]	; (8003384 <HAL_RCC_GetSysClockFreq+0x350>)
 800324c:	fb03 f201 	mul.w	r2, r3, r1
 8003250:	2300      	movs	r3, #0
 8003252:	fb00 f303 	mul.w	r3, r0, r3
 8003256:	4413      	add	r3, r2
 8003258:	4a4a      	ldr	r2, [pc, #296]	; (8003384 <HAL_RCC_GetSysClockFreq+0x350>)
 800325a:	fba0 1202 	umull	r1, r2, r0, r2
 800325e:	677a      	str	r2, [r7, #116]	; 0x74
 8003260:	460a      	mov	r2, r1
 8003262:	673a      	str	r2, [r7, #112]	; 0x70
 8003264:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003266:	4413      	add	r3, r2
 8003268:	677b      	str	r3, [r7, #116]	; 0x74
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	2200      	movs	r2, #0
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
 8003272:	637a      	str	r2, [r7, #52]	; 0x34
 8003274:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003278:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800327c:	f7fc ffc2 	bl	8000204 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800328a:	e05b      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	2200      	movs	r2, #0
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
 8003296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	f04f 0000 	mov.w	r0, #0
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	0159      	lsls	r1, r3, #5
 80032b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ba:	0150      	lsls	r0, r2, #5
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4641      	mov	r1, r8
 80032c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032e0:	ebb2 040a 	subs.w	r4, r2, sl
 80032e4:	eb63 050b 	sbc.w	r5, r3, fp
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	00eb      	lsls	r3, r5, #3
 80032f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f6:	00e2      	lsls	r2, r4, #3
 80032f8:	4614      	mov	r4, r2
 80032fa:	461d      	mov	r5, r3
 80032fc:	4643      	mov	r3, r8
 80032fe:	18e3      	adds	r3, r4, r3
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	464b      	mov	r3, r9
 8003304:	eb45 0303 	adc.w	r3, r5, r3
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003316:	4629      	mov	r1, r5
 8003318:	028b      	lsls	r3, r1, #10
 800331a:	4621      	mov	r1, r4
 800331c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003320:	4621      	mov	r1, r4
 8003322:	028a      	lsls	r2, r1, #10
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332c:	2200      	movs	r2, #0
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003336:	f7fc ff65 	bl	8000204 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <HAL_RCC_GetSysClockFreq+0x348>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0f1b      	lsrs	r3, r3, #28
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003362:	e003      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800336a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003370:	4618      	mov	r0, r3
 8003372:	3798      	adds	r7, #152	; 0x98
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	00d59f80 	.word	0x00d59f80

08003388 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e28d      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8083 	beq.w	80034ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a8:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d019      	beq.n	80033e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033c0:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d00c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d112      	bne.n	8003400 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e6:	d10b      	bne.n	8003400 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d05b      	beq.n	80034ac <HAL_RCC_OscConfig+0x124>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d157      	bne.n	80034ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e25a      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x90>
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e01d      	b.n	8003454 <HAL_RCC_OscConfig+0xcc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0xb4>
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0xcc>
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6e      	ldr	r2, [pc, #440]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a6b      	ldr	r2, [pc, #428]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fc16 	bl	8000c8c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7fd fc12 	bl	8000c8c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e21f      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0xdc>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd fc02 	bl	8000c8c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd fbfe 	bl	8000c8c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e20b      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	4b57      	ldr	r3, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x104>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06f      	beq.n	800359a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d017      	beq.n	80034f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034c6:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d105      	bne.n	80034de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034d2:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x186>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1d3      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_RCC_OscConfig+0x278>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fd fbab 	bl	8000c8c <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353a:	f7fd fba7 	bl	8000c8c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1b4      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4925      	ldr	r1, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x278>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd fb8a 	bl	8000c8c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357c:	f7fd fb86 	bl	8000c8c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e193      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d036      	beq.n	8003614 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fb6a 	bl	8000c8c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035bc:	f7fd fb66 	bl	8000c8c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e173      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x234>
 80035da:	e01b      	b.n	8003614 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x27c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fd fb53 	bl	8000c8c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	e00e      	b.n	8003608 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fd fb4f 	bl	8000c8c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d907      	bls.n	8003608 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e15c      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ea      	bne.n	80035ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8097 	beq.w	8003750 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003626:	4b83      	ldr	r3, [pc, #524]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b7f      	ldr	r3, [pc, #508]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a7e      	ldr	r2, [pc, #504]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b7c      	ldr	r3, [pc, #496]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	4b79      	ldr	r3, [pc, #484]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a75      	ldr	r2, [pc, #468]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fd fb0f 	bl	8000c8c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fd fb0b 	bl	8000c8c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e118      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x4b0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x31e>
 8003698:	4b66      	ldr	r3, [pc, #408]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	e01c      	b.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x340>
 80036ae:	4b61      	ldr	r3, [pc, #388]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0x358>
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b57      	ldr	r3, [pc, #348]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80036da:	f023 0304 	bic.w	r3, r3, #4
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d015      	beq.n	8003714 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fad0 	bl	8000c8c <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd facc 	bl	8000c8c <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0d7      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0ee      	beq.n	80036f0 <HAL_RCC_OscConfig+0x368>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd faba 	bl	8000c8c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fab6 	bl	8000c8c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0c1      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d105      	bne.n	8003750 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003744:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80ad 	beq.w	80038b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d060      	beq.n	8003828 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d145      	bne.n	80037fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd fa8a 	bl	8000c8c <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fa86 	bl	8000c8c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e093      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	3b01      	subs	r3, #1
 80037b4:	041b      	lsls	r3, r3, #16
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	491b      	ldr	r1, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fa5b 	bl	8000c8c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fd fa57 	bl	8000c8c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e064      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x452>
 80037f8:	e05c      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x4b4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fa44 	bl	8000c8c <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fa40 	bl	8000c8c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e04d      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x480>
 8003826:	e045      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e040      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
 8003834:	40023800 	.word	0x40023800
 8003838:	40007000 	.word	0x40007000
 800383c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCC_OscConfig+0x538>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d030      	beq.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d129      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d122      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	4293      	cmp	r3, r2
 800387a:	d119      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d10f      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038c4:	b084      	sub	sp, #16
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	f107 001c 	add.w	r0, r7, #28
 80038d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d122      	bne.n	8003922 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f001 fbe8 	bl	80050ec <USB_CoreReset>
 800391c:	4603      	mov	r3, r0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e01a      	b.n	8003958 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f001 fbdc 	bl	80050ec <USB_CoreReset>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
 800394a:	e005      	b.n	8003958 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10b      	bne.n	8003976 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f043 0206 	orr.w	r2, r3, #6
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003976:	7bfb      	ldrb	r3, [r7, #15]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003982:	b004      	add	sp, #16
 8003984:	4770      	bx	lr
	...

08003988 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d165      	bne.n	8003a68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4a41      	ldr	r2, [pc, #260]	; (8003aa4 <USB_SetTurnaroundTime+0x11c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d906      	bls.n	80039b2 <USB_SetTurnaroundTime+0x2a>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <USB_SetTurnaroundTime+0x120>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d202      	bcs.n	80039b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80039ac:	230f      	movs	r3, #15
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e062      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <USB_SetTurnaroundTime+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d306      	bcc.n	80039c8 <USB_SetTurnaroundTime+0x40>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <USB_SetTurnaroundTime+0x124>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d202      	bcs.n	80039c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80039c2:	230e      	movs	r3, #14
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e057      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <USB_SetTurnaroundTime+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d306      	bcc.n	80039de <USB_SetTurnaroundTime+0x56>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4a37      	ldr	r2, [pc, #220]	; (8003ab0 <USB_SetTurnaroundTime+0x128>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d202      	bcs.n	80039de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80039d8:	230d      	movs	r3, #13
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e04c      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4a33      	ldr	r2, [pc, #204]	; (8003ab0 <USB_SetTurnaroundTime+0x128>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d306      	bcc.n	80039f4 <USB_SetTurnaroundTime+0x6c>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a32      	ldr	r2, [pc, #200]	; (8003ab4 <USB_SetTurnaroundTime+0x12c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d802      	bhi.n	80039f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80039ee:	230c      	movs	r3, #12
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e041      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <USB_SetTurnaroundTime+0x12c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d906      	bls.n	8003a0a <USB_SetTurnaroundTime+0x82>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <USB_SetTurnaroundTime+0x130>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d802      	bhi.n	8003a0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a04:	230b      	movs	r3, #11
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	e036      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <USB_SetTurnaroundTime+0x130>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d906      	bls.n	8003a20 <USB_SetTurnaroundTime+0x98>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4a29      	ldr	r2, [pc, #164]	; (8003abc <USB_SetTurnaroundTime+0x134>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e02b      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <USB_SetTurnaroundTime+0x134>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d906      	bls.n	8003a36 <USB_SetTurnaroundTime+0xae>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <USB_SetTurnaroundTime+0x138>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d202      	bcs.n	8003a36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a30:	2309      	movs	r3, #9
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e020      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <USB_SetTurnaroundTime+0x138>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d306      	bcc.n	8003a4c <USB_SetTurnaroundTime+0xc4>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <USB_SetTurnaroundTime+0x13c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d802      	bhi.n	8003a4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a46:	2308      	movs	r3, #8
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e015      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <USB_SetTurnaroundTime+0x13c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d906      	bls.n	8003a62 <USB_SetTurnaroundTime+0xda>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <USB_SetTurnaroundTime+0x140>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d202      	bcs.n	8003a62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a5c:	2307      	movs	r3, #7
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e00a      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a62:	2306      	movs	r3, #6
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e007      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a6e:	2309      	movs	r3, #9
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e001      	b.n	8003a78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a74:	2309      	movs	r3, #9
 8003a76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	029b      	lsls	r3, r3, #10
 8003a8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a90:	431a      	orrs	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	00d8acbf 	.word	0x00d8acbf
 8003aa8:	00e4e1c0 	.word	0x00e4e1c0
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	01067380 	.word	0x01067380
 8003ab4:	011a499f 	.word	0x011a499f
 8003ab8:	01312cff 	.word	0x01312cff
 8003abc:	014ca43f 	.word	0x014ca43f
 8003ac0:	016e3600 	.word	0x016e3600
 8003ac4:	01a6ab1f 	.word	0x01a6ab1f
 8003ac8:	01e84800 	.word	0x01e84800

08003acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d115      	bne.n	8003b5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7fd f8b0 	bl	8000ca4 <HAL_Delay>
      ms++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f001 fa3f 	bl	8004fce <USB_GetMode>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d01e      	beq.n	8003b94 <USB_SetCurrentMode+0x84>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b31      	cmp	r3, #49	; 0x31
 8003b5a:	d9f0      	bls.n	8003b3e <USB_SetCurrentMode+0x2e>
 8003b5c:	e01a      	b.n	8003b94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d115      	bne.n	8003b90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b70:	2001      	movs	r0, #1
 8003b72:	f7fd f897 	bl	8000ca4 <HAL_Delay>
      ms++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f001 fa26 	bl	8004fce <USB_GetMode>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <USB_SetCurrentMode+0x84>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b31      	cmp	r3, #49	; 0x31
 8003b8c:	d9f0      	bls.n	8003b70 <USB_SetCurrentMode+0x60>
 8003b8e:	e001      	b.n	8003b94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e005      	b.n	8003ba0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b32      	cmp	r3, #50	; 0x32
 8003b98:	d101      	bne.n	8003b9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ba8:	b084      	sub	sp, #16
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b086      	sub	sp, #24
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e009      	b.n	8003bdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3340      	adds	r3, #64	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b0e      	cmp	r3, #14
 8003be0:	d9f2      	bls.n	8003bc8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11c      	bne.n	8003c22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e005      	b.n	8003c2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c34:	461a      	mov	r2, r3
 8003c36:	2300      	movs	r3, #0
 8003c38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	4619      	mov	r1, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	461a      	mov	r2, r3
 8003c4a:	680b      	ldr	r3, [r1, #0]
 8003c4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d10c      	bne.n	8003c6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f965 	bl	8003f2c <USB_SetDevSpeed>
 8003c62:	e008      	b.n	8003c76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c64:	2101      	movs	r1, #1
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f960 	bl	8003f2c <USB_SetDevSpeed>
 8003c6c:	e003      	b.n	8003c76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f95b 	bl	8003f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c76:	2110      	movs	r1, #16
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8f3 	bl	8003e64 <USB_FlushTxFifo>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f91f 	bl	8003ecc <USB_FlushRxFifo>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	461a      	mov	r2, r3
 8003cac:	2300      	movs	r3, #0
 8003cae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	e043      	b.n	8003d4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cd8:	d118      	bne.n	8003d0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e013      	b.n	8003d1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	461a      	mov	r2, r3
 8003d04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e008      	b.n	8003d1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3301      	adds	r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3b7      	bcc.n	8003cc2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	e043      	b.n	8003de0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d6e:	d118      	bne.n	8003da2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d82:	461a      	mov	r2, r3
 8003d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e013      	b.n	8003db4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e008      	b.n	8003db4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3b7      	bcc.n	8003d58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f043 0210 	orr.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <USB_DevInit+0x2b8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e48:	f043 0304 	orr.w	r3, r3, #4
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e5c:	b004      	add	sp, #16
 8003e5e:	4770      	bx	lr
 8003e60:	803c3800 	.word	0x803c3800

08003e64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <USB_FlushTxFifo+0x64>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e01b      	b.n	8003ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	daf2      	bge.n	8003e72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	019b      	lsls	r3, r3, #6
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <USB_FlushTxFifo+0x64>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e006      	b.n	8003ebc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d0f0      	beq.n	8003e9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	00030d40 	.word	0x00030d40

08003ecc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <USB_FlushRxFifo+0x5c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e018      	b.n	8003f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	daf2      	bge.n	8003ed8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <USB_FlushRxFifo+0x5c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d901      	bls.n	8003f0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e006      	b.n	8003f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d0f0      	beq.n	8003efc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	00030d40 	.word	0x00030d40

08003f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0306 	and.w	r3, r3, #6
 8003f76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
 8003f82:	e00a      	b.n	8003f9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d002      	beq.n	8003f90 <USB_GetDevSpeed+0x32>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d102      	bne.n	8003f96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f90:	2302      	movs	r3, #2
 8003f92:	75fb      	strb	r3, [r7, #23]
 8003f94:	e001      	b.n	8003f9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f96:	230f      	movs	r3, #15
 8003f98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d13a      	bne.n	800403a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d155      	bne.n	80040a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	791b      	ldrb	r3, [r3, #4]
 8004016:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004018:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	059b      	lsls	r3, r3, #22
 800401e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004020:	4313      	orrs	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	e036      	b.n	80040a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004058:	4313      	orrs	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d11a      	bne.n	80040a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	791b      	ldrb	r3, [r3, #4]
 800408c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800408e:	430b      	orrs	r3, r1
 8004090:	4313      	orrs	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d161      	bne.n	8004198 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ea:	d11f      	bne.n	800412c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	440a      	add	r2, r1
 8004102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800410a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800412a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f303 	lsl.w	r3, r1, r3
 8004142:	b29b      	uxth	r3, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414c:	4013      	ands	r3, r2
 800414e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	68f9      	ldr	r1, [r7, #12]
 800416c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004170:	4013      	ands	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0159      	lsls	r1, r3, #5
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	440b      	add	r3, r1
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	4619      	mov	r1, r3
 8004190:	4b35      	ldr	r3, [pc, #212]	; (8004268 <USB_DeactivateEndpoint+0x1b0>)
 8004192:	4013      	ands	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
 8004196:	e060      	b.n	800425a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ae:	d11f      	bne.n	80041f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f303 	lsl.w	r3, r1, r3
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	43db      	mvns	r3, r3
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004210:	4013      	ands	r3, r2
 8004212:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	43db      	mvns	r3, r3
 800422e:	68f9      	ldr	r1, [r7, #12]
 8004230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004234:	4013      	ands	r3, r2
 8004236:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	0159      	lsls	r1, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	440b      	add	r3, r1
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	4619      	mov	r1, r3
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <USB_DeactivateEndpoint+0x1b4>)
 8004256:	4013      	ands	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	ec337800 	.word	0xec337800
 800426c:	eff37800 	.word	0xeff37800

08004270 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b01      	cmp	r3, #1
 800428e:	f040 815c 	bne.w	800454a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d132      	bne.n	8004300 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f8:	0cdb      	lsrs	r3, r3, #19
 80042fa:	04db      	lsls	r3, r3, #19
 80042fc:	6113      	str	r3, [r2, #16]
 80042fe:	e074      	b.n	80043ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	0cdb      	lsrs	r3, r3, #19
 800431c:	04db      	lsls	r3, r3, #19
 800431e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800433e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	440b      	add	r3, r1
 800435c:	1e59      	subs	r1, r3, #1
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004368:	4b9d      	ldr	r3, [pc, #628]	; (80045e0 <USB_EPStartXfer+0x370>)
 800436a:	400b      	ands	r3, r1
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	0148      	lsls	r0, r1, #5
 8004370:	69f9      	ldr	r1, [r7, #28]
 8004372:	4401      	add	r1, r0
 8004374:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	0148      	lsls	r0, r1, #5
 8004396:	69f9      	ldr	r1, [r7, #28]
 8004398:	4401      	add	r1, r0
 800439a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800439e:	4313      	orrs	r3, r2
 80043a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	791b      	ldrb	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d11f      	bne.n	80043ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d14b      	bne.n	8004488 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d128      	bne.n	8004466 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d110      	bne.n	8004446 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	e00f      	b.n	8004466 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	440a      	add	r2, r1
 800445c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004464:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	0151      	lsls	r1, r2, #5
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	440a      	add	r2, r1
 800447c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004480:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e133      	b.n	80046f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	791b      	ldrb	r3, [r3, #4]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d015      	beq.n	80044dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 811b 	beq.w	80046f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d6:	4313      	orrs	r3, r2
 80044d8:	634b      	str	r3, [r1, #52]	; 0x34
 80044da:	e109      	b.n	80046f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d110      	bne.n	800450e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e00f      	b.n	800452e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6919      	ldr	r1, [r3, #16]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	b298      	uxth	r0, r3
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4603      	mov	r3, r0
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fade 	bl	8004b04 <USB_WritePacket>
 8004548:	e0d2      	b.n	80046f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004564:	0cdb      	lsrs	r3, r3, #19
 8004566:	04db      	lsls	r3, r3, #19
 8004568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	440a      	add	r2, r1
 8004580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004584:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004588:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800458c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d126      	bne.n	80045e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	0148      	lsls	r0, r1, #5
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	4401      	add	r1, r0
 80045b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045b8:	4313      	orrs	r3, r2
 80045ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045da:	6113      	str	r3, [r2, #16]
 80045dc:	e03a      	b.n	8004654 <USB_EPStartXfer+0x3e4>
 80045de:	bf00      	nop
 80045e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	8afa      	ldrh	r2, [r7, #22]
 8004600:	fb03 f202 	mul.w	r2, r3, r2
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	8afb      	ldrh	r3, [r7, #22]
 8004618:	04d9      	lsls	r1, r3, #19
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <USB_EPStartXfer+0x48c>)
 800461c:	400b      	ands	r3, r1
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	0148      	lsls	r0, r1, #5
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	4401      	add	r1, r0
 8004626:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004644:	69b9      	ldr	r1, [r7, #24]
 8004646:	0148      	lsls	r0, r1, #5
 8004648:	69f9      	ldr	r1, [r7, #28]
 800464a:	4401      	add	r1, r0
 800464c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d10d      	bne.n	8004676 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6919      	ldr	r1, [r3, #16]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	460a      	mov	r2, r1
 8004674:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	791b      	ldrb	r3, [r3, #4]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d128      	bne.n	80046d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e00f      	b.n	80046d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	1ff80000 	.word	0x1ff80000

08004700 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80ce 	bne.w	80048be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d132      	bne.n	8004790 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800474c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004788:	0cdb      	lsrs	r3, r3, #19
 800478a:	04db      	lsls	r3, r3, #19
 800478c:	6113      	str	r3, [r2, #16]
 800478e:	e04e      	b.n	800482e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047aa:	0cdb      	lsrs	r3, r3, #19
 80047ac:	04db      	lsls	r3, r3, #19
 80047ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d903      	bls.n	80047e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	0148      	lsls	r0, r1, #5
 8004822:	6979      	ldr	r1, [r7, #20]
 8004824:	4401      	add	r1, r0
 8004826:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11e      	bne.n	8004872 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	e097      	b.n	80049a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	440a      	add	r2, r1
 8004888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004890:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8083 	beq.w	80049a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b8:	4313      	orrs	r3, r2
 80048ba:	634b      	str	r3, [r1, #52]	; 0x34
 80048bc:	e071      	b.n	80049a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	0cdb      	lsrs	r3, r3, #19
 80048da:	04db      	lsls	r3, r3, #19
 80048dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004900:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	0148      	lsls	r0, r1, #5
 8004954:	6979      	ldr	r1, [r7, #20]
 8004956:	4401      	add	r1, r0
 8004958:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800495c:	4313      	orrs	r3, r2
 800495e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10d      	bne.n	8004982 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6919      	ldr	r1, [r3, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	460a      	mov	r2, r1
 8004980:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	0151      	lsls	r1, r2, #5
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	440a      	add	r2, r1
 8004998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800499c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d14a      	bne.n	8004a64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e6:	f040 8086 	bne.w	8004af6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d902      	bls.n	8004a48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
          break;
 8004a46:	e056      	b.n	8004af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a60:	d0e7      	beq.n	8004a32 <USB_EPStopXfer+0x82>
 8004a62:	e048      	b.n	8004af6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a7c:	d13b      	bne.n	8004af6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	7812      	ldrb	r2, [r2, #0]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d902      	bls.n	8004adc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8004ada:	e00c      	b.n	8004af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af4:	d0e7      	beq.n	8004ac6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	460b      	mov	r3, r1
 8004b14:	71fb      	strb	r3, [r7, #7]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d123      	bne.n	8004b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b2a:	88bb      	ldrh	r3, [r7, #4]
 8004b2c:	3303      	adds	r3, #3
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e018      	b.n	8004b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	031a      	lsls	r2, r3, #12
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b44:	461a      	mov	r2, r3
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3301      	adds	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	3301      	adds	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3e2      	bcc.n	8004b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3724      	adds	r7, #36	; 0x24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b08b      	sub	sp, #44	; 0x2c
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	089b      	lsrs	r3, r3, #2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	e014      	b.n	8004bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	3301      	adds	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	3301      	adds	r3, #1
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3e6      	bcc.n	8004bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004bde:	8bfb      	ldrh	r3, [r7, #30]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01e      	beq.n	8004c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f107 0310 	add.w	r3, r7, #16
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	701a      	strb	r2, [r3, #0]
      i++;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	3301      	adds	r3, #1
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004c16:	8bfb      	ldrh	r3, [r7, #30]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c1c:	8bfb      	ldrh	r3, [r7, #30]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ea      	bne.n	8004bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	372c      	adds	r7, #44	; 0x2c
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	785b      	ldrb	r3, [r3, #1]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d12c      	bne.n	8004ca6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	db12      	blt.n	8004c84 <USB_EPSetStall+0x54>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	0151      	lsls	r1, r2, #5
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	440a      	add	r2, r1
 8004c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02b      	b.n	8004cfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	db12      	blt.n	8004cde <USB_EPSetStall+0xae>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00f      	beq.n	8004cde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d128      	bne.n	8004d7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	791b      	ldrb	r3, [r3, #4]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d003      	beq.n	8004d58 <USB_EPClearStall+0x4c>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	791b      	ldrb	r3, [r3, #4]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d138      	bne.n	8004dca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e027      	b.n	8004dca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d003      	beq.n	8004daa <USB_EPClearStall+0x9e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d10f      	bne.n	8004dca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f023 0302 	bic.w	r3, r3, #2
 8004e56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	0c1b      	lsrs	r3, r3, #16
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4013      	ands	r3, r2
 8004f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	b29b      	uxth	r3, r3
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f64:	68bb      	ldr	r3, [r7, #8]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa2:	01db      	lsls	r3, r3, #7
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f003 0301 	and.w	r3, r3, #1
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005008:	f023 0307 	bic.w	r3, r3, #7
 800500c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	460b      	mov	r3, r1
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	333c      	adds	r3, #60	; 0x3c
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <USB_EP0_OutStart+0xb8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d90a      	bls.n	800506a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005064:	d101      	bne.n	800506a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e037      	b.n	80050da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	f043 0318 	orr.w	r3, r3, #24
 800509c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80050b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10f      	bne.n	80050d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80050d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	4f54300a 	.word	0x4f54300a

080050ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a13      	ldr	r2, [pc, #76]	; (8005150 <USB_CoreReset+0x64>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e01b      	b.n	8005142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	daf2      	bge.n	80050f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f043 0201 	orr.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <USB_CoreReset+0x64>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d0f0      	beq.n	8005122 <USB_CoreReset+0x36>

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	00030d40 	.word	0x00030d40

08005154 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005160:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005164:	f002 fd34 	bl	8007bd0 <USBD_static_malloc>
 8005168:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d109      	bne.n	8005184 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	32b0      	adds	r2, #176	; 0xb0
 800517a:	2100      	movs	r1, #0
 800517c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005180:	2302      	movs	r3, #2
 8005182:	e0d4      	b.n	800532e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005184:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005188:	2100      	movs	r1, #0
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f002 fd88 	bl	8007ca0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	32b0      	adds	r2, #176	; 0xb0
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	32b0      	adds	r2, #176	; 0xb0
 80051aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7c1b      	ldrb	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d138      	bne.n	800522e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051bc:	4b5e      	ldr	r3, [pc, #376]	; (8005338 <USBD_CDC_Init+0x1e4>)
 80051be:	7819      	ldrb	r1, [r3, #0]
 80051c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051c4:	2202      	movs	r2, #2
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f002 fb91 	bl	80078ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051cc:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <USBD_CDC_Init+0x1e4>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3324      	adds	r3, #36	; 0x24
 80051e2:	2201      	movs	r2, #1
 80051e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80051e6:	4b55      	ldr	r3, [pc, #340]	; (800533c <USBD_CDC_Init+0x1e8>)
 80051e8:	7819      	ldrb	r1, [r3, #0]
 80051ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ee:	2202      	movs	r2, #2
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f002 fb7c 	bl	80078ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80051f6:	4b51      	ldr	r3, [pc, #324]	; (800533c <USBD_CDC_Init+0x1e8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f003 020f 	and.w	r2, r3, #15
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800520e:	2201      	movs	r2, #1
 8005210:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005212:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <USBD_CDC_Init+0x1ec>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f003 020f 	and.w	r2, r3, #15
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	3326      	adds	r3, #38	; 0x26
 8005228:	2210      	movs	r2, #16
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e035      	b.n	800529a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800522e:	4b42      	ldr	r3, [pc, #264]	; (8005338 <USBD_CDC_Init+0x1e4>)
 8005230:	7819      	ldrb	r1, [r3, #0]
 8005232:	2340      	movs	r3, #64	; 0x40
 8005234:	2202      	movs	r2, #2
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f002 fb59 	bl	80078ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800523c:	4b3e      	ldr	r3, [pc, #248]	; (8005338 <USBD_CDC_Init+0x1e4>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	3324      	adds	r3, #36	; 0x24
 8005252:	2201      	movs	r2, #1
 8005254:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <USBD_CDC_Init+0x1e8>)
 8005258:	7819      	ldrb	r1, [r3, #0]
 800525a:	2340      	movs	r3, #64	; 0x40
 800525c:	2202      	movs	r2, #2
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f002 fb45 	bl	80078ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005264:	4b35      	ldr	r3, [pc, #212]	; (800533c <USBD_CDC_Init+0x1e8>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800527c:	2201      	movs	r2, #1
 800527e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <USBD_CDC_Init+0x1ec>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3326      	adds	r3, #38	; 0x26
 8005296:	2210      	movs	r2, #16
 8005298:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800529a:	4b29      	ldr	r3, [pc, #164]	; (8005340 <USBD_CDC_Init+0x1ec>)
 800529c:	7819      	ldrb	r1, [r3, #0]
 800529e:	2308      	movs	r3, #8
 80052a0:	2203      	movs	r2, #3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f002 fb23 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <USBD_CDC_Init+0x1ec>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f003 020f 	and.w	r2, r3, #15
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3324      	adds	r3, #36	; 0x24
 80052be:	2201      	movs	r2, #1
 80052c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	33b0      	adds	r3, #176	; 0xb0
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80052f8:	2302      	movs	r3, #2
 80052fa:	e018      	b.n	800532e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7c1b      	ldrb	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <USBD_CDC_Init+0x1e8>)
 8005306:	7819      	ldrb	r1, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800530e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f002 fbda 	bl	8007acc <USBD_LL_PrepareReceive>
 8005318:	e008      	b.n	800532c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800531a:	4b08      	ldr	r3, [pc, #32]	; (800533c <USBD_CDC_Init+0x1e8>)
 800531c:	7819      	ldrb	r1, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f002 fbd0 	bl	8007acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000009f 	.word	0x2000009f
 800533c:	200000a0 	.word	0x200000a0
 8005340:	200000a1 	.word	0x200000a1

08005344 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005350:	4b3a      	ldr	r3, [pc, #232]	; (800543c <USBD_CDC_DeInit+0xf8>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f002 faef 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800535c:	4b37      	ldr	r3, [pc, #220]	; (800543c <USBD_CDC_DeInit+0xf8>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 020f 	and.w	r2, r3, #15
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	2200      	movs	r2, #0
 8005374:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005376:	4b32      	ldr	r3, [pc, #200]	; (8005440 <USBD_CDC_DeInit+0xfc>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f002 fadc 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005382:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <USBD_CDC_DeInit+0xfc>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800539a:	2200      	movs	r2, #0
 800539c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <USBD_CDC_DeInit+0x100>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f002 fac8 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <USBD_CDC_DeInit+0x100>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	3324      	adds	r3, #36	; 0x24
 80053c0:	2200      	movs	r2, #0
 80053c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053c4:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <USBD_CDC_DeInit+0x100>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3326      	adds	r3, #38	; 0x26
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	32b0      	adds	r2, #176	; 0xb0
 80053e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01f      	beq.n	8005430 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	33b0      	adds	r3, #176	; 0xb0
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	32b0      	adds	r2, #176	; 0xb0
 800540e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005412:	4618      	mov	r0, r3
 8005414:	f002 fbea 	bl	8007bec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	32b0      	adds	r2, #176	; 0xb0
 8005422:	2100      	movs	r1, #0
 8005424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000009f 	.word	0x2000009f
 8005440:	200000a0 	.word	0x200000a0
 8005444:	200000a1 	.word	0x200000a1

08005448 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	32b0      	adds	r2, #176	; 0xb0
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e0bf      	b.n	80055f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005480:	2b00      	cmp	r3, #0
 8005482:	d050      	beq.n	8005526 <USBD_CDC_Setup+0xde>
 8005484:	2b20      	cmp	r3, #32
 8005486:	f040 80af 	bne.w	80055e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	88db      	ldrh	r3, [r3, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d03a      	beq.n	8005508 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b25b      	sxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	da1b      	bge.n	80054d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	33b0      	adds	r3, #176	; 0xb0
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80054b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	88d2      	ldrh	r2, [r2, #6]
 80054b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	88db      	ldrh	r3, [r3, #6]
 80054be:	2b07      	cmp	r3, #7
 80054c0:	bf28      	it	cs
 80054c2:	2307      	movcs	r3, #7
 80054c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	89fa      	ldrh	r2, [r7, #14]
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 fdb3 	bl	8007038 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054d2:	e090      	b.n	80055f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	785a      	ldrb	r2, [r3, #1]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	88db      	ldrh	r3, [r3, #6]
 80054e2:	2b3f      	cmp	r3, #63	; 0x3f
 80054e4:	d803      	bhi.n	80054ee <USBD_CDC_Setup+0xa6>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	88db      	ldrh	r3, [r3, #6]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	e000      	b.n	80054f0 <USBD_CDC_Setup+0xa8>
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80054f6:	6939      	ldr	r1, [r7, #16]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80054fe:	461a      	mov	r2, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 fdc5 	bl	8007090 <USBD_CtlPrepareRx>
      break;
 8005506:	e076      	b.n	80055f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	33b0      	adds	r3, #176	; 0xb0
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	7850      	ldrb	r0, [r2, #1]
 800551e:	2200      	movs	r2, #0
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	4798      	blx	r3
      break;
 8005524:	e067      	b.n	80055f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b0b      	cmp	r3, #11
 800552c:	d851      	bhi.n	80055d2 <USBD_CDC_Setup+0x18a>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <USBD_CDC_Setup+0xec>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005565 	.word	0x08005565
 8005538:	080055e1 	.word	0x080055e1
 800553c:	080055d3 	.word	0x080055d3
 8005540:	080055d3 	.word	0x080055d3
 8005544:	080055d3 	.word	0x080055d3
 8005548:	080055d3 	.word	0x080055d3
 800554c:	080055d3 	.word	0x080055d3
 8005550:	080055d3 	.word	0x080055d3
 8005554:	080055d3 	.word	0x080055d3
 8005558:	080055d3 	.word	0x080055d3
 800555c:	0800558f 	.word	0x0800558f
 8005560:	080055b9 	.word	0x080055b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b03      	cmp	r3, #3
 800556e:	d107      	bne.n	8005580 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005570:	f107 030a 	add.w	r3, r7, #10
 8005574:	2202      	movs	r2, #2
 8005576:	4619      	mov	r1, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 fd5d 	bl	8007038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800557e:	e032      	b.n	80055e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fce7 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 8005588:	2303      	movs	r3, #3
 800558a:	75fb      	strb	r3, [r7, #23]
          break;
 800558c:	e02b      	b.n	80055e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b03      	cmp	r3, #3
 8005598:	d107      	bne.n	80055aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800559a:	f107 030d 	add.w	r3, r7, #13
 800559e:	2201      	movs	r2, #1
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fd48 	bl	8007038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055a8:	e01d      	b.n	80055e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 fcd2 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 80055b2:	2303      	movs	r3, #3
 80055b4:	75fb      	strb	r3, [r7, #23]
          break;
 80055b6:	e016      	b.n	80055e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d00f      	beq.n	80055e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fcc5 	bl	8006f56 <USBD_CtlError>
            ret = USBD_FAIL;
 80055cc:	2303      	movs	r3, #3
 80055ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055d0:	e008      	b.n	80055e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 fcbe 	bl	8006f56 <USBD_CtlError>
          ret = USBD_FAIL;
 80055da:	2303      	movs	r3, #3
 80055dc:	75fb      	strb	r3, [r7, #23]
          break;
 80055de:	e002      	b.n	80055e6 <USBD_CDC_Setup+0x19e>
          break;
 80055e0:	bf00      	nop
 80055e2:	e008      	b.n	80055f6 <USBD_CDC_Setup+0x1ae>
          break;
 80055e4:	bf00      	nop
      }
      break;
 80055e6:	e006      	b.n	80055f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 fcb3 	bl	8006f56 <USBD_CtlError>
      ret = USBD_FAIL;
 80055f0:	2303      	movs	r3, #3
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005612:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	32b0      	adds	r2, #176	; 0xb0
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005626:	2303      	movs	r3, #3
 8005628:	e065      	b.n	80056f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	32b0      	adds	r2, #176	; 0xb0
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	f003 020f 	and.w	r2, r3, #15
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3318      	adds	r3, #24
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d02f      	beq.n	80056b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	f003 020f 	and.w	r2, r3, #15
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3318      	adds	r3, #24
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	f003 010f 	and.w	r1, r3, #15
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	460b      	mov	r3, r1
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	440b      	add	r3, r1
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4403      	add	r3, r0
 800567c:	3348      	adds	r3, #72	; 0x48
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	fbb2 f1f3 	udiv	r1, r2, r3
 8005684:	fb01 f303 	mul.w	r3, r1, r3
 8005688:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d112      	bne.n	80056b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 020f 	and.w	r2, r3, #15
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3318      	adds	r3, #24
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056a6:	78f9      	ldrb	r1, [r7, #3]
 80056a8:	2300      	movs	r3, #0
 80056aa:	2200      	movs	r2, #0
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f002 f9ec 	bl	8007a8a <USBD_LL_Transmit>
 80056b2:	e01f      	b.n	80056f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	33b0      	adds	r3, #176	; 0xb0
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d010      	beq.n	80056f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	33b0      	adds	r3, #176	; 0xb0
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056f0:	78fa      	ldrb	r2, [r7, #3]
 80056f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	32b0      	adds	r2, #176	; 0xb0
 8005714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005718:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	32b0      	adds	r2, #176	; 0xb0
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	e01a      	b.n	8005766 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 f9ea 	bl	8007b0e <USBD_LL_GetRxDataSize>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	33b0      	adds	r3, #176	; 0xb0
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005760:	4611      	mov	r1, r2
 8005762:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	32b0      	adds	r2, #176	; 0xb0
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800578c:	2303      	movs	r3, #3
 800578e:	e025      	b.n	80057dc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	33b0      	adds	r3, #176	; 0xb0
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01a      	beq.n	80057da <USBD_CDC_EP0_RxReady+0x6c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80057aa:	2bff      	cmp	r3, #255	; 0xff
 80057ac:	d015      	beq.n	80057da <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	33b0      	adds	r3, #176	; 0xb0
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80057c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ce:	b292      	uxth	r2, r2
 80057d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	22ff      	movs	r2, #255	; 0xff
 80057d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057ec:	2182      	movs	r1, #130	; 0x82
 80057ee:	4818      	ldr	r0, [pc, #96]	; (8005850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057f0:	f000 fd4f 	bl	8006292 <USBD_GetEpDesc>
 80057f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057f6:	2101      	movs	r1, #1
 80057f8:	4815      	ldr	r0, [pc, #84]	; (8005850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80057fa:	f000 fd4a 	bl	8006292 <USBD_GetEpDesc>
 80057fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005800:	2181      	movs	r1, #129	; 0x81
 8005802:	4813      	ldr	r0, [pc, #76]	; (8005850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005804:	f000 fd45 	bl	8006292 <USBD_GetEpDesc>
 8005808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2210      	movs	r2, #16
 8005814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2200      	movs	r2, #0
 8005820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005824:	711a      	strb	r2, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d006      	beq.n	800583e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005838:	711a      	strb	r2, [r3, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2243      	movs	r2, #67	; 0x43
 8005842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	2000005c 	.word	0x2000005c

08005854 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800585c:	2182      	movs	r1, #130	; 0x82
 800585e:	4818      	ldr	r0, [pc, #96]	; (80058c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005860:	f000 fd17 	bl	8006292 <USBD_GetEpDesc>
 8005864:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005866:	2101      	movs	r1, #1
 8005868:	4815      	ldr	r0, [pc, #84]	; (80058c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800586a:	f000 fd12 	bl	8006292 <USBD_GetEpDesc>
 800586e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005870:	2181      	movs	r1, #129	; 0x81
 8005872:	4813      	ldr	r0, [pc, #76]	; (80058c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005874:	f000 fd0d 	bl	8006292 <USBD_GetEpDesc>
 8005878:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2210      	movs	r2, #16
 8005884:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d006      	beq.n	800589a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2200      	movs	r2, #0
 8005890:	711a      	strb	r2, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f042 0202 	orr.w	r2, r2, #2
 8005898:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	711a      	strb	r2, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f042 0202 	orr.w	r2, r2, #2
 80058ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2243      	movs	r2, #67	; 0x43
 80058b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058b4:	4b02      	ldr	r3, [pc, #8]	; (80058c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	2000005c 	.word	0x2000005c

080058c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058cc:	2182      	movs	r1, #130	; 0x82
 80058ce:	4818      	ldr	r0, [pc, #96]	; (8005930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058d0:	f000 fcdf 	bl	8006292 <USBD_GetEpDesc>
 80058d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058d6:	2101      	movs	r1, #1
 80058d8:	4815      	ldr	r0, [pc, #84]	; (8005930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058da:	f000 fcda 	bl	8006292 <USBD_GetEpDesc>
 80058de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058e0:	2181      	movs	r1, #129	; 0x81
 80058e2:	4813      	ldr	r0, [pc, #76]	; (8005930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058e4:	f000 fcd5 	bl	8006292 <USBD_GetEpDesc>
 80058e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2210      	movs	r2, #16
 80058f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2200      	movs	r2, #0
 8005900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005904:	711a      	strb	r2, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005918:	711a      	strb	r2, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2243      	movs	r2, #67	; 0x43
 8005922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005924:	4b02      	ldr	r3, [pc, #8]	; (8005930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	2000005c 	.word	0x2000005c

08005934 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	220a      	movs	r2, #10
 8005940:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005942:	4b03      	ldr	r3, [pc, #12]	; (8005950 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000018 	.word	0x20000018

08005954 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	e009      	b.n	800597c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	33b0      	adds	r3, #176	; 0xb0
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	32b0      	adds	r2, #176	; 0xb0
 800599e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e008      	b.n	80059c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	32b0      	adds	r2, #176	; 0xb0
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e004      	b.n	80059fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	32b0      	adds	r2, #176	; 0xb0
 8005a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	32b0      	adds	r2, #176	; 0xb0
 8005a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e025      	b.n	8005a86 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11f      	bne.n	8005a84 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <USBD_CDC_TransmitPacket+0x88>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4403      	add	r3, r0
 8005a66:	3318      	adds	r3, #24
 8005a68:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <USBD_CDC_TransmitPacket+0x88>)
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f002 f805 	bl	8007a8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	2000009f 	.word	0x2000009f

08005a94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	32b0      	adds	r2, #176	; 0xb0
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	32b0      	adds	r2, #176	; 0xb0
 8005ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e018      	b.n	8005af4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7c1b      	ldrb	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <USBD_CDC_ReceivePacket+0x68>)
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fff7 	bl	8007acc <USBD_LL_PrepareReceive>
 8005ade:	e008      	b.n	8005af2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <USBD_CDC_ReceivePacket+0x68>)
 8005ae2:	7819      	ldrb	r1, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aea:	2340      	movs	r3, #64	; 0x40
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 ffed 	bl	8007acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	200000a0 	.word	0x200000a0

08005b00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e01f      	b.n	8005b58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	79fa      	ldrb	r2, [r7, #7]
 8005b4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f001 fe67 	bl	8007820 <USBD_LL_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e025      	b.n	8005bc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32ae      	adds	r2, #174	; 0xae
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00f      	beq.n	8005bb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32ae      	adds	r2, #174	; 0xae
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	f107 020e 	add.w	r2, r7, #14
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4798      	blx	r3
 8005bac:	4602      	mov	r2, r0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fe6f 	bl	80078b8 <USBD_LL_Start>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	4798      	blx	r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f001 f932 	bl	8006ee2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d01a      	beq.n	8005cd8 <USBD_LL_SetupStage+0x72>
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d822      	bhi.n	8005cec <USBD_LL_SetupStage+0x86>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <USBD_LL_SetupStage+0x4a>
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d00a      	beq.n	8005cc4 <USBD_LL_SetupStage+0x5e>
 8005cae:	e01d      	b.n	8005cec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb5f 	bl	800637c <USBD_StdDevReq>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc2:	e020      	b.n	8005d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fbc7 	bl	8006460 <USBD_StdItfReq>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd6:	e016      	b.n	8005d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fc29 	bl	8006538 <USBD_StdEPReq>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cea:	e00c      	b.n	8005d06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fe3c 	bl	8007978 <USBD_LL_StallEP>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	bf00      	nop
  }

  return ret;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d16e      	bne.n	8005e06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	f040 8098 	bne.w	8005e6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d913      	bls.n	8005d70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	bf28      	it	cs
 8005d62:	4613      	movcs	r3, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f001 f9ae 	bl	80070ca <USBD_CtlContinueRx>
 8005d6e:	e07d      	b.n	8005e6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d014      	beq.n	8005da8 <USBD_LL_DataOutStage+0x98>
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d81d      	bhi.n	8005dbe <USBD_LL_DataOutStage+0xae>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <USBD_LL_DataOutStage+0x7c>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d003      	beq.n	8005d92 <USBD_LL_DataOutStage+0x82>
 8005d8a:	e018      	b.n	8005dbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005d90:	e018      	b.n	8005dc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fa5e 	bl	800625e <USBD_CoreFindIF>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75bb      	strb	r3, [r7, #22]
            break;
 8005da6:	e00d      	b.n	8005dc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fa60 	bl	8006278 <USBD_CoreFindEP>
 8005db8:	4603      	mov	r3, r0
 8005dba:	75bb      	strb	r3, [r7, #22]
            break;
 8005dbc:	e002      	b.n	8005dc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75bb      	strb	r3, [r7, #22]
            break;
 8005dc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005dc4:	7dbb      	ldrb	r3, [r7, #22]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d119      	bne.n	8005dfe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d113      	bne.n	8005dfe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005dd6:	7dba      	ldrb	r2, [r7, #22]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	32ae      	adds	r2, #174	; 0xae
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005de6:	7dba      	ldrb	r2, [r7, #22]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005dee:	7dba      	ldrb	r2, [r7, #22]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	32ae      	adds	r2, #174	; 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f001 f974 	bl	80070ec <USBD_CtlSendStatus>
 8005e04:	e032      	b.n	8005e6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fa31 	bl	8006278 <USBD_CoreFindEP>
 8005e16:	4603      	mov	r3, r0
 8005e18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e1a:	7dbb      	ldrb	r3, [r7, #22]
 8005e1c:	2bff      	cmp	r3, #255	; 0xff
 8005e1e:	d025      	beq.n	8005e6c <USBD_LL_DataOutStage+0x15c>
 8005e20:	7dbb      	ldrb	r3, [r7, #22]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d122      	bne.n	8005e6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d117      	bne.n	8005e62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e32:	7dba      	ldrb	r2, [r7, #22]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	32ae      	adds	r2, #174	; 0xae
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e42:	7dba      	ldrb	r2, [r7, #22]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e4a:	7dba      	ldrb	r2, [r7, #22]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	32ae      	adds	r2, #174	; 0xae
 8005e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	7afa      	ldrb	r2, [r7, #11]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	4798      	blx	r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	e000      	b.n	8005e6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d16f      	bne.n	8005f6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d15a      	bne.n	8005f50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d914      	bls.n	8005ed0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 f8d6 	bl	800706e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f001 fdff 	bl	8007acc <USBD_LL_PrepareReceive>
 8005ece:	e03f      	b.n	8005f50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d11c      	bne.n	8005f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d316      	bcc.n	8005f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d20f      	bcs.n	8005f16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2100      	movs	r1, #0
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f001 f8b7 	bl	800706e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 fddc 	bl	8007acc <USBD_LL_PrepareReceive>
 8005f14:	e01c      	b.n	8005f50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d10f      	bne.n	8005f42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f42:	2180      	movs	r1, #128	; 0x80
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f001 fd17 	bl	8007978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 f8e1 	bl	8007112 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d03a      	beq.n	8005fd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7ff fe42 	bl	8005be4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f68:	e032      	b.n	8005fd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f97f 	bl	8006278 <USBD_CoreFindEP>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
 8005f80:	2bff      	cmp	r3, #255	; 0xff
 8005f82:	d025      	beq.n	8005fd0 <USBD_LL_DataInStage+0x15a>
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d122      	bne.n	8005fd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d11c      	bne.n	8005fd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f96:	7dfa      	ldrb	r2, [r7, #23]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	32ae      	adds	r2, #174	; 0xae
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d014      	beq.n	8005fd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fa6:	7dfa      	ldrb	r2, [r7, #23]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005fae:	7dfa      	ldrb	r2, [r7, #23]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	32ae      	adds	r2, #174	; 0xae
 8005fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	7afa      	ldrb	r2, [r7, #11]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	4798      	blx	r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005fc6:	7dbb      	ldrb	r3, [r7, #22]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fcc:	7dbb      	ldrb	r3, [r7, #22]
 8005fce:	e000      	b.n	8005fd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b084      	sub	sp, #16
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6852      	ldr	r2, [r2, #4]
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	4611      	mov	r1, r2
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800603c:	2303      	movs	r3, #3
 800603e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006040:	2340      	movs	r3, #64	; 0x40
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fc51 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	2200      	movs	r2, #0
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fc43 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	621a      	str	r2, [r3, #32]

  return ret;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d106      	bne.n	80060ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	d110      	bne.n	8006130 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	32ae      	adds	r2, #174	; 0xae
 8006150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	e01c      	b.n	8006196 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b03      	cmp	r3, #3
 8006166:	d115      	bne.n	8006194 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32ae      	adds	r2, #174	; 0xae
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32ae      	adds	r2, #174	; 0xae
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	4611      	mov	r1, r2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	32ae      	adds	r2, #174	; 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	e01c      	b.n	80061fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d115      	bne.n	80061f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32ae      	adds	r2, #174	; 0xae
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32ae      	adds	r2, #174	; 0xae
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	4611      	mov	r1, r2
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6852      	ldr	r2, [r2, #4]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	4611      	mov	r1, r2
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006250:	2303      	movs	r3, #3
 8006252:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800626a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006284:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	885b      	ldrh	r3, [r3, #2]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d920      	bls.n	80062fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062c2:	e013      	b.n	80062ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062c4:	f107 030a 	add.w	r3, r7, #10
 80062c8:	4619      	mov	r1, r3
 80062ca:	6978      	ldr	r0, [r7, #20]
 80062cc:	f000 f81b 	bl	8006306 <USBD_GetNextDesc>
 80062d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	d108      	bne.n	80062ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	789b      	ldrb	r3, [r3, #2]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d008      	beq.n	80062fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	885b      	ldrh	r3, [r3, #2]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	897b      	ldrh	r3, [r7, #10]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d8e5      	bhi.n	80062c4 <USBD_GetEpDesc+0x32>
 80062f8:	e000      	b.n	80062fc <USBD_GetEpDesc+0x6a>
          break;
 80062fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062fc:	693b      	ldr	r3, [r7, #16]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	4413      	add	r3, r2
 8006320:	b29a      	uxth	r2, r3
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006332:	68fb      	ldr	r3, [r7, #12]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	3301      	adds	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800635e:	8a3b      	ldrh	r3, [r7, #16]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	b21a      	sxth	r2, r3
 8006364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006368:	4313      	orrs	r3, r2
 800636a:	b21b      	sxth	r3, r3
 800636c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800636e:	89fb      	ldrh	r3, [r7, #14]
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d005      	beq.n	80063a2 <USBD_StdDevReq+0x26>
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d857      	bhi.n	800644a <USBD_StdDevReq+0xce>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <USBD_StdDevReq+0x42>
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d153      	bne.n	800644a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	32ae      	adds	r2, #174	; 0xae
 80063ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e04a      	b.n	8006454 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d83b      	bhi.n	800643e <USBD_StdDevReq+0xc2>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <USBD_StdDevReq+0x50>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	08006421 	.word	0x08006421
 80063d0:	08006435 	.word	0x08006435
 80063d4:	0800643f 	.word	0x0800643f
 80063d8:	0800642b 	.word	0x0800642b
 80063dc:	0800643f 	.word	0x0800643f
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	0800643f 	.word	0x0800643f
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006409 	.word	0x08006409
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa3c 	bl	8006874 <USBD_GetDescriptor>
          break;
 80063fc:	e024      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fbcb 	bl	8006b9c <USBD_SetAddress>
          break;
 8006406:	e01f      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fc0a 	bl	8006c24 <USBD_SetConfig>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
          break;
 8006414:	e018      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fcad 	bl	8006d78 <USBD_GetConfig>
          break;
 800641e:	e013      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fcde 	bl	8006de4 <USBD_GetStatus>
          break;
 8006428:	e00e      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fd0d 	bl	8006e4c <USBD_SetFeature>
          break;
 8006432:	e009      	b.n	8006448 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fd31 	bl	8006e9e <USBD_ClrFeature>
          break;
 800643c:	e004      	b.n	8006448 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fd88 	bl	8006f56 <USBD_CtlError>
          break;
 8006446:	bf00      	nop
      }
      break;
 8006448:	e004      	b.n	8006454 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fd82 	bl	8006f56 <USBD_CtlError>
      break;
 8006452:	bf00      	nop
  }

  return ret;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop

08006460 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d005      	beq.n	8006486 <USBD_StdItfReq+0x26>
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d852      	bhi.n	8006524 <USBD_StdItfReq+0xc4>
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <USBD_StdItfReq+0x26>
 8006482:	2b20      	cmp	r3, #32
 8006484:	d14e      	bne.n	8006524 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800648c:	b2db      	uxtb	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	2b02      	cmp	r3, #2
 8006492:	d840      	bhi.n	8006516 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	889b      	ldrh	r3, [r3, #4]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b01      	cmp	r3, #1
 800649c:	d836      	bhi.n	800650c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	889b      	ldrh	r3, [r3, #4]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff fed9 	bl	800625e <USBD_CoreFindIF>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2bff      	cmp	r3, #255	; 0xff
 80064b4:	d01d      	beq.n	80064f2 <USBD_StdItfReq+0x92>
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11a      	bne.n	80064f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064bc:	7bba      	ldrb	r2, [r7, #14]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32ae      	adds	r2, #174	; 0xae
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00f      	beq.n	80064ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064cc:	7bba      	ldrb	r2, [r7, #14]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064d4:	7bba      	ldrb	r2, [r7, #14]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	32ae      	adds	r2, #174	; 0xae
 80064da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064ea:	e004      	b.n	80064f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80064ec:	2303      	movs	r3, #3
 80064ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064f0:	e001      	b.n	80064f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064f2:	2303      	movs	r3, #3
 80064f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	88db      	ldrh	r3, [r3, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d110      	bne.n	8006520 <USBD_StdItfReq+0xc0>
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10d      	bne.n	8006520 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fdf1 	bl	80070ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800650a:	e009      	b.n	8006520 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fd21 	bl	8006f56 <USBD_CtlError>
          break;
 8006514:	e004      	b.n	8006520 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd1c 	bl	8006f56 <USBD_CtlError>
          break;
 800651e:	e000      	b.n	8006522 <USBD_StdItfReq+0xc2>
          break;
 8006520:	bf00      	nop
      }
      break;
 8006522:	e004      	b.n	800652e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fd15 	bl	8006f56 <USBD_CtlError>
      break;
 800652c:	bf00      	nop
  }

  return ret;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	889b      	ldrh	r3, [r3, #4]
 800654a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d007      	beq.n	8006568 <USBD_StdEPReq+0x30>
 8006558:	2b40      	cmp	r3, #64	; 0x40
 800655a:	f200 817f 	bhi.w	800685c <USBD_StdEPReq+0x324>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02a      	beq.n	80065b8 <USBD_StdEPReq+0x80>
 8006562:	2b20      	cmp	r3, #32
 8006564:	f040 817a 	bne.w	800685c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fe83 	bl	8006278 <USBD_CoreFindEP>
 8006572:	4603      	mov	r3, r0
 8006574:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006576:	7b7b      	ldrb	r3, [r7, #13]
 8006578:	2bff      	cmp	r3, #255	; 0xff
 800657a:	f000 8174 	beq.w	8006866 <USBD_StdEPReq+0x32e>
 800657e:	7b7b      	ldrb	r3, [r7, #13]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8170 	bne.w	8006866 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006586:	7b7a      	ldrb	r2, [r7, #13]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800658e:	7b7a      	ldrb	r2, [r7, #13]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	32ae      	adds	r2, #174	; 0xae
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8163 	beq.w	8006866 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065a0:	7b7a      	ldrb	r2, [r7, #13]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	32ae      	adds	r2, #174	; 0xae
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065b6:	e156      	b.n	8006866 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d008      	beq.n	80065d2 <USBD_StdEPReq+0x9a>
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	f300 8145 	bgt.w	8006850 <USBD_StdEPReq+0x318>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 809b 	beq.w	8006702 <USBD_StdEPReq+0x1ca>
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d03c      	beq.n	800664a <USBD_StdEPReq+0x112>
 80065d0:	e13e      	b.n	8006850 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d002      	beq.n	80065e4 <USBD_StdEPReq+0xac>
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d016      	beq.n	8006610 <USBD_StdEPReq+0xd8>
 80065e2:	e02c      	b.n	800663e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <USBD_StdEPReq+0xce>
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d00a      	beq.n	8006606 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f9bf 	bl	8007978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f9bb 	bl	8007978 <USBD_LL_StallEP>
 8006602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006604:	e020      	b.n	8006648 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fca4 	bl	8006f56 <USBD_CtlError>
              break;
 800660e:	e01b      	b.n	8006648 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10e      	bne.n	8006636 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00b      	beq.n	8006636 <USBD_StdEPReq+0xfe>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b80      	cmp	r3, #128	; 0x80
 8006622:	d008      	beq.n	8006636 <USBD_StdEPReq+0xfe>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	88db      	ldrh	r3, [r3, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f9a1 	bl	8007978 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fd58 	bl	80070ec <USBD_CtlSendStatus>

              break;
 800663c:	e004      	b.n	8006648 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fc88 	bl	8006f56 <USBD_CtlError>
              break;
 8006646:	bf00      	nop
          }
          break;
 8006648:	e107      	b.n	800685a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d002      	beq.n	800665c <USBD_StdEPReq+0x124>
 8006656:	2b03      	cmp	r3, #3
 8006658:	d016      	beq.n	8006688 <USBD_StdEPReq+0x150>
 800665a:	e04b      	b.n	80066f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <USBD_StdEPReq+0x146>
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d00a      	beq.n	800667e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f983 	bl	8007978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f97f 	bl	8007978 <USBD_LL_StallEP>
 800667a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800667c:	e040      	b.n	8006700 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc68 	bl	8006f56 <USBD_CtlError>
              break;
 8006686:	e03b      	b.n	8006700 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	885b      	ldrh	r3, [r3, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d136      	bne.n	80066fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 f989 	bl	80079b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd21 	bl	80070ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fde2 	bl	8006278 <USBD_CoreFindEP>
 80066b4:	4603      	mov	r3, r0
 80066b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066b8:	7b7b      	ldrb	r3, [r7, #13]
 80066ba:	2bff      	cmp	r3, #255	; 0xff
 80066bc:	d01f      	beq.n	80066fe <USBD_StdEPReq+0x1c6>
 80066be:	7b7b      	ldrb	r3, [r7, #13]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11c      	bne.n	80066fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066c4:	7b7a      	ldrb	r2, [r7, #13]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066cc:	7b7a      	ldrb	r2, [r7, #13]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32ae      	adds	r2, #174	; 0xae
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066dc:	7b7a      	ldrb	r2, [r7, #13]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	; 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066f2:	e004      	b.n	80066fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fc2d 	bl	8006f56 <USBD_CtlError>
              break;
 80066fc:	e000      	b.n	8006700 <USBD_StdEPReq+0x1c8>
              break;
 80066fe:	bf00      	nop
          }
          break;
 8006700:	e0ab      	b.n	800685a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d002      	beq.n	8006714 <USBD_StdEPReq+0x1dc>
 800670e:	2b03      	cmp	r3, #3
 8006710:	d032      	beq.n	8006778 <USBD_StdEPReq+0x240>
 8006712:	e097      	b.n	8006844 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <USBD_StdEPReq+0x1f2>
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d004      	beq.n	800672a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fc17 	bl	8006f56 <USBD_CtlError>
                break;
 8006728:	e091      	b.n	800684e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672e:	2b00      	cmp	r3, #0
 8006730:	da0b      	bge.n	800674a <USBD_StdEPReq+0x212>
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	3310      	adds	r3, #16
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4413      	add	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	e00b      	b.n	8006762 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	3304      	adds	r3, #4
 8006762:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2202      	movs	r2, #2
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc61 	bl	8007038 <USBD_CtlSendData>
              break;
 8006776:	e06a      	b.n	800684e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677c:	2b00      	cmp	r3, #0
 800677e:	da11      	bge.n	80067a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	f003 020f 	and.w	r2, r3, #15
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	3324      	adds	r3, #36	; 0x24
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d117      	bne.n	80067ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fbda 	bl	8006f56 <USBD_CtlError>
                  break;
 80067a2:	e054      	b.n	800684e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbc7 	bl	8006f56 <USBD_CtlError>
                  break;
 80067c8:	e041      	b.n	800684e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da0b      	bge.n	80067ea <USBD_StdEPReq+0x2b2>
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	3310      	adds	r3, #16
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4413      	add	r3, r2
 80067e6:	3304      	adds	r3, #4
 80067e8:	e00b      	b.n	8006802 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4413      	add	r3, r2
 8006800:	3304      	adds	r3, #4
 8006802:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <USBD_StdEPReq+0x2d8>
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b80      	cmp	r3, #128	; 0x80
 800680e:	d103      	bne.n	8006818 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e00e      	b.n	8006836 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f8e9 	bl	80079f4 <USBD_LL_IsStallEP>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e002      	b.n	8006836 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2202      	movs	r2, #2
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fbfb 	bl	8007038 <USBD_CtlSendData>
              break;
 8006842:	e004      	b.n	800684e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fb85 	bl	8006f56 <USBD_CtlError>
              break;
 800684c:	bf00      	nop
          }
          break;
 800684e:	e004      	b.n	800685a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb7f 	bl	8006f56 <USBD_CtlError>
          break;
 8006858:	bf00      	nop
      }
      break;
 800685a:	e005      	b.n	8006868 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb79 	bl	8006f56 <USBD_CtlError>
      break;
 8006864:	e000      	b.n	8006868 <USBD_StdEPReq+0x330>
      break;
 8006866:	bf00      	nop
  }

  return ret;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	885b      	ldrh	r3, [r3, #2]
 800688e:	0a1b      	lsrs	r3, r3, #8
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	2b0e      	cmp	r3, #14
 8006896:	f200 8152 	bhi.w	8006b3e <USBD_GetDescriptor+0x2ca>
 800689a:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <USBD_GetDescriptor+0x2c>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	08006911 	.word	0x08006911
 80068a4:	08006929 	.word	0x08006929
 80068a8:	08006969 	.word	0x08006969
 80068ac:	08006b3f 	.word	0x08006b3f
 80068b0:	08006b3f 	.word	0x08006b3f
 80068b4:	08006adf 	.word	0x08006adf
 80068b8:	08006b0b 	.word	0x08006b0b
 80068bc:	08006b3f 	.word	0x08006b3f
 80068c0:	08006b3f 	.word	0x08006b3f
 80068c4:	08006b3f 	.word	0x08006b3f
 80068c8:	08006b3f 	.word	0x08006b3f
 80068cc:	08006b3f 	.word	0x08006b3f
 80068d0:	08006b3f 	.word	0x08006b3f
 80068d4:	08006b3f 	.word	0x08006b3f
 80068d8:	080068dd 	.word	0x080068dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7c12      	ldrb	r2, [r2, #16]
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068fe:	e126      	b.n	8006b4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fb27 	bl	8006f56 <USBD_CtlError>
        err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
      break;
 800690e:	e11e      	b.n	8006b4e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	7c12      	ldrb	r2, [r2, #16]
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
      break;
 8006926:	e112      	b.n	8006b4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7c1b      	ldrb	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10d      	bne.n	800694c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f107 0208 	add.w	r2, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	2202      	movs	r2, #2
 8006948:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800694a:	e100      	b.n	8006b4e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	f107 0208 	add.w	r2, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	2202      	movs	r2, #2
 8006964:	701a      	strb	r2, [r3, #0]
      break;
 8006966:	e0f2      	b.n	8006b4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	885b      	ldrh	r3, [r3, #2]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b05      	cmp	r3, #5
 8006970:	f200 80ac 	bhi.w	8006acc <USBD_GetDescriptor+0x258>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <USBD_GetDescriptor+0x108>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006995 	.word	0x08006995
 8006980:	080069c9 	.word	0x080069c9
 8006984:	080069fd 	.word	0x080069fd
 8006988:	08006a31 	.word	0x08006a31
 800698c:	08006a65 	.word	0x08006a65
 8006990:	08006a99 	.word	0x08006a99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	7c12      	ldrb	r2, [r2, #16]
 80069ac:	f107 0108 	add.w	r1, r7, #8
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b6:	e091      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 facb 	bl	8006f56 <USBD_CtlError>
            err++;
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	3301      	adds	r3, #1
 80069c4:	72fb      	strb	r3, [r7, #11]
          break;
 80069c6:	e089      	b.n	8006adc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ea:	e077      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fab1 	bl	8006f56 <USBD_CtlError>
            err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
          break;
 80069fa:	e06f      	b.n	8006adc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	7c12      	ldrb	r2, [r2, #16]
 8006a14:	f107 0108 	add.w	r1, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1e:	e05d      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa97 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2e:	e055      	b.n	8006adc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00b      	beq.n	8006a54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7c12      	ldrb	r2, [r2, #16]
 8006a48:	f107 0108 	add.w	r1, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
 8006a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a52:	e043      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa7d 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	72fb      	strb	r3, [r7, #11]
          break;
 8006a62:	e03b      	b.n	8006adc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	7c12      	ldrb	r2, [r2, #16]
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a86:	e029      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa63 	bl	8006f56 <USBD_CtlError>
            err++;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	3301      	adds	r3, #1
 8006a94:	72fb      	strb	r3, [r7, #11]
          break;
 8006a96:	e021      	b.n	8006adc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 0108 	add.w	r1, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aba:	e00f      	b.n	8006adc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa49 	bl	8006f56 <USBD_CtlError>
            err++;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aca:	e007      	b.n	8006adc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa41 	bl	8006f56 <USBD_CtlError>
          err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ada:	bf00      	nop
      }
      break;
 8006adc:	e037      	b.n	8006b4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7c1b      	ldrb	r3, [r3, #16]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aee:	f107 0208 	add.w	r2, r7, #8
 8006af2:	4610      	mov	r0, r2
 8006af4:	4798      	blx	r3
 8006af6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af8:	e029      	b.n	8006b4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa2a 	bl	8006f56 <USBD_CtlError>
        err++;
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	3301      	adds	r3, #1
 8006b06:	72fb      	strb	r3, [r7, #11]
      break;
 8006b08:	e021      	b.n	8006b4e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	7c1b      	ldrb	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	f107 0208 	add.w	r2, r7, #8
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4798      	blx	r3
 8006b22:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	2207      	movs	r2, #7
 8006b2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b2c:	e00f      	b.n	8006b4e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fa10 	bl	8006f56 <USBD_CtlError>
        err++;
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b3c:	e007      	b.n	8006b4e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa08 	bl	8006f56 <USBD_CtlError>
      err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4c:	bf00      	nop
  }

  if (err != 0U)
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11e      	bne.n	8006b92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	88db      	ldrh	r3, [r3, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d016      	beq.n	8006b8a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006b5c:	893b      	ldrh	r3, [r7, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88da      	ldrh	r2, [r3, #6]
 8006b66:	893b      	ldrh	r3, [r7, #8]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bf28      	it	cs
 8006b6c:	4613      	movcs	r3, r2
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b72:	893b      	ldrh	r3, [r7, #8]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fa5d 	bl	8007038 <USBD_CtlSendData>
 8006b7e:	e009      	b.n	8006b94 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9e7 	bl	8006f56 <USBD_CtlError>
 8006b88:	e004      	b.n	8006b94 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 faae 	bl	80070ec <USBD_CtlSendStatus>
 8006b90:	e000      	b.n	8006b94 <USBD_GetDescriptor+0x320>
    return;
 8006b92:	bf00      	nop
  }
}
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	889b      	ldrh	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d131      	bne.n	8006c12 <USBD_SetAddress+0x76>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88db      	ldrh	r3, [r3, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d12d      	bne.n	8006c12 <USBD_SetAddress+0x76>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbc:	d829      	bhi.n	8006c12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	885b      	ldrh	r3, [r3, #2]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d104      	bne.n	8006be0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f9bc 	bl	8006f56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bde:	e01d      	b.n	8006c1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7bfa      	ldrb	r2, [r7, #15]
 8006be4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 ff2d 	bl	8007a4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa7a 	bl	80070ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c06:	e009      	b.n	8006c1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	e004      	b.n	8006c1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f99e 	bl	8006f56 <USBD_CtlError>
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	885b      	ldrh	r3, [r3, #2]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c3c:	4b4d      	ldr	r3, [pc, #308]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d905      	bls.n	8006c50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f985 	bl	8006f56 <USBD_CtlError>
    return USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e08c      	b.n	8006d6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d002      	beq.n	8006c62 <USBD_SetConfig+0x3e>
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d029      	beq.n	8006cb4 <USBD_SetConfig+0x90>
 8006c60:	e075      	b.n	8006d4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c62:	4b44      	ldr	r3, [pc, #272]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d020      	beq.n	8006cac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c74:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <USBD_SetConfig+0x150>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe ffbd 	bl	8005bfa <USBD_SetClassConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f962 	bl	8006f56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c9a:	e065      	b.n	8006d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa25 	bl	80070ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006caa:	e05d      	b.n	8006d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fa1d 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006cb2:	e059      	b.n	8006d68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d112      	bne.n	8006ce2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cc4:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <USBD_SetConfig+0x150>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fe ffac 	bl	8005c32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa06 	bl	80070ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ce0:	e042      	b.n	8006d68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <USBD_SetConfig+0x150>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d02a      	beq.n	8006d46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fe ff9a 	bl	8005c32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cfe:	4b1d      	ldr	r3, [pc, #116]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d08:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe ff73 	bl	8005bfa <USBD_SetClassConfig>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00f      	beq.n	8006d3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f918 	bl	8006f56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe ff7f 	bl	8005c32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d3c:	e014      	b.n	8006d68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f9d4 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006d44:	e010      	b.n	8006d68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9d0 	bl	80070ec <USBD_CtlSendStatus>
      break;
 8006d4c:	e00c      	b.n	8006d68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f900 	bl	8006f56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <USBD_SetConfig+0x150>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fe ff68 	bl	8005c32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
      break;
 8006d66:	bf00      	nop
  }

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000013c 	.word	0x2000013c

08006d78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88db      	ldrh	r3, [r3, #6]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d004      	beq.n	8006d94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8e2 	bl	8006f56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d92:	e023      	b.n	8006ddc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	dc02      	bgt.n	8006da6 <USBD_GetConfig+0x2e>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc03      	bgt.n	8006dac <USBD_GetConfig+0x34>
 8006da4:	e015      	b.n	8006dd2 <USBD_GetConfig+0x5a>
 8006da6:	2b03      	cmp	r3, #3
 8006da8:	d00b      	beq.n	8006dc2 <USBD_GetConfig+0x4a>
 8006daa:	e012      	b.n	8006dd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3308      	adds	r3, #8
 8006db6:	2201      	movs	r2, #1
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f93c 	bl	8007038 <USBD_CtlSendData>
        break;
 8006dc0:	e00c      	b.n	8006ddc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f934 	bl	8007038 <USBD_CtlSendData>
        break;
 8006dd0:	e004      	b.n	8006ddc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8be 	bl	8006f56 <USBD_CtlError>
        break;
 8006dda:	bf00      	nop
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d81e      	bhi.n	8006e3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d004      	beq.n	8006e0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8a5 	bl	8006f56 <USBD_CtlError>
        break;
 8006e0c:	e01a      	b.n	8006e44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f900 	bl	8007038 <USBD_CtlSendData>
      break;
 8006e38:	e004      	b.n	8006e44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f88a 	bl	8006f56 <USBD_CtlError>
      break;
 8006e42:	bf00      	nop
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d107      	bne.n	8006e6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f940 	bl	80070ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e6c:	e013      	b.n	8006e96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	885b      	ldrh	r3, [r3, #2]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d10b      	bne.n	8006e8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	889b      	ldrh	r3, [r3, #4]
 8006e7a:	0a1b      	lsrs	r3, r3, #8
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f930 	bl	80070ec <USBD_CtlSendStatus>
}
 8006e8c:	e003      	b.n	8006e96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f860 	bl	8006f56 <USBD_CtlError>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d80b      	bhi.n	8006ece <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	885b      	ldrh	r3, [r3, #2]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d10c      	bne.n	8006ed8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f910 	bl	80070ec <USBD_CtlSendStatus>
      }
      break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f840 	bl	8006f56 <USBD_CtlError>
      break;
 8006ed6:	e000      	b.n	8006eda <USBD_ClrFeature+0x3c>
      break;
 8006ed8:	bf00      	nop
  }
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b084      	sub	sp, #16
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3301      	adds	r3, #1
 8006efc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fa17 	bl	8006340 <SWAPBYTE>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff fa0a 	bl	8006340 <SWAPBYTE>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff f9fd 	bl	8006340 <SWAPBYTE>
 8006f46:	4603      	mov	r3, r0
 8006f48:	461a      	mov	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	80da      	strh	r2, [r3, #6]
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fd08 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f68:	2100      	movs	r1, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fd04 	bl	8007978 <USBD_LL_StallEP>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d036      	beq.n	8006ffc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f000 f836 	bl	8007004 <USBD_GetLen>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	4413      	add	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fc8:	e013      	b.n	8006ff2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	4413      	add	r3, r2
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	613b      	str	r3, [r7, #16]
    idx++;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e7      	bne.n	8006fca <USBD_GetString+0x52>
 8006ffa:	e000      	b.n	8006ffe <USBD_GetString+0x86>
    return;
 8006ffc:	bf00      	nop
  }
}
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007014:	e005      	b.n	8007022 <USBD_GetLen+0x1e>
  {
    len++;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	3301      	adds	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3301      	adds	r3, #1
 8007020:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f5      	bne.n	8007016 <USBD_GetLen+0x12>
  }

  return len;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2202      	movs	r2, #2
 8007048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	2100      	movs	r1, #0
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fd13 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fd02 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2203      	movs	r2, #3
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	2100      	movs	r1, #0
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fd06 	bl	8007acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	2100      	movs	r1, #0
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fcf5 	bl	8007acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fcc1 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2205      	movs	r2, #5
 800711e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007122:	2300      	movs	r3, #0
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fccf 	bl	8007acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800713c:	2200      	movs	r2, #0
 800713e:	4912      	ldr	r1, [pc, #72]	; (8007188 <MX_USB_DEVICE_Init+0x50>)
 8007140:	4812      	ldr	r0, [pc, #72]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007142:	f7fe fcdd 	bl	8005b00 <USBD_Init>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800714c:	f7f9 fc9a 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007150:	490f      	ldr	r1, [pc, #60]	; (8007190 <MX_USB_DEVICE_Init+0x58>)
 8007152:	480e      	ldr	r0, [pc, #56]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007154:	f7fe fd04 	bl	8005b60 <USBD_RegisterClass>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800715e:	f7f9 fc91 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007162:	490c      	ldr	r1, [pc, #48]	; (8007194 <MX_USB_DEVICE_Init+0x5c>)
 8007164:	4809      	ldr	r0, [pc, #36]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007166:	f7fe fbf5 	bl	8005954 <USBD_CDC_RegisterInterface>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007170:	f7f9 fc88 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_USB_DEVICE_Init+0x54>)
 8007176:	f7fe fd29 	bl	8005bcc <USBD_Start>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007180:	f7f9 fc80 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200000b8 	.word	0x200000b8
 800718c:	20000140 	.word	0x20000140
 8007190:	20000024 	.word	0x20000024
 8007194:	200000a4 	.word	0x200000a4

08007198 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800719c:	2200      	movs	r2, #0
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <CDC_Init_FS+0x1c>)
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <CDC_Init_FS+0x20>)
 80071a2:	f7fe fbf1 	bl	8005988 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80071a6:	4905      	ldr	r1, [pc, #20]	; (80071bc <CDC_Init_FS+0x24>)
 80071a8:	4803      	ldr	r0, [pc, #12]	; (80071b8 <CDC_Init_FS+0x20>)
 80071aa:	f7fe fc0f 	bl	80059cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80071ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000c1c 	.word	0x20000c1c
 80071b8:	20000140 	.word	0x20000140
 80071bc:	2000041c 	.word	0x2000041c

080071c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	6039      	str	r1, [r7, #0]
 80071da:	71fb      	strb	r3, [r7, #7]
 80071dc:	4613      	mov	r3, r2
 80071de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b23      	cmp	r3, #35	; 0x23
 80071e4:	d84a      	bhi.n	800727c <CDC_Control_FS+0xac>
 80071e6:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <CDC_Control_FS+0x1c>)
 80071e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ec:	0800727d 	.word	0x0800727d
 80071f0:	0800727d 	.word	0x0800727d
 80071f4:	0800727d 	.word	0x0800727d
 80071f8:	0800727d 	.word	0x0800727d
 80071fc:	0800727d 	.word	0x0800727d
 8007200:	0800727d 	.word	0x0800727d
 8007204:	0800727d 	.word	0x0800727d
 8007208:	0800727d 	.word	0x0800727d
 800720c:	0800727d 	.word	0x0800727d
 8007210:	0800727d 	.word	0x0800727d
 8007214:	0800727d 	.word	0x0800727d
 8007218:	0800727d 	.word	0x0800727d
 800721c:	0800727d 	.word	0x0800727d
 8007220:	0800727d 	.word	0x0800727d
 8007224:	0800727d 	.word	0x0800727d
 8007228:	0800727d 	.word	0x0800727d
 800722c:	0800727d 	.word	0x0800727d
 8007230:	0800727d 	.word	0x0800727d
 8007234:	0800727d 	.word	0x0800727d
 8007238:	0800727d 	.word	0x0800727d
 800723c:	0800727d 	.word	0x0800727d
 8007240:	0800727d 	.word	0x0800727d
 8007244:	0800727d 	.word	0x0800727d
 8007248:	0800727d 	.word	0x0800727d
 800724c:	0800727d 	.word	0x0800727d
 8007250:	0800727d 	.word	0x0800727d
 8007254:	0800727d 	.word	0x0800727d
 8007258:	0800727d 	.word	0x0800727d
 800725c:	0800727d 	.word	0x0800727d
 8007260:	0800727d 	.word	0x0800727d
 8007264:	0800727d 	.word	0x0800727d
 8007268:	0800727d 	.word	0x0800727d
 800726c:	0800727d 	.word	0x0800727d
 8007270:	0800727d 	.word	0x0800727d
 8007274:	0800727d 	.word	0x0800727d
 8007278:	0800727d 	.word	0x0800727d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800727c:	bf00      	nop
  }

  return (USBD_OK);
 800727e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007280:	4618      	mov	r0, r3
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t Len)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4805      	ldr	r0, [pc, #20]	; (80072b0 <CDC_Receive_FS+0x24>)
 800729a:	f7fe fb97 	bl	80059cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800729e:	4804      	ldr	r0, [pc, #16]	; (80072b0 <CDC_Receive_FS+0x24>)
 80072a0:	f7fe fbf8 	bl	8005a94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80072a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000140 	.word	0x20000140

080072b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <CDC_Transmit_FS+0x48>)
 80072c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e00b      	b.n	80072f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072da:	887b      	ldrh	r3, [r7, #2]
 80072dc:	461a      	mov	r2, r3
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	4806      	ldr	r0, [pc, #24]	; (80072fc <CDC_Transmit_FS+0x48>)
 80072e2:	f7fe fb51 	bl	8005988 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072e6:	4805      	ldr	r0, [pc, #20]	; (80072fc <CDC_Transmit_FS+0x48>)
 80072e8:	f7fe fb8e 	bl	8005a08 <USBD_CDC_TransmitPacket>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000140 	.word	0x20000140

08007300 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007316:	4618      	mov	r0, r3
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2212      	movs	r2, #18
 8007334:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007336:	4b03      	ldr	r3, [pc, #12]	; (8007344 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	200000d8 	.word	0x200000d8

08007348 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	6039      	str	r1, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2204      	movs	r2, #4
 8007358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800735a:	4b03      	ldr	r3, [pc, #12]	; (8007368 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	200000f8 	.word	0x200000f8

0800736c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4907      	ldr	r1, [pc, #28]	; (80073a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007382:	4808      	ldr	r0, [pc, #32]	; (80073a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007384:	f7ff fdf8 	bl	8006f78 <USBD_GetString>
 8007388:	e004      	b.n	8007394 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800738e:	4805      	ldr	r0, [pc, #20]	; (80073a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007390:	f7ff fdf2 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007394:	4b02      	ldr	r3, [pc, #8]	; (80073a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	2000141c 	.word	0x2000141c
 80073a4:	08007cc8 	.word	0x08007cc8

080073a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	4904      	ldr	r1, [pc, #16]	; (80073c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073b8:	4804      	ldr	r0, [pc, #16]	; (80073cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073ba:	f7ff fddd 	bl	8006f78 <USBD_GetString>
  return USBD_StrDesc;
 80073be:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	2000141c 	.word	0x2000141c
 80073cc:	08007ce0 	.word	0x08007ce0

080073d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	221a      	movs	r2, #26
 80073e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073e2:	f000 f855 	bl	8007490 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073e6:	4b02      	ldr	r3, [pc, #8]	; (80073f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200000fc 	.word	0x200000fc

080073f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d105      	bne.n	8007412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4907      	ldr	r1, [pc, #28]	; (8007428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800740a:	4808      	ldr	r0, [pc, #32]	; (800742c <USBD_FS_ConfigStrDescriptor+0x38>)
 800740c:	f7ff fdb4 	bl	8006f78 <USBD_GetString>
 8007410:	e004      	b.n	800741c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4904      	ldr	r1, [pc, #16]	; (8007428 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007416:	4805      	ldr	r0, [pc, #20]	; (800742c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007418:	f7ff fdae 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	2000141c 	.word	0x2000141c
 800742c:	08007cf4 	.word	0x08007cf4

08007430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	4907      	ldr	r1, [pc, #28]	; (8007464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007446:	4808      	ldr	r0, [pc, #32]	; (8007468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007448:	f7ff fd96 	bl	8006f78 <USBD_GetString>
 800744c:	e004      	b.n	8007458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	4904      	ldr	r1, [pc, #16]	; (8007464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007452:	4805      	ldr	r0, [pc, #20]	; (8007468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007454:	f7ff fd90 	bl	8006f78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007458:	4b02      	ldr	r3, [pc, #8]	; (8007464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	2000141c 	.word	0x2000141c
 8007468:	08007d00 	.word	0x08007d00

0800746c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	220c      	movs	r2, #12
 800747c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800747e:	4b03      	ldr	r3, [pc, #12]	; (800748c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	200000ec 	.word	0x200000ec

08007490 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007496:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <Get_SerialNum+0x44>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800749c:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <Get_SerialNum+0x48>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <Get_SerialNum+0x4c>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074b6:	2208      	movs	r2, #8
 80074b8:	4909      	ldr	r1, [pc, #36]	; (80074e0 <Get_SerialNum+0x50>)
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 f814 	bl	80074e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074c0:	2204      	movs	r2, #4
 80074c2:	4908      	ldr	r1, [pc, #32]	; (80074e4 <Get_SerialNum+0x54>)
 80074c4:	68b8      	ldr	r0, [r7, #8]
 80074c6:	f000 f80f 	bl	80074e8 <IntToUnicode>
  }
}
 80074ca:	bf00      	nop
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	1fff7a10 	.word	0x1fff7a10
 80074d8:	1fff7a14 	.word	0x1fff7a14
 80074dc:	1fff7a18 	.word	0x1fff7a18
 80074e0:	200000fe 	.word	0x200000fe
 80074e4:	2000010e 	.word	0x2000010e

080074e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
 80074fe:	e027      	b.n	8007550 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0f1b      	lsrs	r3, r3, #28
 8007504:	2b09      	cmp	r3, #9
 8007506:	d80b      	bhi.n	8007520 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	0f1b      	lsrs	r3, r3, #28
 800750c:	b2da      	uxtb	r2, r3
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4619      	mov	r1, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	440b      	add	r3, r1
 8007518:	3230      	adds	r2, #48	; 0x30
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	e00a      	b.n	8007536 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	0f1b      	lsrs	r3, r3, #28
 8007524:	b2da      	uxtb	r2, r3
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4619      	mov	r1, r3
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	440b      	add	r3, r1
 8007530:	3237      	adds	r2, #55	; 0x37
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	3301      	adds	r3, #1
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4413      	add	r3, r2
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	3301      	adds	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
 8007550:	7dfa      	ldrb	r2, [r7, #23]
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d3d3      	bcc.n	8007500 <IntToUnicode+0x18>
  }
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b0a0      	sub	sp, #128	; 0x80
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007570:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007580:	f107 0310 	add.w	r3, r7, #16
 8007584:	225c      	movs	r2, #92	; 0x5c
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fb89 	bl	8007ca0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007596:	d149      	bne.n	800762c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800759c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800759e:	2300      	movs	r3, #0
 80075a0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fb fa1a 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80075b2:	f7f9 fa67 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4a1d      	ldr	r2, [pc, #116]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6313      	str	r3, [r2, #48]	; 0x30
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d8:	2302      	movs	r3, #2
 80075da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e0:	2303      	movs	r3, #3
 80075e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075e4:	230a      	movs	r3, #10
 80075e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80075ec:	4619      	mov	r1, r3
 80075ee:	4812      	ldr	r0, [pc, #72]	; (8007638 <HAL_PCD_MspInit+0xd0>)
 80075f0:	f7f9 fc8e 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 80075fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fe:	6353      	str	r3, [r2, #52]	; 0x34
 8007600:	2300      	movs	r3, #0
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 800760a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800760e:	6453      	str	r3, [r2, #68]	; 0x44
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <HAL_PCD_MspInit+0xcc>)
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007618:	60bb      	str	r3, [r7, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800761c:	2200      	movs	r2, #0
 800761e:	2100      	movs	r1, #0
 8007620:	2043      	movs	r0, #67	; 0x43
 8007622:	f7f9 fc3e 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007626:	2043      	movs	r0, #67	; 0x43
 8007628:	f7f9 fc57 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800762c:	bf00      	nop
 800762e:	3780      	adds	r7, #128	; 0x80
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40023800 	.word	0x40023800
 8007638:	40020000 	.word	0x40020000

0800763c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fb07 	bl	8005c66 <USBD_LL_SetupStage>
}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	4619      	mov	r1, r3
 800768a:	f7fe fb41 	bl	8005d10 <USBD_LL_DataOutStage>
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	4613      	mov	r3, r2
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	334c      	adds	r3, #76	; 0x4c
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	4619      	mov	r1, r3
 80076be:	f7fe fbda 	bl	8005e76 <USBD_LL_DataInStage>
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fe fd0e 	bl	80060fa <USBD_LL_SOF>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076ee:	2301      	movs	r3, #1
 80076f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
 80076fe:	e008      	b.n	8007712 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d102      	bne.n	800770e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	e001      	b.n	8007712 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800770e:	f7f9 f9b9 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007718:	7bfa      	ldrb	r2, [r7, #15]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fcae 	bl	800607e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fc56 	bl	8005fda <USBD_LL_Reset>
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fca9 	bl	800609e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <HAL_PCD_SuspendCallback+0x48>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	4a03      	ldr	r2, [pc, #12]	; (8007780 <HAL_PCD_SuspendCallback+0x48>)
 8007772:	f043 0306 	orr.w	r3, r3, #6
 8007776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	e000ed00 	.word	0xe000ed00

08007784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fc99 	bl	80060ca <USBD_LL_Resume>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fcf1 	bl	800619e <USBD_LL_IsoOUTIncomplete>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fcad 	bl	800613a <USBD_LL_IsoINIncomplete>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fd03 	bl	8006202 <USBD_LL_DevConnected>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fd00 	bl	8006218 <USBD_LL_DevDisconnected>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d13c      	bne.n	80078aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007830:	4a20      	ldr	r2, [pc, #128]	; (80078b4 <USBD_LL_Init+0x94>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <USBD_LL_Init+0x94>)
 800783c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007840:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <USBD_LL_Init+0x94>)
 8007842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <USBD_LL_Init+0x94>)
 800784a:	2206      	movs	r2, #6
 800784c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800784e:	4b19      	ldr	r3, [pc, #100]	; (80078b4 <USBD_LL_Init+0x94>)
 8007850:	2202      	movs	r2, #2
 8007852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007854:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <USBD_LL_Init+0x94>)
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <USBD_LL_Init+0x94>)
 800785c:	2202      	movs	r2, #2
 800785e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007860:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <USBD_LL_Init+0x94>)
 8007862:	2200      	movs	r2, #0
 8007864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <USBD_LL_Init+0x94>)
 8007868:	2200      	movs	r2, #0
 800786a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800786c:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <USBD_LL_Init+0x94>)
 800786e:	2200      	movs	r2, #0
 8007870:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <USBD_LL_Init+0x94>)
 8007874:	2200      	movs	r2, #0
 8007876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <USBD_LL_Init+0x94>)
 800787a:	2200      	movs	r2, #0
 800787c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800787e:	480d      	ldr	r0, [pc, #52]	; (80078b4 <USBD_LL_Init+0x94>)
 8007880:	f7f9 fcf3 	bl	800126a <HAL_PCD_Init>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800788a:	f7f9 f8fb 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	4808      	ldr	r0, [pc, #32]	; (80078b4 <USBD_LL_Init+0x94>)
 8007892:	f7fa ff7e 	bl	8002792 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007896:	2240      	movs	r2, #64	; 0x40
 8007898:	2100      	movs	r1, #0
 800789a:	4806      	ldr	r0, [pc, #24]	; (80078b4 <USBD_LL_Init+0x94>)
 800789c:	f7fa ff32 	bl	8002704 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078a0:	2280      	movs	r2, #128	; 0x80
 80078a2:	2101      	movs	r1, #1
 80078a4:	4803      	ldr	r0, [pc, #12]	; (80078b4 <USBD_LL_Init+0x94>)
 80078a6:	f7fa ff2d 	bl	8002704 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2000161c 	.word	0x2000161c

080078b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 fdef 	bl	80014b2 <HAL_PCD_Start>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f990 	bl	8007c00 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	461a      	mov	r2, r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	70fb      	strb	r3, [r7, #3]
 8007900:	460b      	mov	r3, r1
 8007902:	70bb      	strb	r3, [r7, #2]
 8007904:	4613      	mov	r3, r2
 8007906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007916:	78bb      	ldrb	r3, [r7, #2]
 8007918:	883a      	ldrh	r2, [r7, #0]
 800791a:	78f9      	ldrb	r1, [r7, #3]
 800791c:	f7fa faed 	bl	8001efa <HAL_PCD_EP_Open>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f96a 	bl	8007c00 <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fa fb36 	bl	8001fca <HAL_PCD_EP_Close>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f94b 	bl	8007c00 <USBD_Get_USB_Status>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800796e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fa fc0e 	bl	80021b8 <HAL_PCD_EP_SetStall>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f92c 	bl	8007c00 <USBD_Get_USB_Status>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fa fc53 	bl	8002280 <HAL_PCD_EP_ClrStall>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f90d 	bl	8007c00 <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da0b      	bge.n	8007a28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	333e      	adds	r3, #62	; 0x3e
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	e00b      	b.n	8007a40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fa fa20 	bl	8001eb0 <HAL_PCD_SetAddress>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f8c2 	bl	8007c00 <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	460b      	mov	r3, r1
 8007a98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007aa8:	7af9      	ldrb	r1, [r7, #11]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	f7fa fb39 	bl	8002124 <HAL_PCD_EP_Transmit>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f8a1 	bl	8007c00 <USBD_Get_USB_Status>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007aea:	7af9      	ldrb	r1, [r7, #11]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	f7fa fab5 	bl	800205e <HAL_PCD_EP_Receive>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f880 	bl	8007c00 <USBD_Get_USB_Status>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b04:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fa fae5 	bl	80020f4 <HAL_PCD_EP_GetRxCount>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_PCDEx_LPM_Callback+0x18>
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d01f      	beq.n	8007b8a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007b4a:	e03b      	b.n	8007bc4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007b54:	f7f8 ff2a 	bl	80009ac <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b58:	4b1c      	ldr	r3, [pc, #112]	; (8007bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	4a1b      	ldr	r2, [pc, #108]	; (8007bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8007b5e:	f023 0306 	bic.w	r3, r3, #6
 8007b62:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe faa1 	bl	80060ca <USBD_LL_Resume>
    break;
 8007b88:	e01c      	b.n	8007bc4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fa78 	bl	800609e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	4a04      	ldr	r2, [pc, #16]	; (8007bcc <HAL_PCDEx_LPM_Callback+0x98>)
 8007bbc:	f043 0306 	orr.w	r3, r3, #6
 8007bc0:	6113      	str	r3, [r2, #16]
    break;
 8007bc2:	bf00      	nop
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	e000ed00 	.word	0xe000ed00

08007bd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <USBD_static_malloc+0x18>)
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20001b28 	.word	0x20001b28

08007bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]

}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d817      	bhi.n	8007c44 <USBD_Get_USB_Status+0x44>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <USBD_Get_USB_Status+0x1c>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c33 	.word	0x08007c33
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c3f 	.word	0x08007c3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c30:	e00b      	b.n	8007c4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c32:	2303      	movs	r3, #3
 8007c34:	73fb      	strb	r3, [r7, #15]
    break;
 8007c36:	e008      	b.n	8007c4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3c:	e005      	b.n	8007c4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	73fb      	strb	r3, [r7, #15]
    break;
 8007c42:	e002      	b.n	8007c4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	73fb      	strb	r3, [r7, #15]
    break;
 8007c48:	bf00      	nop
  }
  return usb_status;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <__libc_init_array>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	4d0d      	ldr	r5, [pc, #52]	; (8007c90 <__libc_init_array+0x38>)
 8007c5c:	4c0d      	ldr	r4, [pc, #52]	; (8007c94 <__libc_init_array+0x3c>)
 8007c5e:	1b64      	subs	r4, r4, r5
 8007c60:	10a4      	asrs	r4, r4, #2
 8007c62:	2600      	movs	r6, #0
 8007c64:	42a6      	cmp	r6, r4
 8007c66:	d109      	bne.n	8007c7c <__libc_init_array+0x24>
 8007c68:	4d0b      	ldr	r5, [pc, #44]	; (8007c98 <__libc_init_array+0x40>)
 8007c6a:	4c0c      	ldr	r4, [pc, #48]	; (8007c9c <__libc_init_array+0x44>)
 8007c6c:	f000 f820 	bl	8007cb0 <_init>
 8007c70:	1b64      	subs	r4, r4, r5
 8007c72:	10a4      	asrs	r4, r4, #2
 8007c74:	2600      	movs	r6, #0
 8007c76:	42a6      	cmp	r6, r4
 8007c78:	d105      	bne.n	8007c86 <__libc_init_array+0x2e>
 8007c7a:	bd70      	pop	{r4, r5, r6, pc}
 8007c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c80:	4798      	blx	r3
 8007c82:	3601      	adds	r6, #1
 8007c84:	e7ee      	b.n	8007c64 <__libc_init_array+0xc>
 8007c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c8a:	4798      	blx	r3
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	e7f2      	b.n	8007c76 <__libc_init_array+0x1e>
 8007c90:	08007d28 	.word	0x08007d28
 8007c94:	08007d28 	.word	0x08007d28
 8007c98:	08007d28 	.word	0x08007d28
 8007c9c:	08007d2c 	.word	0x08007d2c

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <_init>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr

08007cbc <_fini>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr
