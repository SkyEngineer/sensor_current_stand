
test_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007698  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078bc  080078bc  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  2000010c  080079d0  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d3c  080079d0  00021d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f394  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb2  00000000  00000000  0002f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00032088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cda  00000000  00000000  00033700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106f7  00000000  00000000  000573da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a95  00000000  00000000  00067ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131566  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  001315b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007844 	.word	0x08007844

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	08007844 	.word	0x08007844

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_GPIO_Init+0x9c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_GPIO_Init+0x9c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_GPIO_Init+0x9c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_U_EN_GPIO_Port, MUX_U_EN_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	480b      	ldr	r0, [pc, #44]	; (80005a8 <MX_GPIO_Init+0xa0>)
 800057a:	f000 fc79 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUX_U_EN_Pin;
 800057e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MUX_U_EN_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	4619      	mov	r1, r3
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xa0>)
 8000598:	f000 fad6 	bl	8000b48 <HAL_GPIO_Init>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f922 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f816 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ffa6 	bl	8000508 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005bc:	f006 fbac 	bl	8006d18 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80005c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c4:	f000 f98a 	bl	80008dc <HAL_Delay>
	  HAL_GPIO_TogglePin(MUX_U_EN_GPIO_Port, MUX_U_EN_Pin);
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0x30>)
 80005ce:	f000 fc68 	bl	8000ea2 <HAL_GPIO_TogglePin>
	  CDC_Receive_FS(RxData,  (uint32_t)1);
 80005d2:	2101      	movs	r1, #1
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <main+0x34>)
 80005d6:	f006 fc49 	bl	8006e6c <CDC_Receive_FS>
	  HAL_Delay(500);
 80005da:	e7f1      	b.n	80005c0 <main+0x14>
 80005dc:	40020400 	.word	0x40020400
 80005e0:	20000128 	.word	0x20000128

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	; 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f007 f91e 	bl	8007834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd4>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 7;
 8000658:	2307      	movs	r3, #7
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800065c:	2348      	movs	r3, #72	; 0x48
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000664:	2303      	movs	r3, #3
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fcbf 	bl	8002ff4 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800067c:	f000 f81e 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fee3 	bl	8002468 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006a8:	f000 f808 	bl	80006bc <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	; 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_MspInit+0x4c>)
 80006d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006dc:	6453      	str	r3, [r2, #68]	; 0x44
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_MspInit+0x4c>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x4c>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x4c>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f89a 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <OTG_FS_IRQHandler+0x10>)
 8000772:	f000 fd07 	bl	8001184 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20001610 	.word	0x20001610

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <SystemInit+0x20>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <SystemInit+0x20>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007aa:	490e      	ldr	r1, [pc, #56]	; (80007e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007ac:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007c0:	4c0b      	ldr	r4, [pc, #44]	; (80007f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ce:	f7ff ffd7 	bl	8000780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d2:	f007 f80b 	bl	80077ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d6:	f7ff fee9 	bl	80005ac <main>
  bx  lr    
 80007da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80007e8:	080078c4 	.word	0x080078c4
  ldr r2, =_sbss
 80007ec:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80007f0:	20001d3c 	.word	0x20001d3c

080007f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_Init+0x40>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <HAL_Init+0x40>)
 8000802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_Init+0x40>)
 800080e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_Init+0x40>)
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f94f 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	200f      	movs	r0, #15
 8000828:	f000 f808 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff ff4c 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023c00 	.word	0x40023c00

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x54>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x58>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f967 	bl	8000b2e <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e00e      	b.n	8000888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d80a      	bhi.n	8000886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f000 f92f 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <HAL_InitTick+0x5c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000
 8000894:	20000008 	.word	0x20000008
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	2000012c 	.word	0x2000012c

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	2000012c 	.word	0x2000012c

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff ffee 	bl	80008c4 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_Delay+0x44>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000902:	bf00      	nop
 8000904:	f7ff ffde 	bl	80008c4 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008

08000924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800094c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <__NVIC_SetPriorityGrouping+0x44>)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	60d3      	str	r3, [r2, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <__NVIC_GetPriorityGrouping+0x18>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 0307 	and.w	r3, r3, #7
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	2b00      	cmp	r3, #0
 8000998:	db0b      	blt.n	80009b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 021f 	and.w	r2, r3, #31
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <__NVIC_EnableIRQ+0x38>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	095b      	lsrs	r3, r3, #5
 80009a8:	2001      	movs	r0, #1
 80009aa:	fa00 f202 	lsl.w	r2, r0, r2
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100

080009c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	; (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	; (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff29 	bl	8000924 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff3e 	bl	800096c <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff31 	bl	8000988 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e165      	b.n	8000e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8154 	bne.w	8000e2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d005      	beq.n	8000b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d130      	bne.n	8000bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	091b      	lsrs	r3, r3, #4
 8000be6:	f003 0201 	and.w	r2, r3, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d017      	beq.n	8000c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d123      	bne.n	8000c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	08da      	lsrs	r2, r3, #3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3208      	adds	r2, #8
 8000c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691a      	ldr	r2, [r3, #16]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	69b9      	ldr	r1, [r7, #24]
 8000c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0203 	and.w	r2, r3, #3
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80ae 	beq.w	8000e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <HAL_GPIO_Init+0x300>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a5c      	ldr	r2, [pc, #368]	; (8000e48 <HAL_GPIO_Init+0x300>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <HAL_GPIO_Init+0x300>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cea:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <HAL_GPIO_Init+0x304>)
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	220f      	movs	r2, #15
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4f      	ldr	r2, [pc, #316]	; (8000e50 <HAL_GPIO_Init+0x308>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d025      	beq.n	8000d62 <HAL_GPIO_Init+0x21a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <HAL_GPIO_Init+0x30c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d01f      	beq.n	8000d5e <HAL_GPIO_Init+0x216>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4d      	ldr	r2, [pc, #308]	; (8000e58 <HAL_GPIO_Init+0x310>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d019      	beq.n	8000d5a <HAL_GPIO_Init+0x212>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4c      	ldr	r2, [pc, #304]	; (8000e5c <HAL_GPIO_Init+0x314>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x20e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <HAL_GPIO_Init+0x318>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x20a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x31c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x206>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x320>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x202>
 8000d46:	2306      	movs	r3, #6
 8000d48:	e00c      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	e00a      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e008      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e004      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x21c>
 8000d62:	2300      	movs	r3, #0
 8000d64:	69fa      	ldr	r2, [r7, #28]
 8000d66:	f002 0203 	and.w	r2, r2, #3
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4093      	lsls	r3, r2
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d74:	4935      	ldr	r1, [pc, #212]	; (8000e4c <HAL_GPIO_Init+0x304>)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da6:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dac:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd0:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_GPIO_Init+0x324>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	f67f ae96 	bls.w	8000b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40013c00 	.word	0x40013c00

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	619a      	str	r2, [r3, #24]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	619a      	str	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed8:	b08f      	sub	sp, #60	; 0x3c
 8000eda:	af0a      	add	r7, sp, #40	; 0x28
 8000edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e116      	b.n	8001116 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f006 f8fa 	bl	80070fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fc17 	bl	800375a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	687e      	ldr	r6, [r7, #4]
 8000f34:	466d      	mov	r5, sp
 8000f36:	f106 0410 	add.w	r4, r6, #16
 8000f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f4a:	1d33      	adds	r3, r6, #4
 8000f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f002 faee 	bl	8003530 <USB_CoreInit>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d005      	beq.n	8000f66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0d7      	b.n	8001116 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fc05 	bl	800377c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e04a      	b.n	800100e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	333d      	adds	r3, #61	; 0x3d
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	333c      	adds	r3, #60	; 0x3c
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	b298      	uxth	r0, r3
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3344      	adds	r3, #68	; 0x44
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3340      	adds	r3, #64	; 0x40
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3348      	adds	r3, #72	; 0x48
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	334c      	adds	r3, #76	; 0x4c
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3354      	adds	r3, #84	; 0x54
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3af      	bcc.n	8000f78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e044      	b.n	80010a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3301      	adds	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3b5      	bcc.n	800101e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	687e      	ldr	r6, [r7, #4]
 80010ba:	466d      	mov	r5, sp
 80010bc:	f106 0410 	add.w	r4, r6, #16
 80010c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d0:	1d33      	adds	r3, r6, #4
 80010d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f002 fb9d 	bl	8003814 <USB_DevInit>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2202      	movs	r2, #2
 80010e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e014      	b.n	8001116 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 f98b 	bl	8002420 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fcdf 	bl	8004ad2 <USB_DevDisconnect>

  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800111e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_PCD_Start+0x1c>
 8001136:	2302      	movs	r3, #2
 8001138:	e020      	b.n	800117c <HAL_PCD_Start+0x5e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	2b01      	cmp	r3, #1
 8001148:	d109      	bne.n	800115e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fae8 	bl	8003738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fc8f 	bl	8004a90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b08d      	sub	sp, #52	; 0x34
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fd4d 	bl	8004c3a <USB_GetMode>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 84b7 	bne.w	8001b16 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fcb1 	bl	8004b14 <USB_ReadInterrupts>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 84ad 	beq.w	8001b14 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fc9e 	bl	8004b14 <USB_ReadInterrupts>
 80011d8:	4603      	mov	r3, r0
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d107      	bne.n	80011f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f002 0202 	and.w	r2, r2, #2
 80011f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fc8c 	bl	8004b14 <USB_ReadInterrupts>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b10      	cmp	r3, #16
 8001204:	d161      	bne.n	80012ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0210 	bic.w	r2, r2, #16
 8001214:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f003 020f 	and.w	r2, r3, #15
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	3304      	adds	r3, #4
 8001234:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	0c5b      	lsrs	r3, r3, #17
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	2b02      	cmp	r3, #2
 8001240:	d124      	bne.n	800128c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d035      	beq.n	80012ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	6a38      	ldr	r0, [r7, #32]
 8001262:	f003 fac3 	bl	80047ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001272:	441a      	add	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001284:	441a      	add	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	621a      	str	r2, [r3, #32]
 800128a:	e016      	b.n	80012ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	0c5b      	lsrs	r3, r3, #17
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	2b06      	cmp	r3, #6
 8001296:	d110      	bne.n	80012ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800129e:	2208      	movs	r2, #8
 80012a0:	4619      	mov	r1, r3
 80012a2:	6a38      	ldr	r0, [r7, #32]
 80012a4:	f003 faa2 	bl	80047ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b4:	441a      	add	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0210 	orr.w	r2, r2, #16
 80012c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fc20 	bl	8004b14 <USB_ReadInterrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012de:	f040 80a7 	bne.w	8001430 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc25 	bl	8004b3a <USB_ReadDevAllOutEpInterrupt>
 80012f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012f2:	e099      	b.n	8001428 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 808e 	beq.w	800141c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fc49 	bl	8004ba2 <USB_ReadDevOutEPInterrupt>
 8001310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	015a      	lsls	r2, r3, #5
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4413      	add	r3, r2
 8001324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001328:	461a      	mov	r2, r3
 800132a:	2301      	movs	r3, #1
 800132c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800132e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 feef 	bl	8002114 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	015a      	lsls	r2, r3, #5
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	4413      	add	r3, r2
 8001348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800134c:	461a      	mov	r2, r3
 800134e:	2308      	movs	r3, #8
 8001350:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 ffc5 	bl	80022e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	015a      	lsls	r2, r3, #5
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001370:	461a      	mov	r2, r3
 8001372:	2310      	movs	r3, #16
 8001374:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d030      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001388:	2b80      	cmp	r3, #128	; 0x80
 800138a:	d109      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a2:	4613      	mov	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4413      	add	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d108      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2200      	movs	r2, #0
 80013c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f005 ffb2 	bl	8007334 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013dc:	461a      	mov	r2, r3
 80013de:	2302      	movs	r3, #2
 80013e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	015a      	lsls	r2, r3, #5
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f8:	461a      	mov	r2, r3
 80013fa:	2320      	movs	r3, #32
 80013fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	015a      	lsls	r2, r3, #5
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001414:	461a      	mov	r2, r3
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f af62 	bne.w	80012f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fb6d 	bl	8004b14 <USB_ReadInterrupts>
 800143a:	4603      	mov	r3, r0
 800143c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001440:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001444:	f040 80db 	bne.w	80015fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fb8e 	bl	8004b6e <USB_ReadDevAllInEpInterrupt>
 8001452:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001458:	e0cd      	b.n	80015f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80c2 	beq.w	80015ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fbb4 	bl	8004bde <USB_ReadDevInEPInterrupt>
 8001476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d057      	beq.n	8001532 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2201      	movs	r2, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	69f9      	ldr	r1, [r7, #28]
 800149e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014a2:	4013      	ands	r3, r2
 80014a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b2:	461a      	mov	r2, r3
 80014b4:	2301      	movs	r3, #1
 80014b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d132      	bne.n	8001526 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	334c      	adds	r3, #76	; 0x4c
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4403      	add	r3, r0
 80014e0:	3348      	adds	r3, #72	; 0x48
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4419      	add	r1, r3
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4403      	add	r3, r0
 80014f4:	334c      	adds	r3, #76	; 0x4c
 80014f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d113      	bne.n	8001526 <HAL_PCD_IRQHandler+0x3a2>
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	3354      	adds	r3, #84	; 0x54
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800151e:	461a      	mov	r2, r3
 8001520:	2101      	movs	r1, #1
 8001522:	f003 fbbb 	bl	8004c9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f005 fe7c 	bl	800722a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001548:	461a      	mov	r2, r3
 800154a:	2308      	movs	r3, #8
 800154c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001564:	461a      	mov	r2, r3
 8001566:	2310      	movs	r3, #16
 8001568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001580:	461a      	mov	r2, r3
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001592:	6a38      	ldr	r0, [r7, #32]
 8001594:	f002 fa9c 	bl	8003ad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	3338      	adds	r3, #56	; 0x38
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	78db      	ldrb	r3, [r3, #3]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2200      	movs	r2, #0
 80015b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f005 fec9 	bl	8007358 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d2:	461a      	mov	r2, r3
 80015d4:	2302      	movs	r3, #2
 80015d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fd08 	bl	8001ffa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f47f af2e 	bne.w	800145a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fa86 	bl	8004b14 <USB_ReadInterrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800160e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001612:	d122      	bne.n	800165a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f006 f843 	bl	80076c8 <HAL_PCDEx_LPM_Callback>
 8001642:	e002      	b.n	800164a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f005 fe67 	bl	8007318 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fa58 	bl	8004b14 <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800166e:	d112      	bne.n	8001696 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f005 fe23 	bl	80072cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001694:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fa3a 	bl	8004b14 <USB_ReadInterrupts>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016aa:	d121      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80016ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d111      	bne.n	80016ea <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	f003 020f 	and.w	r2, r3, #15
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016e0:	2101      	movs	r1, #1
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 fff0 	bl	80076c8 <HAL_PCDEx_LPM_Callback>
 80016e8:	e002      	b.n	80016f0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 fdee 	bl	80072cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fa0d 	bl	8004b14 <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001704:	f040 80b7 	bne.w	8001876 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2110      	movs	r1, #16
 8001722:	4618      	mov	r0, r3
 8001724:	f002 f9d4 	bl	8003ad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172c:	e046      	b.n	80017bc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173a:	461a      	mov	r2, r3
 800173c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001740:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001752:	0151      	lsls	r1, r2, #5
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	440a      	add	r2, r1
 8001758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800175c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001760:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176e:	461a      	mov	r2, r3
 8001770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001774:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001786:	0151      	lsls	r1, r2, #5
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	440a      	add	r2, r1
 800178c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a6:	0151      	lsls	r1, r2, #5
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	440a      	add	r2, r1
 80017ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	3301      	adds	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3b3      	bcc.n	800172e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f2:	f043 030b 	orr.w	r3, r3, #11
 80017f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f043 030b 	orr.w	r3, r3, #11
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	e015      	b.n	800183c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001822:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001826:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001836:	f043 030b 	orr.w	r3, r3, #11
 800183a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800184e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001860:	461a      	mov	r2, r3
 8001862:	f003 fa1b 	bl	8004c9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 f94a 	bl	8004b14 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188a:	d124      	bne.n	80018d6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f9e0 	bl	8004c56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f995 	bl	8003bca <USB_GetDevSpeed>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681c      	ldr	r4, [r3, #0]
 80018ac:	f000 fec2 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 80018b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	4620      	mov	r0, r4
 80018bc:	f001 fe9a 	bl	80035f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f005 fcda 	bl	800727a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 f91a 	bl	8004b14 <USB_ReadInterrupts>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d10a      	bne.n	8001900 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f005 fcb7 	bl	800725e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f002 0208 	and.w	r2, r2, #8
 80018fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f905 	bl	8004b14 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d122      	bne.n	800195a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001920:	2301      	movs	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	e014      	b.n	8001950 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d105      	bne.n	800194a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	b2db      	uxtb	r3, r3
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fb27 	bl	8001f98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001956:	429a      	cmp	r2, r3
 8001958:	d3e5      	bcc.n	8001926 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 f8d8 	bl	8004b14 <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800196e:	d13b      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001970:	2301      	movs	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e02b      	b.n	80019ce <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	015a      	lsls	r2, r3, #5
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3340      	adds	r3, #64	; 0x40
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d115      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800199c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da12      	bge.n	80019c8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	333f      	adds	r3, #63	; 0x3f
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4619      	mov	r1, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fae8 	bl	8001f98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3301      	adds	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3ce      	bcc.n	8001976 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f891 	bl	8004b14 <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019fc:	d155      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fe:	2301      	movs	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e045      	b.n	8001a90 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d12e      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da2b      	bge.n	8001a8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a3e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d121      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	6053      	str	r3, [r2, #4]
            break;
 8001a88:	e007      	b.n	8001a9a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3b4      	bcc.n	8001a04 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 f830 	bl	8004b14 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001abe:	d10a      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f005 fc5b 	bl	800737c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 f81a 	bl	8004b14 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d115      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 fc4b 	bl	8007398 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	e000      	b.n	8001b16 <HAL_PCD_IRQHandler+0x992>
      return;
 8001b14:	bf00      	nop
    }
  }
}
 8001b16:	3734      	adds	r7, #52	; 0x34
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}

08001b1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_SetAddress+0x1a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e013      	b.n	8001b5e <HAL_PCD_SetAddress+0x42>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 ff78 	bl	8004a44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	4608      	mov	r0, r1
 8001b70:	4611      	mov	r1, r2
 8001b72:	461a      	mov	r2, r3
 8001b74:	4603      	mov	r3, r0
 8001b76:	70fb      	strb	r3, [r7, #3]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	803b      	strh	r3, [r7, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da0f      	bge.n	8001bac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 020f 	and.w	r2, r3, #15
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	3338      	adds	r3, #56	; 0x38
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	705a      	strb	r2, [r3, #1]
 8001baa:	e00f      	b.n	8001bcc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bd8:	883a      	ldrh	r2, [r7, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	78ba      	ldrb	r2, [r7, #2]
 8001be2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bf6:	78bb      	ldrb	r3, [r7, #2]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_PCD_EP_Open+0xaa>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e00e      	b.n	8001c2e <HAL_PCD_EP_Open+0xc8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68f9      	ldr	r1, [r7, #12]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fff8 	bl	8003c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	da0f      	bge.n	8001c6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	3338      	adds	r3, #56	; 0x38
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	705a      	strb	r2, [r3, #1]
 8001c68:	e00f      	b.n	8001c8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_Close+0x6e>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_Close+0x8c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 f836 	bl	8003d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	f002 fb15 	bl	800436c <USB_EP0StartXfer>
 8001d42:	e008      	b.n	8001d56 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	f002 f8c3 	bl	8003edc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	3338      	adds	r3, #56	; 0x38
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d102      	bne.n	8001dea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	f002 fab3 	bl	800436c <USB_EP0StartXfer>
 8001e06:	e008      	b.n	8001e1a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	f002 f861 	bl	8003edc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 020f 	and.w	r2, r3, #15
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d901      	bls.n	8001e42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e050      	b.n	8001ee4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da0f      	bge.n	8001e6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3338      	adds	r3, #56	; 0x38
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	705a      	strb	r2, [r3, #1]
 8001e68:	e00d      	b.n	8001e86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_PCD_EP_SetStall+0x82>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e01e      	b.n	8001ee4 <HAL_PCD_EP_SetStall+0xc0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fcf1 	bl	800489c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10a      	bne.n	8001eda <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2d9      	uxtb	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f002 fee1 	bl	8004c9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d901      	bls.n	8001f0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e042      	b.n	8001f90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0f      	bge.n	8001f32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	705a      	strb	r2, [r3, #1]
 8001f30:	e00f      	b.n	8001f52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 020f 	and.w	r2, r3, #15
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_EP_ClrStall+0x86>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e00e      	b.n	8001f90 <HAL_PCD_EP_ClrStall+0xa4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fcf9 	bl	8004978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da0c      	bge.n	8001fc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	f003 020f 	and.w	r2, r3, #15
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	3338      	adds	r3, #56	; 0x38
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e00c      	b.n	8001fe0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fb18 	bl	800461c <USB_EPStopXfer>
 8001fec:	4603      	mov	r3, r0
 8001fee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b08a      	sub	sp, #40	; 0x28
 8001ffe:	af02      	add	r7, sp, #8
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3338      	adds	r3, #56	; 0x38
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	3304      	adds	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	429a      	cmp	r2, r3
 800202c:	d901      	bls.n	8002032 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e06c      	b.n	800210c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d902      	bls.n	800204e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3303      	adds	r3, #3
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002056:	e02b      	b.n	80020b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3303      	adds	r3, #3
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208c:	b2db      	uxtb	r3, r3
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f002 fb6c 	bl	8004770 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	441a      	add	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d809      	bhi.n	80020da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d203      	bcs.n	80020da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1be      	bne.n	8002058 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d811      	bhi.n	800210a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	2201      	movs	r2, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	43db      	mvns	r3, r3
 8002100:	6939      	ldr	r1, [r7, #16]
 8002102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002106:	4013      	ands	r3, r2
 8002108:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	333c      	adds	r3, #60	; 0x3c
 800212c:	3304      	adds	r3, #4
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d17b      	bne.n	8002242 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a61      	ldr	r2, [pc, #388]	; (80022dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	f240 80b9 	bls.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b3 	beq.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217c:	6093      	str	r3, [r2, #8]
 800217e:	e0a7      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2320      	movs	r3, #32
 800219a:	6093      	str	r3, [r2, #8]
 800219c:	e098      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 8093 	bne.w	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4a4b      	ldr	r2, [pc, #300]	; (80022dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d90f      	bls.n	80021d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	461a      	mov	r2, r3
 80021ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ce:	6093      	str	r3, [r2, #8]
 80021d0:	e07e      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	0159      	lsls	r1, r3, #5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d114      	bne.n	8002234 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800221c:	461a      	mov	r2, r3
 800221e:	2101      	movs	r1, #1
 8002220:	f002 fd3c 	bl	8004c9c <USB_EP0_OutStart>
 8002224:	e006      	b.n	8002234 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	441a      	add	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f004 ffda 	bl	80071f4 <HAL_PCD_DataOutStageCallback>
 8002240:	e046      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d124      	bne.n	8002294 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e032      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	2320      	movs	r3, #32
 8002284:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f004 ffb1 	bl	80071f4 <HAL_PCD_DataOutStageCallback>
 8002292:	e01d      	b.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d108      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022bc:	461a      	mov	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f002 fcec 	bl	8004c9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f004 ff92 	bl	80071f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	4f54300a 	.word	0x4f54300a
 80022e0:	4f54310a 	.word	0x4f54310a

080022e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	333c      	adds	r3, #60	; 0x3c
 80022fc:	3304      	adds	r3, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a15      	ldr	r2, [pc, #84]	; (800236c <PCD_EP_OutSetupPacket_int+0x88>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d90e      	bls.n	8002338 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002330:	461a      	mov	r2, r3
 8002332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002336:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f004 ff49 	bl	80071d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <PCD_EP_OutSetupPacket_int+0x88>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d90c      	bls.n	8002360 <PCD_EP_OutSetupPacket_int+0x7c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d108      	bne.n	8002360 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002358:	461a      	mov	r2, r3
 800235a:	2101      	movs	r1, #1
 800235c:	f002 fc9e 	bl	8004c9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	4f54300a 	.word	0x4f54300a

08002370 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
 800237c:	4613      	mov	r3, r2
 800237e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800238e:	883b      	ldrh	r3, [r7, #0]
 8002390:	0419      	lsls	r1, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	430a      	orrs	r2, r1
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
 800239c:	e028      	b.n	80023f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e00d      	b.n	80023ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	3340      	adds	r3, #64	; 0x40
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d3ec      	bcc.n	80023b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023d8:	883b      	ldrh	r3, [r7, #0]
 80023da:	0418      	lsls	r0, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	4302      	orrs	r2, r0
 80023e8:	3340      	adds	r3, #64	; 0x40
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	f043 0303 	orr.w	r3, r3, #3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0cc      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d90c      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b65      	ldr	r3, [pc, #404]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0b8      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	494d      	ldr	r1, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d044      	beq.n	8002588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d119      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e07f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d003      	beq.n	8002526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e067      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4934      	ldr	r1, [pc, #208]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002558:	f7fe f9b4 	bl	80008c4 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe f9b0 	bl	80008c4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e04f      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 020c 	and.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d1eb      	bne.n	8002560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d20c      	bcs.n	80025b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e032      	b.n	8002616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4916      	ldr	r1, [pc, #88]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	490e      	ldr	r1, [pc, #56]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ee:	f000 fb57 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 80025f2:	4602      	mov	r2, r0
 80025f4:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	490a      	ldr	r1, [pc, #40]	; (8002628 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	5ccb      	ldrb	r3, [r1, r3]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe f914 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00
 8002624:	40023800 	.word	0x40023800
 8002628:	080078a4 	.word	0x080078a4
 800262c:	20000000 	.word	0x20000000
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_RCC_GetHCLKFreq+0x14>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	496c      	ldr	r1, [pc, #432]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026a2:	2301      	movs	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026b2:	4b64      	ldr	r3, [pc, #400]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	4960      	ldr	r1, [pc, #384]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d017      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e0:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4955      	ldr	r1, [pc, #340]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fe:	d101      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002700:	2301      	movs	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800270c:	2301      	movs	r3, #1
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800271c:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800271e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002722:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	4946      	ldr	r1, [pc, #280]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273a:	d101      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002748:	2301      	movs	r3, #1
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 808a 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b36      	ldr	r3, [pc, #216]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002776:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a33      	ldr	r2, [pc, #204]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002782:	f7fe f89f 	bl	80008c4 <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe f89b 	bl	80008c4 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e278      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d02f      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d028      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d114      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe f869 	bl	80008c4 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	e00a      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe f865 	bl	80008c4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e240      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0ee      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002824:	d114      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800283a:	4902      	ldr	r1, [pc, #8]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
 8002840:	e00c      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40007000 	.word	0x40007000
 800284c:	42470e40 	.word	0x42470e40
 8002850:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002856:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800285e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	4944      	ldr	r1, [pc, #272]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286a:	4313      	orrs	r3, r2
 800286c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002882:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002890:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4937      	ldr	r1, [pc, #220]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c0:	492e      	ldr	r1, [pc, #184]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d011      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	4926      	ldr	r1, [pc, #152]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f2:	d101      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	491a      	ldr	r1, [pc, #104]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002934:	4911      	ldr	r1, [pc, #68]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002946:	2301      	movs	r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002958:	f040 80ff 	bne.w	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002962:	f7fd ffaf 	bl	80008c4 <HAL_GetTick>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002968:	e00e      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800296a:	f7fd ffab 	bl	80008c4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d907      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e188      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800297c:	40023800 	.word	0x40023800
 8002980:	424711e0 	.word	0x424711e0
 8002984:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002988:	4b7e      	ldr	r3, [pc, #504]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ea      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d028      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d124      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029bc:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	3301      	adds	r3, #1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ce:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d4:	0e1b      	lsrs	r3, r3, #24
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	071b      	lsls	r3, r3, #28
 80029fe:	4961      	ldr	r1, [pc, #388]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d035      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d130      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	0f1b      	lsrs	r3, r3, #28
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	071b      	lsls	r3, r3, #28
 8002a74:	4943      	ldr	r1, [pc, #268]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a7c:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a82:	f023 021f 	bic.w	r2, r3, #31
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	493d      	ldr	r1, [pc, #244]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d029      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d124      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002abc:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac2:	0f1b      	lsrs	r3, r3, #28
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	019b      	lsls	r3, r3, #6
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	071b      	lsls	r3, r3, #28
 8002aec:	4925      	ldr	r1, [pc, #148]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	3b01      	subs	r3, #1
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	4917      	ldr	r1, [pc, #92]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fd fec6 	bl	80008c4 <HAL_GetTick>
 8002b38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b3c:	f7fd fec2 	bl	80008c4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e09f      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 8095 	bne.w	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fd feac 	bl	80008c4 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b6e:	e00f      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b70:	f7fd fea8 	bl	80008c4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d908      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e085      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	42470068 	.word	0x42470068
 8002b8c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9c:	d0e8      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02b      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d127      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	431a      	orrs	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	3b01      	subs	r3, #1
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	4928      	ldr	r1, [pc, #160]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01d      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c2a:	d118      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	0e1b      	lsrs	r3, r3, #24
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	019b      	lsls	r3, r3, #6
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c64:	f7fd fe2e 	bl	80008c4 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c6c:	f7fd fe2a 	bl	80008c4 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e007      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8a:	d1ef      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3730      	adds	r7, #48	; 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	42470070 	.word	0x42470070

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b0a6      	sub	sp, #152	; 0x98
 8002ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc6:	4bc8      	ldr	r3, [pc, #800]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	f200 817e 	bhi.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x330>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002fd1 	.word	0x08002fd1
 8002ce4:	08002fd1 	.word	0x08002fd1
 8002ce8:	08002fd1 	.word	0x08002fd1
 8002cec:	08002d19 	.word	0x08002d19
 8002cf0:	08002fd1 	.word	0x08002fd1
 8002cf4:	08002fd1 	.word	0x08002fd1
 8002cf8:	08002fd1 	.word	0x08002fd1
 8002cfc:	08002d21 	.word	0x08002d21
 8002d00:	08002fd1 	.word	0x08002fd1
 8002d04:	08002fd1 	.word	0x08002fd1
 8002d08:	08002fd1 	.word	0x08002fd1
 8002d0c:	08002e8b 	.word	0x08002e8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4bb6      	ldr	r3, [pc, #728]	; (8002fec <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002d16:	e15f      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d18:	4bb5      	ldr	r3, [pc, #724]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d1e:	e15b      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	4bb1      	ldr	r3, [pc, #708]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2c:	4bae      	ldr	r3, [pc, #696]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	2200      	movs	r2, #0
 8002d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d50:	4ba7      	ldr	r3, [pc, #668]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d52:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d56:	462a      	mov	r2, r5
 8002d58:	fb03 f202 	mul.w	r2, r3, r2
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	4621      	mov	r1, r4
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	4aa2      	ldr	r2, [pc, #648]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d68:	4621      	mov	r1, r4
 8002d6a:	fba1 1202 	umull	r1, r2, r1, r2
 8002d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d70:	460a      	mov	r2, r1
 8002d72:	67ba      	str	r2, [r7, #120]	; 0x78
 8002d74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d76:	4413      	add	r3, r2
 8002d78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002d8c:	f7fd fa3a 	bl	8000204 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4613      	mov	r3, r2
 8002d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d9a:	e064      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9c:	4b92      	ldr	r3, [pc, #584]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	099b      	lsrs	r3, r3, #6
 8002da2:	2200      	movs	r2, #0
 8002da4:	653b      	str	r3, [r7, #80]	; 0x50
 8002da6:	657a      	str	r2, [r7, #84]	; 0x54
 8002da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db0:	2300      	movs	r3, #0
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002db8:	4622      	mov	r2, r4
 8002dba:	462b      	mov	r3, r5
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0159      	lsls	r1, r3, #5
 8002dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dca:	0150      	lsls	r0, r2, #5
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	1a51      	subs	r1, r2, r1
 8002dd4:	6139      	str	r1, [r7, #16]
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dea:	4659      	mov	r1, fp
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df4:	4651      	mov	r1, sl
 8002df6:	018a      	lsls	r2, r1, #6
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ebb2 0801 	subs.w	r8, r2, r1
 8002dfe:	4659      	mov	r1, fp
 8002e00:	eb63 0901 	sbc.w	r9, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e18:	4690      	mov	r8, r2
 8002e1a:	4699      	mov	r9, r3
 8002e1c:	4623      	mov	r3, r4
 8002e1e:	eb18 0303 	adds.w	r3, r8, r3
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	462b      	mov	r3, r5
 8002e26:	eb49 0303 	adc.w	r3, r9, r3
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e38:	4629      	mov	r1, r5
 8002e3a:	028b      	lsls	r3, r1, #10
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e42:	4621      	mov	r1, r4
 8002e44:	028a      	lsls	r2, r1, #10
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e4e:	2200      	movs	r2, #0
 8002e50:	643b      	str	r3, [r7, #64]	; 0x40
 8002e52:	647a      	str	r2, [r7, #68]	; 0x44
 8002e54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e58:	f7fd f9d4 	bl	8000204 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e66:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	3301      	adds	r3, #1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002e78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e88:	e0a6      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e8a:	4b57      	ldr	r3, [pc, #348]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e96:	4b54      	ldr	r3, [pc, #336]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d02a      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eb8:	fb03 f201 	mul.w	r2, r3, r1
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	fb00 f303 	mul.w	r3, r0, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ec6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eca:	677a      	str	r2, [r7, #116]	; 0x74
 8002ecc:	460a      	mov	r2, r1
 8002ece:	673a      	str	r2, [r7, #112]	; 0x70
 8002ed0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ed2:	4413      	add	r3, r2
 8002ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eda:	2200      	movs	r2, #0
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ede:	637a      	str	r2, [r7, #52]	; 0x34
 8002ee0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ee4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ee8:	f7fd f98c 	bl	8000204 <__aeabi_uldivmod>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ef6:	e05b      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	2200      	movs	r2, #0
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	f04f 0000 	mov.w	r0, #0
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	0159      	lsls	r1, r3, #5
 8002f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f26:	0150      	lsls	r0, r2, #5
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f50:	eb63 050b 	sbc.w	r5, r3, fp
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	00eb      	lsls	r3, r5, #3
 8002f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f62:	00e2      	lsls	r2, r4, #3
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	18e3      	adds	r3, r4, r3
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	464b      	mov	r3, r9
 8002f70:	eb45 0303 	adc.w	r3, r5, r3
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f82:	4629      	mov	r1, r5
 8002f84:	028b      	lsls	r3, r1, #10
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	028a      	lsls	r2, r1, #10
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	61fa      	str	r2, [r7, #28]
 8002f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa2:	f7fd f92f 	bl	8000204 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4613      	mov	r3, r2
 8002fac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0f1b      	lsrs	r3, r3, #28
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002fbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002fce:	e003      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3798      	adds	r7, #152	; 0x98
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	00d59f80 	.word	0x00d59f80

08002ff4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e28d      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8083 	beq.w	800311a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003014:	4b94      	ldr	r3, [pc, #592]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b04      	cmp	r3, #4
 800301e:	d019      	beq.n	8003054 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003020:	4b91      	ldr	r3, [pc, #580]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003028:	2b08      	cmp	r3, #8
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800302c:	4b8e      	ldr	r3, [pc, #568]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003038:	d00c      	beq.n	8003054 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303a:	4b8b      	ldr	r3, [pc, #556]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d112      	bne.n	800306c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003052:	d10b      	bne.n	800306c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	4b84      	ldr	r3, [pc, #528]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d05b      	beq.n	8003118 <HAL_RCC_OscConfig+0x124>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d157      	bne.n	8003118 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e25a      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x90>
 8003076:	4b7c      	ldr	r3, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7b      	ldr	r2, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xcc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0xb4>
 800308e:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b73      	ldr	r3, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a72      	ldr	r2, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xcc>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b6c      	ldr	r3, [pc, #432]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6b      	ldr	r2, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fd fbfc 	bl	80008c4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fd fbf8 	bl	80008c4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e21f      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xdc>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fbe8 	bl	80008c4 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fd fbe4 	bl	80008c4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e20b      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x104>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d06f      	beq.n	8003206 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003132:	4b4d      	ldr	r3, [pc, #308]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800313a:	2b08      	cmp	r3, #8
 800313c:	d105      	bne.n	800314a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b44      	ldr	r3, [pc, #272]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x186>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1d3      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3b      	ldr	r3, [pc, #236]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x278>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fd fb91 	bl	80008c4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fd fb8d 	bl	80008c4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1b4      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4925      	ldr	r1, [pc, #148]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x278>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fb70 	bl	80008c4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fd fb6c 	bl	80008c4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e193      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_RCC_OscConfig+0x27c>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fd fb50 	bl	80008c4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7fd fb4c 	bl	80008c4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e173      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_OscConfig+0x274>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x234>
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_OscConfig+0x27c>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fd fb39 	bl	80008c4 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00e      	b.n	8003274 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7fd fb35 	bl	80008c4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d907      	bls.n	8003274 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e15c      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b8a      	ldr	r3, [pc, #552]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ea      	bne.n	8003256 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8097 	beq.w	80033bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b83      	ldr	r3, [pc, #524]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a7e      	ldr	r2, [pc, #504]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b7c      	ldr	r3, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <HAL_RCC_OscConfig+0x4b0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b76      	ldr	r3, [pc, #472]	; (80034a4 <HAL_RCC_OscConfig+0x4b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a75      	ldr	r2, [pc, #468]	; (80034a4 <HAL_RCC_OscConfig+0x4b0>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fd faf5 	bl	80008c4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fd faf1 	bl	80008c4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e118      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b6c      	ldr	r3, [pc, #432]	; (80034a4 <HAL_RCC_OscConfig+0x4b0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x31e>
 8003304:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e01c      	b.n	800334c <HAL_RCC_OscConfig+0x358>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x340>
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a60      	ldr	r2, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	4a5d      	ldr	r2, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	; 0x70
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x358>
 8003334:	4b5a      	ldr	r3, [pc, #360]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a59      	ldr	r2, [pc, #356]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a56      	ldr	r2, [pc, #344]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fd fab6 	bl	80008c4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fd fab2 	bl	80008c4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0d7      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ee      	beq.n	800335c <HAL_RCC_OscConfig+0x368>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fd faa0 	bl	80008c4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fd fa9c 	bl	80008c4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0c1      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80ad 	beq.w	8003520 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c6:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d060      	beq.n	8003494 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d145      	bne.n	8003466 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_RCC_OscConfig+0x4b4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fd fa70 	bl	80008c4 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fd fa6c 	bl	80008c4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e093      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	071b      	lsls	r3, r3, #28
 8003432:	491b      	ldr	r1, [pc, #108]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x4b4>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fa41 	bl	80008c4 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd fa3d 	bl	80008c4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e064      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x452>
 8003464:	e05c      	b.n	8003520 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCC_OscConfig+0x4b4>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fd fa2a 	bl	80008c4 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fd fa26 	bl	80008c4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04d      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x480>
 8003492:	e045      	b.n	8003520 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d107      	bne.n	80034ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e040      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40007000 	.word	0x40007000
 80034a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ac:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_RCC_OscConfig+0x538>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d030      	beq.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d129      	bne.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d122      	bne.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034dc:	4013      	ands	r3, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d119      	bne.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	3b01      	subs	r3, #1
 80034f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10f      	bne.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003530:	b084      	sub	sp, #16
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	f107 001c 	add.w	r0, r7, #28
 800353e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	2b01      	cmp	r3, #1
 8003546:	d122      	bne.n	800358e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800355c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d105      	bne.n	8003582 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 fbe8 	bl	8004d58 <USB_CoreReset>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	e01a      	b.n	80035c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f001 fbdc 	bl	8004d58 <USB_CoreReset>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
 80035b6:	e005      	b.n	80035c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10b      	bne.n	80035e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f043 0206 	orr.w	r2, r3, #6
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ee:	b004      	add	sp, #16
 80035f0:	4770      	bx	lr
	...

080035f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d165      	bne.n	80036d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a41      	ldr	r2, [pc, #260]	; (8003710 <USB_SetTurnaroundTime+0x11c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d906      	bls.n	800361e <USB_SetTurnaroundTime+0x2a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a40      	ldr	r2, [pc, #256]	; (8003714 <USB_SetTurnaroundTime+0x120>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d202      	bcs.n	800361e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003618:	230f      	movs	r3, #15
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e062      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a3c      	ldr	r2, [pc, #240]	; (8003714 <USB_SetTurnaroundTime+0x120>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d306      	bcc.n	8003634 <USB_SetTurnaroundTime+0x40>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a3b      	ldr	r2, [pc, #236]	; (8003718 <USB_SetTurnaroundTime+0x124>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d202      	bcs.n	8003634 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800362e:	230e      	movs	r3, #14
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e057      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <USB_SetTurnaroundTime+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d306      	bcc.n	800364a <USB_SetTurnaroundTime+0x56>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a37      	ldr	r2, [pc, #220]	; (800371c <USB_SetTurnaroundTime+0x128>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d202      	bcs.n	800364a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003644:	230d      	movs	r3, #13
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e04c      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a33      	ldr	r2, [pc, #204]	; (800371c <USB_SetTurnaroundTime+0x128>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d306      	bcc.n	8003660 <USB_SetTurnaroundTime+0x6c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a32      	ldr	r2, [pc, #200]	; (8003720 <USB_SetTurnaroundTime+0x12c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800365a:	230c      	movs	r3, #12
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e041      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <USB_SetTurnaroundTime+0x12c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d906      	bls.n	8003676 <USB_SetTurnaroundTime+0x82>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <USB_SetTurnaroundTime+0x130>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d802      	bhi.n	8003676 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003670:	230b      	movs	r3, #11
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e036      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4a2a      	ldr	r2, [pc, #168]	; (8003724 <USB_SetTurnaroundTime+0x130>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d906      	bls.n	800368c <USB_SetTurnaroundTime+0x98>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4a29      	ldr	r2, [pc, #164]	; (8003728 <USB_SetTurnaroundTime+0x134>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d802      	bhi.n	800368c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003686:	230a      	movs	r3, #10
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e02b      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a26      	ldr	r2, [pc, #152]	; (8003728 <USB_SetTurnaroundTime+0x134>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d906      	bls.n	80036a2 <USB_SetTurnaroundTime+0xae>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a25      	ldr	r2, [pc, #148]	; (800372c <USB_SetTurnaroundTime+0x138>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d202      	bcs.n	80036a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800369c:	2309      	movs	r3, #9
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e020      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a21      	ldr	r2, [pc, #132]	; (800372c <USB_SetTurnaroundTime+0x138>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d306      	bcc.n	80036b8 <USB_SetTurnaroundTime+0xc4>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <USB_SetTurnaroundTime+0x13c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d802      	bhi.n	80036b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036b2:	2308      	movs	r3, #8
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e015      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <USB_SetTurnaroundTime+0x13c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d906      	bls.n	80036ce <USB_SetTurnaroundTime+0xda>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <USB_SetTurnaroundTime+0x140>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d202      	bcs.n	80036ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036c8:	2307      	movs	r3, #7
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e00a      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036ce:	2306      	movs	r3, #6
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e007      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80036da:	2309      	movs	r3, #9
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e001      	b.n	80036e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80036e0:	2309      	movs	r3, #9
 80036e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	029b      	lsls	r3, r3, #10
 80036f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	00d8acbf 	.word	0x00d8acbf
 8003714:	00e4e1c0 	.word	0x00e4e1c0
 8003718:	00f42400 	.word	0x00f42400
 800371c:	01067380 	.word	0x01067380
 8003720:	011a499f 	.word	0x011a499f
 8003724:	01312cff 	.word	0x01312cff
 8003728:	014ca43f 	.word	0x014ca43f
 800372c:	016e3600 	.word	0x016e3600
 8003730:	01a6ab1f 	.word	0x01a6ab1f
 8003734:	01e84800 	.word	0x01e84800

08003738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d115      	bne.n	80037ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7fd f896 	bl	80008dc <HAL_Delay>
      ms++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 fa3f 	bl	8004c3a <USB_GetMode>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d01e      	beq.n	8003800 <USB_SetCurrentMode+0x84>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b31      	cmp	r3, #49	; 0x31
 80037c6:	d9f0      	bls.n	80037aa <USB_SetCurrentMode+0x2e>
 80037c8:	e01a      	b.n	8003800 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d115      	bne.n	80037fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037dc:	2001      	movs	r0, #1
 80037de:	f7fd f87d 	bl	80008dc <HAL_Delay>
      ms++;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 fa26 	bl	8004c3a <USB_GetMode>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <USB_SetCurrentMode+0x84>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b31      	cmp	r3, #49	; 0x31
 80037f8:	d9f0      	bls.n	80037dc <USB_SetCurrentMode+0x60>
 80037fa:	e001      	b.n	8003800 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e005      	b.n	800380c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b32      	cmp	r3, #50	; 0x32
 8003804:	d101      	bne.n	800380a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003814:	b084      	sub	sp, #16
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	e009      	b.n	8003848 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	3340      	adds	r3, #64	; 0x40
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	2200      	movs	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3301      	adds	r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0e      	cmp	r3, #14
 800384c:	d9f2      	bls.n	8003834 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11c      	bne.n	800388e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e005      	b.n	800389a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038a0:	461a      	mov	r2, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ac:	4619      	mov	r1, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b4:	461a      	mov	r2, r3
 80038b6:	680b      	ldr	r3, [r1, #0]
 80038b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10c      	bne.n	80038da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038c6:	2100      	movs	r1, #0
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f965 	bl	8003b98 <USB_SetDevSpeed>
 80038ce:	e008      	b.n	80038e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038d0:	2101      	movs	r1, #1
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f960 	bl	8003b98 <USB_SetDevSpeed>
 80038d8:	e003      	b.n	80038e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038da:	2103      	movs	r1, #3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f95b 	bl	8003b98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038e2:	2110      	movs	r1, #16
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8f3 	bl	8003ad0 <USB_FlushTxFifo>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f91f 	bl	8003b38 <USB_FlushRxFifo>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	461a      	mov	r2, r3
 800390c:	2300      	movs	r3, #0
 800390e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003928:	2300      	movs	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e043      	b.n	80039b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003944:	d118      	bne.n	8003978 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	461a      	mov	r2, r3
 800395a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e013      	b.n	800398a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396e:	461a      	mov	r2, r3
 8003970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e008      	b.n	800398a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3301      	adds	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b7      	bcc.n	800392e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e043      	b.n	8003a4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039da:	d118      	bne.n	8003a0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e013      	b.n	8003a20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e008      	b.n	8003a20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3b7      	bcc.n	80039c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f043 0210 	orr.w	r2, r3, #16
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <USB_DevInit+0x2b8>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f043 0208 	orr.w	r2, r3, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac8:	b004      	add	sp, #16
 8003aca:	4770      	bx	lr
 8003acc:	803c3800 	.word	0x803c3800

08003ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <USB_FlushTxFifo+0x64>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e01b      	b.n	8003b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	daf2      	bge.n	8003ade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	f043 0220 	orr.w	r2, r3, #32
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <USB_FlushTxFifo+0x64>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e006      	b.n	8003b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d0f0      	beq.n	8003b08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	00030d40 	.word	0x00030d40

08003b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <USB_FlushRxFifo+0x5c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e018      	b.n	8003b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	daf2      	bge.n	8003b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2210      	movs	r2, #16
 8003b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <USB_FlushRxFifo+0x5c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e006      	b.n	8003b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d0f0      	beq.n	8003b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	00030d40 	.word	0x00030d40

08003b98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0306 	and.w	r3, r3, #6
 8003be2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
 8003bee:	e00a      	b.n	8003c06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d002      	beq.n	8003bfc <USB_GetDevSpeed+0x32>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d102      	bne.n	8003c02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	75fb      	strb	r3, [r7, #23]
 8003c00:	e001      	b.n	8003c06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c02:	230f      	movs	r3, #15
 8003c04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d13a      	bne.n	8003ca6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d155      	bne.n	8003d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	059b      	lsls	r3, r3, #22
 8003c8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e036      	b.n	8003d14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d161      	bne.n	8003e04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d56:	d11f      	bne.n	8003d98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db8:	4013      	ands	r3, r2
 8003dba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	0159      	lsls	r1, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <USB_DeactivateEndpoint+0x1b0>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
 8003e02:	e060      	b.n	8003ec6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e1a:	d11f      	bne.n	8003e5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	0151      	lsls	r1, r2, #5
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	440a      	add	r2, r1
 8003e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	43db      	mvns	r3, r3
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	0159      	lsls	r1, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <USB_DeactivateEndpoint+0x1b4>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	ec337800 	.word	0xec337800
 8003ed8:	eff37800 	.word	0xeff37800

08003edc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 815c 	bne.w	80041b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d132      	bne.n	8003f6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f64:	0cdb      	lsrs	r3, r3, #19
 8003f66:	04db      	lsls	r3, r3, #19
 8003f68:	6113      	str	r3, [r2, #16]
 8003f6a:	e074      	b.n	8004056 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f86:	0cdb      	lsrs	r3, r3, #19
 8003f88:	04db      	lsls	r3, r3, #19
 8003f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003faa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6999      	ldr	r1, [r3, #24]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	440b      	add	r3, r1
 8003fc8:	1e59      	subs	r1, r3, #1
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003fd4:	4b9d      	ldr	r3, [pc, #628]	; (800424c <USB_EPStartXfer+0x370>)
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	69b9      	ldr	r1, [r7, #24]
 8003fda:	0148      	lsls	r0, r1, #5
 8003fdc:	69f9      	ldr	r1, [r7, #28]
 8003fde:	4401      	add	r1, r0
 8003fe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffe:	69b9      	ldr	r1, [r7, #24]
 8004000:	0148      	lsls	r0, r1, #5
 8004002:	69f9      	ldr	r1, [r7, #28]
 8004004:	4401      	add	r1, r0
 8004006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	791b      	ldrb	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d11f      	bne.n	8004056 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	440a      	add	r2, r1
 800402c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	0151      	lsls	r1, r2, #5
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	440a      	add	r2, r1
 800404c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d14b      	bne.n	80040f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	791b      	ldrb	r3, [r3, #4]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d128      	bne.n	80040d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e00f      	b.n	80040d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	0151      	lsls	r1, r2, #5
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	440a      	add	r2, r1
 80040c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e133      	b.n	800435c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d015      	beq.n	8004148 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 811b 	beq.w	800435c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	2101      	movs	r1, #1
 8004138:	fa01 f303 	lsl.w	r3, r1, r3
 800413c:	69f9      	ldr	r1, [r7, #28]
 800413e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004142:	4313      	orrs	r3, r2
 8004144:	634b      	str	r3, [r1, #52]	; 0x34
 8004146:	e109      	b.n	800435c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d110      	bne.n	800417a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e00f      	b.n	800419a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6919      	ldr	r1, [r3, #16]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	b298      	uxth	r0, r3
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fade 	bl	8004770 <USB_WritePacket>
 80041b4:	e0d2      	b.n	800435c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d0:	0cdb      	lsrs	r3, r3, #19
 80041d2:	04db      	lsls	r3, r3, #19
 80041d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d126      	bne.n	8004250 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004218:	69b9      	ldr	r1, [r7, #24]
 800421a:	0148      	lsls	r0, r1, #5
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	4401      	add	r1, r0
 8004220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004246:	6113      	str	r3, [r2, #16]
 8004248:	e03a      	b.n	80042c0 <USB_EPStartXfer+0x3e4>
 800424a:	bf00      	nop
 800424c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4413      	add	r3, r2
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	8afa      	ldrh	r2, [r7, #22]
 800426c:	fb03 f202 	mul.w	r2, r3, r2
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	8afb      	ldrh	r3, [r7, #22]
 8004284:	04d9      	lsls	r1, r3, #19
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <USB_EPStartXfer+0x48c>)
 8004288:	400b      	ands	r3, r1
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	0148      	lsls	r0, r1, #5
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	4401      	add	r1, r0
 8004292:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004296:	4313      	orrs	r3, r2
 8004298:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b0:	69b9      	ldr	r1, [r7, #24]
 80042b2:	0148      	lsls	r0, r1, #5
 80042b4:	69f9      	ldr	r1, [r7, #28]
 80042b6:	4401      	add	r1, r0
 80042b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042bc:	4313      	orrs	r3, r2
 80042be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d10d      	bne.n	80042e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	6919      	ldr	r1, [r3, #16]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	460a      	mov	r2, r1
 80042e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	791b      	ldrb	r3, [r3, #4]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d128      	bne.n	800433c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d110      	bne.n	800431c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00f      	b.n	800433c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	440a      	add	r2, r1
 8004332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800435a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	1ff80000 	.word	0x1ff80000

0800436c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	785b      	ldrb	r3, [r3, #1]
 8004388:	2b01      	cmp	r3, #1
 800438a:	f040 80ce 	bne.w	800452a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d132      	bne.n	80043fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	0151      	lsls	r1, r2, #5
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	440a      	add	r2, r1
 80043f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f4:	0cdb      	lsrs	r3, r3, #19
 80043f6:	04db      	lsls	r3, r3, #19
 80043f8:	6113      	str	r3, [r2, #16]
 80043fa:	e04e      	b.n	800449a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	0cdb      	lsrs	r3, r3, #19
 8004418:	04db      	lsls	r3, r3, #19
 800441a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800443a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800443e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d903      	bls.n	8004454 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	0148      	lsls	r0, r1, #5
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	4401      	add	r1, r0
 8004492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004496:	4313      	orrs	r3, r2
 8004498:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d11e      	bne.n	80044de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e097      	b.n	800460e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8083 	beq.w	800460e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	2101      	movs	r1, #1
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004524:	4313      	orrs	r3, r2
 8004526:	634b      	str	r3, [r1, #52]	; 0x34
 8004528:	e071      	b.n	800460e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004544:	0cdb      	lsrs	r3, r3, #19
 8004546:	04db      	lsls	r3, r3, #19
 8004548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800456c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045bc:	6939      	ldr	r1, [r7, #16]
 80045be:	0148      	lsls	r0, r1, #5
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	4401      	add	r1, r0
 80045c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045c8:	4313      	orrs	r3, r2
 80045ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10d      	bne.n	80045ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6919      	ldr	r1, [r3, #16]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	460a      	mov	r2, r1
 80045ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800460c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d14a      	bne.n	80046d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004652:	f040 8086 	bne.w	8004762 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004678:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800469c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d902      	bls.n	80046b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
          break;
 80046b2:	e056      	b.n	8004762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046cc:	d0e7      	beq.n	800469e <USB_EPStopXfer+0x82>
 80046ce:	e048      	b.n	8004762 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e8:	d13b      	bne.n	8004762 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800470c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004730:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f242 7210 	movw	r2, #10000	; 0x2710
 800473e:	4293      	cmp	r3, r2
 8004740:	d902      	bls.n	8004748 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	75fb      	strb	r3, [r7, #23]
          break;
 8004746:	e00c      	b.n	8004762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d0e7      	beq.n	8004732 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	460b      	mov	r3, r1
 8004780:	71fb      	strb	r3, [r7, #7]
 8004782:	4613      	mov	r3, r2
 8004784:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800478e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d123      	bne.n	80047de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004796:	88bb      	ldrh	r3, [r7, #4]
 8004798:	3303      	adds	r3, #3
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e018      	b.n	80047d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	031a      	lsls	r2, r3, #12
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	461a      	mov	r2, r3
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	3301      	adds	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	3301      	adds	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3e2      	bcc.n	80047a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3724      	adds	r7, #36	; 0x24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b08b      	sub	sp, #44	; 0x2c
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	b29b      	uxth	r3, r3
 8004808:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	e014      	b.n	8004842 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	601a      	str	r2, [r3, #0]
    pDest++;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	3301      	adds	r3, #1
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	3301      	adds	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	3301      	adds	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	3301      	adds	r3, #1
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	3301      	adds	r3, #1
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	6a3a      	ldr	r2, [r7, #32]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	429a      	cmp	r2, r3
 8004848:	d3e6      	bcc.n	8004818 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800484a:	8bfb      	ldrh	r3, [r7, #30]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01e      	beq.n	800488e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	461a      	mov	r2, r3
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	b2da      	uxtb	r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	701a      	strb	r2, [r3, #0]
      i++;
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	3301      	adds	r3, #1
 800487a:	623b      	str	r3, [r7, #32]
      pDest++;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004882:	8bfb      	ldrh	r3, [r7, #30]
 8004884:	3b01      	subs	r3, #1
 8004886:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004888:	8bfb      	ldrh	r3, [r7, #30]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1ea      	bne.n	8004864 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004890:	4618      	mov	r0, r3
 8004892:	372c      	adds	r7, #44	; 0x2c
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d12c      	bne.n	8004912 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db12      	blt.n	80048f0 <USB_EPSetStall+0x54>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00f      	beq.n	80048f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e02b      	b.n	800496a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db12      	blt.n	800494a <USB_EPSetStall+0xae>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00f      	beq.n	800494a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004948:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004968:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d128      	bne.n	80049e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	791b      	ldrb	r3, [r3, #4]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d003      	beq.n	80049c4 <USB_EPClearStall+0x4c>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	791b      	ldrb	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d138      	bne.n	8004a36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e027      	b.n	8004a36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	791b      	ldrb	r3, [r3, #4]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d003      	beq.n	8004a16 <USB_EPClearStall+0x9e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d10f      	bne.n	8004a36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abe:	f023 0302 	bic.w	r3, r3, #2
 8004ac2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aec:	f023 0303 	bic.w	r3, r3, #3
 8004af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	0c1b      	lsrs	r3, r3, #16
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	b29b      	uxth	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b087      	sub	sp, #28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f003 0301 	and.w	r3, r3, #1
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c74:	f023 0307 	bic.w	r3, r3, #7
 8004c78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	333c      	adds	r3, #60	; 0x3c
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <USB_EP0_OutStart+0xb8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d90a      	bls.n	8004cd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd0:	d101      	bne.n	8004cd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e037      	b.n	8004d46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	461a      	mov	r2, r3
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d04:	f043 0318 	orr.w	r3, r3, #24
 8004d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d1e:	7afb      	ldrb	r3, [r7, #11]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10f      	bne.n	8004d44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	4f54300a 	.word	0x4f54300a

08004d58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <USB_CoreReset+0x64>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e01b      	b.n	8004dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	daf2      	bge.n	8004d64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <USB_CoreReset+0x64>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e006      	b.n	8004dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d0f0      	beq.n	8004d8e <USB_CoreReset+0x36>

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	00030d40 	.word	0x00030d40

08004dc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004dcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004dd0:	f002 fcc8 	bl	8007764 <USBD_static_malloc>
 8004dd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	32b0      	adds	r2, #176	; 0xb0
 8004de6:	2100      	movs	r1, #0
 8004de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004dec:	2302      	movs	r3, #2
 8004dee:	e0d4      	b.n	8004f9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004df0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004df4:	2100      	movs	r1, #0
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f002 fd1c 	bl	8007834 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	32b0      	adds	r2, #176	; 0xb0
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	32b0      	adds	r2, #176	; 0xb0
 8004e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7c1b      	ldrb	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d138      	bne.n	8004e9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e28:	4b5e      	ldr	r3, [pc, #376]	; (8004fa4 <USBD_CDC_Init+0x1e4>)
 8004e2a:	7819      	ldrb	r1, [r3, #0]
 8004e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e30:	2202      	movs	r2, #2
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f002 fb25 	bl	8007482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e38:	4b5a      	ldr	r3, [pc, #360]	; (8004fa4 <USBD_CDC_Init+0x1e4>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2201      	movs	r2, #1
 8004e50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e52:	4b55      	ldr	r3, [pc, #340]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004e54:	7819      	ldrb	r1, [r3, #0]
 8004e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f002 fb10 	bl	8007482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e62:	4b51      	ldr	r3, [pc, #324]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e7e:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <USBD_CDC_Init+0x1ec>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	f003 020f 	and.w	r2, r3, #15
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3326      	adds	r3, #38	; 0x26
 8004e94:	2210      	movs	r2, #16
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	e035      	b.n	8004f06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e9a:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <USBD_CDC_Init+0x1e4>)
 8004e9c:	7819      	ldrb	r1, [r3, #0]
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f002 faed 	bl	8007482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ea8:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <USBD_CDC_Init+0x1e4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3324      	adds	r3, #36	; 0x24
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004ec4:	7819      	ldrb	r1, [r3, #0]
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	2202      	movs	r2, #2
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f002 fad9 	bl	8007482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 020f 	and.w	r2, r3, #15
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ee8:	2201      	movs	r2, #1
 8004eea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004eec:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <USBD_CDC_Init+0x1ec>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3326      	adds	r3, #38	; 0x26
 8004f02:	2210      	movs	r2, #16
 8004f04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <USBD_CDC_Init+0x1ec>)
 8004f08:	7819      	ldrb	r1, [r3, #0]
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f002 fab7 	bl	8007482 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <USBD_CDC_Init+0x1ec>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	33b0      	adds	r3, #176	; 0xb0
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f64:	2302      	movs	r3, #2
 8004f66:	e018      	b.n	8004f9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7c1b      	ldrb	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004f72:	7819      	ldrb	r1, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f002 fb6e 	bl	8007660 <USBD_LL_PrepareReceive>
 8004f84:	e008      	b.n	8004f98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <USBD_CDC_Init+0x1e8>)
 8004f88:	7819      	ldrb	r1, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f90:	2340      	movs	r3, #64	; 0x40
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f002 fb64 	bl	8007660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000093 	.word	0x20000093
 8004fa8:	20000094 	.word	0x20000094
 8004fac:	20000095 	.word	0x20000095

08004fb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004fbc:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <USBD_CDC_DeInit+0xf8>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f002 fa83 	bl	80074ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004fc8:	4b37      	ldr	r3, [pc, #220]	; (80050a8 <USBD_CDC_DeInit+0xf8>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	f003 020f 	and.w	r2, r3, #15
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	3324      	adds	r3, #36	; 0x24
 8004fde:	2200      	movs	r2, #0
 8004fe0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004fe2:	4b32      	ldr	r3, [pc, #200]	; (80050ac <USBD_CDC_DeInit+0xfc>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 fa70 	bl	80074ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <USBD_CDC_DeInit+0xfc>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800500a:	4b29      	ldr	r3, [pc, #164]	; (80050b0 <USBD_CDC_DeInit+0x100>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f002 fa5c 	bl	80074ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <USBD_CDC_DeInit+0x100>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f003 020f 	and.w	r2, r3, #15
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3324      	adds	r3, #36	; 0x24
 800502c:	2200      	movs	r2, #0
 800502e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <USBD_CDC_DeInit+0x100>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 020f 	and.w	r2, r3, #15
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3326      	adds	r3, #38	; 0x26
 8005046:	2200      	movs	r2, #0
 8005048:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	32b0      	adds	r2, #176	; 0xb0
 8005054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01f      	beq.n	800509c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	33b0      	adds	r3, #176	; 0xb0
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	32b0      	adds	r2, #176	; 0xb0
 800507a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507e:	4618      	mov	r0, r3
 8005080:	f002 fb7e 	bl	8007780 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	32b0      	adds	r2, #176	; 0xb0
 800508e:	2100      	movs	r1, #0
 8005090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000093 	.word	0x20000093
 80050ac:	20000094 	.word	0x20000094
 80050b0:	20000095 	.word	0x20000095

080050b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	32b0      	adds	r2, #176	; 0xb0
 80050c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0bf      	b.n	8005264 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d050      	beq.n	8005192 <USBD_CDC_Setup+0xde>
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	f040 80af 	bne.w	8005254 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	88db      	ldrh	r3, [r3, #6]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d03a      	beq.n	8005174 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b25b      	sxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	da1b      	bge.n	8005140 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	33b0      	adds	r3, #176	; 0xb0
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800511e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	88d2      	ldrh	r2, [r2, #6]
 8005124:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	88db      	ldrh	r3, [r3, #6]
 800512a:	2b07      	cmp	r3, #7
 800512c:	bf28      	it	cs
 800512e:	2307      	movcs	r3, #7
 8005130:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	89fa      	ldrh	r2, [r7, #14]
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f001 fd6d 	bl	8006c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800513e:	e090      	b.n	8005262 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	785a      	ldrb	r2, [r3, #1]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	88db      	ldrh	r3, [r3, #6]
 800514e:	2b3f      	cmp	r3, #63	; 0x3f
 8005150:	d803      	bhi.n	800515a <USBD_CDC_Setup+0xa6>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	88db      	ldrh	r3, [r3, #6]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	e000      	b.n	800515c <USBD_CDC_Setup+0xa8>
 800515a:	2240      	movs	r2, #64	; 0x40
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800516a:	461a      	mov	r2, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fd7f 	bl	8006c70 <USBD_CtlPrepareRx>
      break;
 8005172:	e076      	b.n	8005262 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	33b0      	adds	r3, #176	; 0xb0
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	7850      	ldrb	r0, [r2, #1]
 800518a:	2200      	movs	r2, #0
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4798      	blx	r3
      break;
 8005190:	e067      	b.n	8005262 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	2b0b      	cmp	r3, #11
 8005198:	d851      	bhi.n	800523e <USBD_CDC_Setup+0x18a>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <USBD_CDC_Setup+0xec>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	0800524d 	.word	0x0800524d
 80051a8:	0800523f 	.word	0x0800523f
 80051ac:	0800523f 	.word	0x0800523f
 80051b0:	0800523f 	.word	0x0800523f
 80051b4:	0800523f 	.word	0x0800523f
 80051b8:	0800523f 	.word	0x0800523f
 80051bc:	0800523f 	.word	0x0800523f
 80051c0:	0800523f 	.word	0x0800523f
 80051c4:	0800523f 	.word	0x0800523f
 80051c8:	080051fb 	.word	0x080051fb
 80051cc:	08005225 	.word	0x08005225
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d107      	bne.n	80051ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80051dc:	f107 030a 	add.w	r3, r7, #10
 80051e0:	2202      	movs	r2, #2
 80051e2:	4619      	mov	r1, r3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fd17 	bl	8006c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051ea:	e032      	b.n	8005252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fca1 	bl	8006b36 <USBD_CtlError>
            ret = USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	75fb      	strb	r3, [r7, #23]
          break;
 80051f8:	e02b      	b.n	8005252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d107      	bne.n	8005216 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005206:	f107 030d 	add.w	r3, r7, #13
 800520a:	2201      	movs	r2, #1
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f001 fd02 	bl	8006c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005214:	e01d      	b.n	8005252 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 fc8c 	bl	8006b36 <USBD_CtlError>
            ret = USBD_FAIL;
 800521e:	2303      	movs	r3, #3
 8005220:	75fb      	strb	r3, [r7, #23]
          break;
 8005222:	e016      	b.n	8005252 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b03      	cmp	r3, #3
 800522e:	d00f      	beq.n	8005250 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f001 fc7f 	bl	8006b36 <USBD_CtlError>
            ret = USBD_FAIL;
 8005238:	2303      	movs	r3, #3
 800523a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800523c:	e008      	b.n	8005250 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 fc78 	bl	8006b36 <USBD_CtlError>
          ret = USBD_FAIL;
 8005246:	2303      	movs	r3, #3
 8005248:	75fb      	strb	r3, [r7, #23]
          break;
 800524a:	e002      	b.n	8005252 <USBD_CDC_Setup+0x19e>
          break;
 800524c:	bf00      	nop
 800524e:	e008      	b.n	8005262 <USBD_CDC_Setup+0x1ae>
          break;
 8005250:	bf00      	nop
      }
      break;
 8005252:	e006      	b.n	8005262 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 fc6d 	bl	8006b36 <USBD_CtlError>
      ret = USBD_FAIL;
 800525c:	2303      	movs	r3, #3
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	bf00      	nop
  }

  return (uint8_t)ret;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800527e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	32b0      	adds	r2, #176	; 0xb0
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005292:	2303      	movs	r3, #3
 8005294:	e065      	b.n	8005362 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	32b0      	adds	r2, #176	; 0xb0
 80052a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052a6:	78fb      	ldrb	r3, [r7, #3]
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3318      	adds	r3, #24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02f      	beq.n	8005320 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	f003 020f 	and.w	r2, r3, #15
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	3318      	adds	r3, #24
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	f003 010f 	and.w	r1, r3, #15
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	460b      	mov	r3, r1
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4403      	add	r3, r0
 80052e8:	3348      	adds	r3, #72	; 0x48
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d112      	bne.n	8005320 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 020f 	and.w	r2, r3, #15
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3318      	adds	r3, #24
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005312:	78f9      	ldrb	r1, [r7, #3]
 8005314:	2300      	movs	r3, #0
 8005316:	2200      	movs	r2, #0
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f002 f980 	bl	800761e <USBD_LL_Transmit>
 800531e:	e01f      	b.n	8005360 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	33b0      	adds	r3, #176	; 0xb0
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d010      	beq.n	8005360 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	33b0      	adds	r3, #176	; 0xb0
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	32b0      	adds	r2, #176	; 0xb0
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	32b0      	adds	r2, #176	; 0xb0
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	e01a      	b.n	80053d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f002 f97e 	bl	80076a2 <USBD_LL_GetRxDataSize>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	33b0      	adds	r3, #176	; 0xb0
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80053cc:	4611      	mov	r1, r2
 80053ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	32b0      	adds	r2, #176	; 0xb0
 80053ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e025      	b.n	8005448 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	33b0      	adds	r3, #176	; 0xb0
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <USBD_CDC_EP0_RxReady+0x6c>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005416:	2bff      	cmp	r3, #255	; 0xff
 8005418:	d015      	beq.n	8005446 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	33b0      	adds	r3, #176	; 0xb0
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005432:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800543a:	b292      	uxth	r2, r2
 800543c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005458:	2182      	movs	r1, #130	; 0x82
 800545a:	4818      	ldr	r0, [pc, #96]	; (80054bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800545c:	f000 fd09 	bl	8005e72 <USBD_GetEpDesc>
 8005460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005462:	2101      	movs	r1, #1
 8005464:	4815      	ldr	r0, [pc, #84]	; (80054bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005466:	f000 fd04 	bl	8005e72 <USBD_GetEpDesc>
 800546a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800546c:	2181      	movs	r1, #129	; 0x81
 800546e:	4813      	ldr	r0, [pc, #76]	; (80054bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005470:	f000 fcff 	bl	8005e72 <USBD_GetEpDesc>
 8005474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2210      	movs	r2, #16
 8005480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d006      	beq.n	8005496 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	2200      	movs	r2, #0
 800548c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005490:	711a      	strb	r2, [r3, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a4:	711a      	strb	r2, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2243      	movs	r2, #67	; 0x43
 80054ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000050 	.word	0x20000050

080054c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054c8:	2182      	movs	r1, #130	; 0x82
 80054ca:	4818      	ldr	r0, [pc, #96]	; (800552c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054cc:	f000 fcd1 	bl	8005e72 <USBD_GetEpDesc>
 80054d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054d2:	2101      	movs	r1, #1
 80054d4:	4815      	ldr	r0, [pc, #84]	; (800552c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054d6:	f000 fccc 	bl	8005e72 <USBD_GetEpDesc>
 80054da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054dc:	2181      	movs	r1, #129	; 0x81
 80054de:	4813      	ldr	r0, [pc, #76]	; (800552c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054e0:	f000 fcc7 	bl	8005e72 <USBD_GetEpDesc>
 80054e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2210      	movs	r2, #16
 80054f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d006      	beq.n	8005506 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2200      	movs	r2, #0
 80054fc:	711a      	strb	r2, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f042 0202 	orr.w	r2, r2, #2
 8005504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	711a      	strb	r2, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f042 0202 	orr.w	r2, r2, #2
 8005518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2243      	movs	r2, #67	; 0x43
 800551e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000050 	.word	0x20000050

08005530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005538:	2182      	movs	r1, #130	; 0x82
 800553a:	4818      	ldr	r0, [pc, #96]	; (800559c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800553c:	f000 fc99 	bl	8005e72 <USBD_GetEpDesc>
 8005540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005542:	2101      	movs	r1, #1
 8005544:	4815      	ldr	r0, [pc, #84]	; (800559c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005546:	f000 fc94 	bl	8005e72 <USBD_GetEpDesc>
 800554a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	4813      	ldr	r0, [pc, #76]	; (800559c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005550:	f000 fc8f 	bl	8005e72 <USBD_GetEpDesc>
 8005554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2210      	movs	r2, #16
 8005560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2200      	movs	r2, #0
 800556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005570:	711a      	strb	r2, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005584:	711a      	strb	r2, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2243      	movs	r2, #67	; 0x43
 800558e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005590:	4b02      	ldr	r3, [pc, #8]	; (800559c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000050 	.word	0x20000050

080055a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	220a      	movs	r2, #10
 80055ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e009      	b.n	80055e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	33b0      	adds	r3, #176	; 0xb0
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	32b0      	adds	r2, #176	; 0xb0
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005616:	2303      	movs	r3, #3
 8005618:	e008      	b.n	800562c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	32b0      	adds	r2, #176	; 0xb0
 800564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005658:	2303      	movs	r3, #3
 800565a:	e004      	b.n	8005666 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	32b0      	adds	r2, #176	; 0xb0
 8005686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800568a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32b0      	adds	r2, #176	; 0xb0
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800569e:	2303      	movs	r3, #3
 80056a0:	e018      	b.n	80056d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7c1b      	ldrb	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <USBD_CDC_ReceivePacket+0x68>)
 80056ac:	7819      	ldrb	r1, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 ffd1 	bl	8007660 <USBD_LL_PrepareReceive>
 80056be:	e008      	b.n	80056d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <USBD_CDC_ReceivePacket+0x68>)
 80056c2:	7819      	ldrb	r1, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 ffc7 	bl	8007660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000094 	.word	0x20000094

080056e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e01f      	b.n	8005738 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	79fa      	ldrb	r2, [r7, #7]
 800572a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f001 fe41 	bl	80073b4 <USBD_LL_Init>
 8005732:	4603      	mov	r3, r0
 8005734:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005754:	2303      	movs	r3, #3
 8005756:	e025      	b.n	80057a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	32ae      	adds	r2, #174	; 0xae
 800576a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	32ae      	adds	r2, #174	; 0xae
 800577e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f107 020e 	add.w	r2, r7, #14
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fe49 	bl	800744c <USBD_LL_Start>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	4611      	mov	r1, r2
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	4611      	mov	r1, r2
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005838:	2303      	movs	r3, #3
 800583a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f932 	bl	8006ac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800586c:	461a      	mov	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2b02      	cmp	r3, #2
 8005880:	d01a      	beq.n	80058b8 <USBD_LL_SetupStage+0x72>
 8005882:	2b02      	cmp	r3, #2
 8005884:	d822      	bhi.n	80058cc <USBD_LL_SetupStage+0x86>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <USBD_LL_SetupStage+0x4a>
 800588a:	2b01      	cmp	r3, #1
 800588c:	d00a      	beq.n	80058a4 <USBD_LL_SetupStage+0x5e>
 800588e:	e01d      	b.n	80058cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb5f 	bl	8005f5c <USBD_StdDevReq>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
      break;
 80058a2:	e020      	b.n	80058e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbc7 	bl	8006040 <USBD_StdItfReq>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
      break;
 80058b6:	e016      	b.n	80058e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fc29 	bl	8006118 <USBD_StdEPReq>
 80058c6:	4603      	mov	r3, r0
 80058c8:	73fb      	strb	r3, [r7, #15]
      break;
 80058ca:	e00c      	b.n	80058e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fe16 	bl	800750c <USBD_LL_StallEP>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
      break;
 80058e4:	bf00      	nop
  }

  return ret;
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	460b      	mov	r3, r1
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d16e      	bne.n	80059e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800590e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005916:	2b03      	cmp	r3, #3
 8005918:	f040 8098 	bne.w	8005a4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	429a      	cmp	r2, r3
 8005926:	d913      	bls.n	8005950 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	4293      	cmp	r3, r2
 8005940:	bf28      	it	cs
 8005942:	4613      	movcs	r3, r2
 8005944:	461a      	mov	r2, r3
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f001 f9ae 	bl	8006caa <USBD_CtlContinueRx>
 800594e:	e07d      	b.n	8005a4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2b02      	cmp	r3, #2
 800595c:	d014      	beq.n	8005988 <USBD_LL_DataOutStage+0x98>
 800595e:	2b02      	cmp	r3, #2
 8005960:	d81d      	bhi.n	800599e <USBD_LL_DataOutStage+0xae>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <USBD_LL_DataOutStage+0x7c>
 8005966:	2b01      	cmp	r3, #1
 8005968:	d003      	beq.n	8005972 <USBD_LL_DataOutStage+0x82>
 800596a:	e018      	b.n	800599e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	75bb      	strb	r3, [r7, #22]
            break;
 8005970:	e018      	b.n	80059a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005978:	b2db      	uxtb	r3, r3
 800597a:	4619      	mov	r1, r3
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa5e 	bl	8005e3e <USBD_CoreFindIF>
 8005982:	4603      	mov	r3, r0
 8005984:	75bb      	strb	r3, [r7, #22]
            break;
 8005986:	e00d      	b.n	80059a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800598e:	b2db      	uxtb	r3, r3
 8005990:	4619      	mov	r1, r3
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fa60 	bl	8005e58 <USBD_CoreFindEP>
 8005998:	4603      	mov	r3, r0
 800599a:	75bb      	strb	r3, [r7, #22]
            break;
 800599c:	e002      	b.n	80059a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	75bb      	strb	r3, [r7, #22]
            break;
 80059a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059a4:	7dbb      	ldrb	r3, [r7, #22]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d119      	bne.n	80059de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d113      	bne.n	80059de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059b6:	7dba      	ldrb	r2, [r7, #22]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	32ae      	adds	r2, #174	; 0xae
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80059c6:	7dba      	ldrb	r2, [r7, #22]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80059ce:	7dba      	ldrb	r2, [r7, #22]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	32ae      	adds	r2, #174	; 0xae
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f001 f974 	bl	8006ccc <USBD_CtlSendStatus>
 80059e4:	e032      	b.n	8005a4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fa31 	bl	8005e58 <USBD_CoreFindEP>
 80059f6:	4603      	mov	r3, r0
 80059f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059fa:	7dbb      	ldrb	r3, [r7, #22]
 80059fc:	2bff      	cmp	r3, #255	; 0xff
 80059fe:	d025      	beq.n	8005a4c <USBD_LL_DataOutStage+0x15c>
 8005a00:	7dbb      	ldrb	r3, [r7, #22]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d122      	bne.n	8005a4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d117      	bne.n	8005a42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a12:	7dba      	ldrb	r2, [r7, #22]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	32ae      	adds	r2, #174	; 0xae
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a22:	7dba      	ldrb	r2, [r7, #22]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a2a:	7dba      	ldrb	r2, [r7, #22]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	32ae      	adds	r2, #174	; 0xae
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	7afa      	ldrb	r2, [r7, #11]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	4798      	blx	r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	e000      	b.n	8005a4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a64:	7afb      	ldrb	r3, [r7, #11]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d16f      	bne.n	8005b4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d15a      	bne.n	8005b30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d914      	bls.n	8005ab0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 f8d6 	bl	8006c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f001 fdd9 	bl	8007660 <USBD_LL_PrepareReceive>
 8005aae:	e03f      	b.n	8005b30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d11c      	bne.n	8005af6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d316      	bcc.n	8005af6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d20f      	bcs.n	8005af6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f001 f8b7 	bl	8006c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2200      	movs	r2, #0
 8005aec:	2100      	movs	r1, #0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f001 fdb6 	bl	8007660 <USBD_LL_PrepareReceive>
 8005af4:	e01c      	b.n	8005b30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d10f      	bne.n	8005b22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f001 fcf1 	bl	800750c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f001 f8e1 	bl	8006cf2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03a      	beq.n	8005bb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fe42 	bl	80057c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b48:	e032      	b.n	8005bb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f97f 	bl	8005e58 <USBD_CoreFindEP>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2bff      	cmp	r3, #255	; 0xff
 8005b62:	d025      	beq.n	8005bb0 <USBD_LL_DataInStage+0x15a>
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d122      	bne.n	8005bb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d11c      	bne.n	8005bb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b76:	7dfa      	ldrb	r2, [r7, #23]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	32ae      	adds	r2, #174	; 0xae
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d014      	beq.n	8005bb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b86:	7dfa      	ldrb	r2, [r7, #23]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b8e:	7dfa      	ldrb	r2, [r7, #23]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	32ae      	adds	r2, #174	; 0xae
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	7afa      	ldrb	r2, [r7, #11]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	4798      	blx	r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ba6:	7dbb      	ldrb	r3, [r7, #22]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005bac:	7dbb      	ldrb	r3, [r7, #22]
 8005bae:	e000      	b.n	8005bb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d014      	beq.n	8005c20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6852      	ldr	r2, [r2, #4]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	4611      	mov	r1, r2
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c20:	2340      	movs	r3, #64	; 0x40
 8005c22:	2200      	movs	r2, #0
 8005c24:	2100      	movs	r1, #0
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fc2b 	bl	8007482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2240      	movs	r2, #64	; 0x40
 8005c38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fc1d 	bl	8007482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	621a      	str	r2, [r3, #32]

  return ret;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2204      	movs	r2, #4
 8005c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d106      	bne.n	8005ccc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d110      	bne.n	8005d10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	32ae      	adds	r2, #174	; 0xae
 8005d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e01c      	b.n	8005d76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d115      	bne.n	8005d74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	32ae      	adds	r2, #174	; 0xae
 8005d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	32ae      	adds	r2, #174	; 0xae
 8005d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	32ae      	adds	r2, #174	; 0xae
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e01c      	b.n	8005dda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d115      	bne.n	8005dd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32ae      	adds	r2, #174	; 0xae
 8005db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32ae      	adds	r2, #174	; 0xae
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6852      	ldr	r2, [r2, #4]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	4611      	mov	r1, r2
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e30:	2303      	movs	r3, #3
 8005e32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	885b      	ldrh	r3, [r3, #2]
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d920      	bls.n	8005edc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ea2:	e013      	b.n	8005ecc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ea4:	f107 030a 	add.w	r3, r7, #10
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6978      	ldr	r0, [r7, #20]
 8005eac:	f000 f81b 	bl	8005ee6 <USBD_GetNextDesc>
 8005eb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d108      	bne.n	8005ecc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d008      	beq.n	8005eda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	885b      	ldrh	r3, [r3, #2]
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d8e5      	bhi.n	8005ea4 <USBD_GetEpDesc+0x32>
 8005ed8:	e000      	b.n	8005edc <USBD_GetEpDesc+0x6a>
          break;
 8005eda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005edc:	693b      	ldr	r3, [r7, #16]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	881a      	ldrh	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f12:	68fb      	ldr	r3, [r7, #12]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3301      	adds	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f3e:	8a3b      	ldrh	r3, [r7, #16]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	b21a      	sxth	r2, r3
 8005f44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	b21b      	sxth	r3, r3
 8005f4c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d005      	beq.n	8005f82 <USBD_StdDevReq+0x26>
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d857      	bhi.n	800602a <USBD_StdDevReq+0xce>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00f      	beq.n	8005f9e <USBD_StdDevReq+0x42>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d153      	bne.n	800602a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	32ae      	adds	r2, #174	; 0xae
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e04a      	b.n	8006034 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	2b09      	cmp	r3, #9
 8005fa4:	d83b      	bhi.n	800601e <USBD_StdDevReq+0xc2>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <USBD_StdDevReq+0x50>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	0800601f 	.word	0x0800601f
 8005fb8:	0800600b 	.word	0x0800600b
 8005fbc:	0800601f 	.word	0x0800601f
 8005fc0:	08005fdf 	.word	0x08005fdf
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	0800601f 	.word	0x0800601f
 8005fcc:	08005ff7 	.word	0x08005ff7
 8005fd0:	08005fe9 	.word	0x08005fe9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa3c 	bl	8006454 <USBD_GetDescriptor>
          break;
 8005fdc:	e024      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fbcb 	bl	800677c <USBD_SetAddress>
          break;
 8005fe6:	e01f      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fc0a 	bl	8006804 <USBD_SetConfig>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ff4:	e018      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fcad 	bl	8006958 <USBD_GetConfig>
          break;
 8005ffe:	e013      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fcde 	bl	80069c4 <USBD_GetStatus>
          break;
 8006008:	e00e      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fd0d 	bl	8006a2c <USBD_SetFeature>
          break;
 8006012:	e009      	b.n	8006028 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fd31 	bl	8006a7e <USBD_ClrFeature>
          break;
 800601c:	e004      	b.n	8006028 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fd88 	bl	8006b36 <USBD_CtlError>
          break;
 8006026:	bf00      	nop
      }
      break;
 8006028:	e004      	b.n	8006034 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fd82 	bl	8006b36 <USBD_CtlError>
      break;
 8006032:	bf00      	nop
  }

  return ret;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop

08006040 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d005      	beq.n	8006066 <USBD_StdItfReq+0x26>
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d852      	bhi.n	8006104 <USBD_StdItfReq+0xc4>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <USBD_StdItfReq+0x26>
 8006062:	2b20      	cmp	r3, #32
 8006064:	d14e      	bne.n	8006104 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606c:	b2db      	uxtb	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	2b02      	cmp	r3, #2
 8006072:	d840      	bhi.n	80060f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	889b      	ldrh	r3, [r3, #4]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	d836      	bhi.n	80060ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	889b      	ldrh	r3, [r3, #4]
 8006082:	b2db      	uxtb	r3, r3
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fed9 	bl	8005e3e <USBD_CoreFindIF>
 800608c:	4603      	mov	r3, r0
 800608e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d01d      	beq.n	80060d2 <USBD_StdItfReq+0x92>
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11a      	bne.n	80060d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800609c:	7bba      	ldrb	r2, [r7, #14]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	32ae      	adds	r2, #174	; 0xae
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00f      	beq.n	80060cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060ac:	7bba      	ldrb	r2, [r7, #14]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060b4:	7bba      	ldrb	r2, [r7, #14]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	32ae      	adds	r2, #174	; 0xae
 80060ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060ca:	e004      	b.n	80060d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060d0:	e001      	b.n	80060d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80060d2:	2303      	movs	r3, #3
 80060d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	88db      	ldrh	r3, [r3, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d110      	bne.n	8006100 <USBD_StdItfReq+0xc0>
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10d      	bne.n	8006100 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fdf1 	bl	8006ccc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060ea:	e009      	b.n	8006100 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fd21 	bl	8006b36 <USBD_CtlError>
          break;
 80060f4:	e004      	b.n	8006100 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fd1c 	bl	8006b36 <USBD_CtlError>
          break;
 80060fe:	e000      	b.n	8006102 <USBD_StdItfReq+0xc2>
          break;
 8006100:	bf00      	nop
      }
      break;
 8006102:	e004      	b.n	800610e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fd15 	bl	8006b36 <USBD_CtlError>
      break;
 800610c:	bf00      	nop
  }

  return ret;
 800610e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	889b      	ldrh	r3, [r3, #4]
 800612a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d007      	beq.n	8006148 <USBD_StdEPReq+0x30>
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	f200 817f 	bhi.w	800643c <USBD_StdEPReq+0x324>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d02a      	beq.n	8006198 <USBD_StdEPReq+0x80>
 8006142:	2b20      	cmp	r3, #32
 8006144:	f040 817a 	bne.w	800643c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fe83 	bl	8005e58 <USBD_CoreFindEP>
 8006152:	4603      	mov	r3, r0
 8006154:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006156:	7b7b      	ldrb	r3, [r7, #13]
 8006158:	2bff      	cmp	r3, #255	; 0xff
 800615a:	f000 8174 	beq.w	8006446 <USBD_StdEPReq+0x32e>
 800615e:	7b7b      	ldrb	r3, [r7, #13]
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 8170 	bne.w	8006446 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006166:	7b7a      	ldrb	r2, [r7, #13]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800616e:	7b7a      	ldrb	r2, [r7, #13]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	32ae      	adds	r2, #174	; 0xae
 8006174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8163 	beq.w	8006446 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006180:	7b7a      	ldrb	r2, [r7, #13]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32ae      	adds	r2, #174	; 0xae
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
 8006192:	4603      	mov	r3, r0
 8006194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006196:	e156      	b.n	8006446 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d008      	beq.n	80061b2 <USBD_StdEPReq+0x9a>
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	f300 8145 	bgt.w	8006430 <USBD_StdEPReq+0x318>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 809b 	beq.w	80062e2 <USBD_StdEPReq+0x1ca>
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d03c      	beq.n	800622a <USBD_StdEPReq+0x112>
 80061b0:	e13e      	b.n	8006430 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d002      	beq.n	80061c4 <USBD_StdEPReq+0xac>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d016      	beq.n	80061f0 <USBD_StdEPReq+0xd8>
 80061c2:	e02c      	b.n	800621e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <USBD_StdEPReq+0xce>
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d00a      	beq.n	80061e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f999 	bl	800750c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061da:	2180      	movs	r1, #128	; 0x80
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f995 	bl	800750c <USBD_LL_StallEP>
 80061e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061e4:	e020      	b.n	8006228 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fca4 	bl	8006b36 <USBD_CtlError>
              break;
 80061ee:	e01b      	b.n	8006228 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10e      	bne.n	8006216 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <USBD_StdEPReq+0xfe>
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	2b80      	cmp	r3, #128	; 0x80
 8006202:	d008      	beq.n	8006216 <USBD_StdEPReq+0xfe>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	88db      	ldrh	r3, [r3, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f97b 	bl	800750c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fd58 	bl	8006ccc <USBD_CtlSendStatus>

              break;
 800621c:	e004      	b.n	8006228 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc88 	bl	8006b36 <USBD_CtlError>
              break;
 8006226:	bf00      	nop
          }
          break;
 8006228:	e107      	b.n	800643a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d002      	beq.n	800623c <USBD_StdEPReq+0x124>
 8006236:	2b03      	cmp	r3, #3
 8006238:	d016      	beq.n	8006268 <USBD_StdEPReq+0x150>
 800623a:	e04b      	b.n	80062d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00d      	beq.n	800625e <USBD_StdEPReq+0x146>
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b80      	cmp	r3, #128	; 0x80
 8006246:	d00a      	beq.n	800625e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f95d 	bl	800750c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 f959 	bl	800750c <USBD_LL_StallEP>
 800625a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800625c:	e040      	b.n	80062e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc68 	bl	8006b36 <USBD_CtlError>
              break;
 8006266:	e03b      	b.n	80062e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	885b      	ldrh	r3, [r3, #2]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d136      	bne.n	80062de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f963 	bl	800754a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fd21 	bl	8006ccc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fde2 	bl	8005e58 <USBD_CoreFindEP>
 8006294:	4603      	mov	r3, r0
 8006296:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006298:	7b7b      	ldrb	r3, [r7, #13]
 800629a:	2bff      	cmp	r3, #255	; 0xff
 800629c:	d01f      	beq.n	80062de <USBD_StdEPReq+0x1c6>
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11c      	bne.n	80062de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062a4:	7b7a      	ldrb	r2, [r7, #13]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062ac:	7b7a      	ldrb	r2, [r7, #13]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32ae      	adds	r2, #174	; 0xae
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d010      	beq.n	80062de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062bc:	7b7a      	ldrb	r2, [r7, #13]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	32ae      	adds	r2, #174	; 0xae
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	6839      	ldr	r1, [r7, #0]
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80062d2:	e004      	b.n	80062de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fc2d 	bl	8006b36 <USBD_CtlError>
              break;
 80062dc:	e000      	b.n	80062e0 <USBD_StdEPReq+0x1c8>
              break;
 80062de:	bf00      	nop
          }
          break;
 80062e0:	e0ab      	b.n	800643a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d002      	beq.n	80062f4 <USBD_StdEPReq+0x1dc>
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d032      	beq.n	8006358 <USBD_StdEPReq+0x240>
 80062f2:	e097      	b.n	8006424 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <USBD_StdEPReq+0x1f2>
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d004      	beq.n	800630a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fc17 	bl	8006b36 <USBD_CtlError>
                break;
 8006308:	e091      	b.n	800642e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800630a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	da0b      	bge.n	800632a <USBD_StdEPReq+0x212>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	3310      	adds	r3, #16
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	3304      	adds	r3, #4
 8006328:	e00b      	b.n	8006342 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800632a:	7bbb      	ldrb	r3, [r7, #14]
 800632c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2202      	movs	r2, #2
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc61 	bl	8006c18 <USBD_CtlSendData>
              break;
 8006356:	e06a      	b.n	800642e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800635c:	2b00      	cmp	r3, #0
 800635e:	da11      	bge.n	8006384 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	f003 020f 	and.w	r2, r3, #15
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3324      	adds	r3, #36	; 0x24
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d117      	bne.n	80063aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fbda 	bl	8006b36 <USBD_CtlError>
                  break;
 8006382:	e054      	b.n	800642e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fbc7 	bl	8006b36 <USBD_CtlError>
                  break;
 80063a8:	e041      	b.n	800642e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da0b      	bge.n	80063ca <USBD_StdEPReq+0x2b2>
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	3310      	adds	r3, #16
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	3304      	adds	r3, #4
 80063c8:	e00b      	b.n	80063e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	3304      	adds	r3, #4
 80063e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <USBD_StdEPReq+0x2d8>
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b80      	cmp	r3, #128	; 0x80
 80063ee:	d103      	bne.n	80063f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e00e      	b.n	8006416 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f8c3 	bl	8007588 <USBD_LL_IsStallEP>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e002      	b.n	8006416 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2202      	movs	r2, #2
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fbfb 	bl	8006c18 <USBD_CtlSendData>
              break;
 8006422:	e004      	b.n	800642e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb85 	bl	8006b36 <USBD_CtlError>
              break;
 800642c:	bf00      	nop
          }
          break;
 800642e:	e004      	b.n	800643a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fb7f 	bl	8006b36 <USBD_CtlError>
          break;
 8006438:	bf00      	nop
      }
      break;
 800643a:	e005      	b.n	8006448 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fb79 	bl	8006b36 <USBD_CtlError>
      break;
 8006444:	e000      	b.n	8006448 <USBD_StdEPReq+0x330>
      break;
 8006446:	bf00      	nop
  }

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	885b      	ldrh	r3, [r3, #2]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	2b0e      	cmp	r3, #14
 8006476:	f200 8152 	bhi.w	800671e <USBD_GetDescriptor+0x2ca>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <USBD_GetDescriptor+0x2c>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	080064f1 	.word	0x080064f1
 8006484:	08006509 	.word	0x08006509
 8006488:	08006549 	.word	0x08006549
 800648c:	0800671f 	.word	0x0800671f
 8006490:	0800671f 	.word	0x0800671f
 8006494:	080066bf 	.word	0x080066bf
 8006498:	080066eb 	.word	0x080066eb
 800649c:	0800671f 	.word	0x0800671f
 80064a0:	0800671f 	.word	0x0800671f
 80064a4:	0800671f 	.word	0x0800671f
 80064a8:	0800671f 	.word	0x0800671f
 80064ac:	0800671f 	.word	0x0800671f
 80064b0:	0800671f 	.word	0x0800671f
 80064b4:	0800671f 	.word	0x0800671f
 80064b8:	080064bd 	.word	0x080064bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	7c12      	ldrb	r2, [r2, #16]
 80064d4:	f107 0108 	add.w	r1, r7, #8
 80064d8:	4610      	mov	r0, r2
 80064da:	4798      	blx	r3
 80064dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064de:	e126      	b.n	800672e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb27 	bl	8006b36 <USBD_CtlError>
        err++;
 80064e8:	7afb      	ldrb	r3, [r7, #11]
 80064ea:	3301      	adds	r3, #1
 80064ec:	72fb      	strb	r3, [r7, #11]
      break;
 80064ee:	e11e      	b.n	800672e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	7c12      	ldrb	r2, [r2, #16]
 80064fc:	f107 0108 	add.w	r1, r7, #8
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	60f8      	str	r0, [r7, #12]
      break;
 8006506:	e112      	b.n	800672e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	7c1b      	ldrb	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10d      	bne.n	800652c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006518:	f107 0208 	add.w	r2, r7, #8
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
 8006520:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	2202      	movs	r2, #2
 8006528:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800652a:	e100      	b.n	800672e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f107 0208 	add.w	r2, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	2202      	movs	r2, #2
 8006544:	701a      	strb	r2, [r3, #0]
      break;
 8006546:	e0f2      	b.n	800672e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	885b      	ldrh	r3, [r3, #2]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b05      	cmp	r3, #5
 8006550:	f200 80ac 	bhi.w	80066ac <USBD_GetDescriptor+0x258>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <USBD_GetDescriptor+0x108>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006575 	.word	0x08006575
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065dd 	.word	0x080065dd
 8006568:	08006611 	.word	0x08006611
 800656c:	08006645 	.word	0x08006645
 8006570:	08006679 	.word	0x08006679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	7c12      	ldrb	r2, [r2, #16]
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	4610      	mov	r0, r2
 8006592:	4798      	blx	r3
 8006594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006596:	e091      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 facb 	bl	8006b36 <USBD_CtlError>
            err++;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	3301      	adds	r3, #1
 80065a4:	72fb      	strb	r3, [r7, #11]
          break;
 80065a6:	e089      	b.n	80066bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	7c12      	ldrb	r2, [r2, #16]
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ca:	e077      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fab1 	bl	8006b36 <USBD_CtlError>
            err++;
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	3301      	adds	r3, #1
 80065d8:	72fb      	strb	r3, [r7, #11]
          break;
 80065da:	e06f      	b.n	80066bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fe:	e05d      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa97 	bl	8006b36 <USBD_CtlError>
            err++;
 8006608:	7afb      	ldrb	r3, [r7, #11]
 800660a:	3301      	adds	r3, #1
 800660c:	72fb      	strb	r3, [r7, #11]
          break;
 800660e:	e055      	b.n	80066bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	7c12      	ldrb	r2, [r2, #16]
 8006628:	f107 0108 	add.w	r1, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006632:	e043      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa7d 	bl	8006b36 <USBD_CtlError>
            err++;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	3301      	adds	r3, #1
 8006640:	72fb      	strb	r3, [r7, #11]
          break;
 8006642:	e03b      	b.n	80066bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	7c12      	ldrb	r2, [r2, #16]
 800665c:	f107 0108 	add.w	r1, r7, #8
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
 8006664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006666:	e029      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa63 	bl	8006b36 <USBD_CtlError>
            err++;
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	3301      	adds	r3, #1
 8006674:	72fb      	strb	r3, [r7, #11]
          break;
 8006676:	e021      	b.n	80066bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	7c12      	ldrb	r2, [r2, #16]
 8006690:	f107 0108 	add.w	r1, r7, #8
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800669a:	e00f      	b.n	80066bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa49 	bl	8006b36 <USBD_CtlError>
            err++;
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	3301      	adds	r3, #1
 80066a8:	72fb      	strb	r3, [r7, #11]
          break;
 80066aa:	e007      	b.n	80066bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa41 	bl	8006b36 <USBD_CtlError>
          err++;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	3301      	adds	r3, #1
 80066b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80066ba:	bf00      	nop
      }
      break;
 80066bc:	e037      	b.n	800672e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7c1b      	ldrb	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	f107 0208 	add.w	r2, r7, #8
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
 80066d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066d8:	e029      	b.n	800672e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa2a 	bl	8006b36 <USBD_CtlError>
        err++;
 80066e2:	7afb      	ldrb	r3, [r7, #11]
 80066e4:	3301      	adds	r3, #1
 80066e6:	72fb      	strb	r3, [r7, #11]
      break;
 80066e8:	e021      	b.n	800672e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7c1b      	ldrb	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f107 0208 	add.w	r2, r7, #8
 80066fe:	4610      	mov	r0, r2
 8006700:	4798      	blx	r3
 8006702:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	2207      	movs	r2, #7
 800670a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800670c:	e00f      	b.n	800672e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa10 	bl	8006b36 <USBD_CtlError>
        err++;
 8006716:	7afb      	ldrb	r3, [r7, #11]
 8006718:	3301      	adds	r3, #1
 800671a:	72fb      	strb	r3, [r7, #11]
      break;
 800671c:	e007      	b.n	800672e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fa08 	bl	8006b36 <USBD_CtlError>
      err++;
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	3301      	adds	r3, #1
 800672a:	72fb      	strb	r3, [r7, #11]
      break;
 800672c:	bf00      	nop
  }

  if (err != 0U)
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11e      	bne.n	8006772 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d016      	beq.n	800676a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800673c:	893b      	ldrh	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00e      	beq.n	8006760 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	88da      	ldrh	r2, [r3, #6]
 8006746:	893b      	ldrh	r3, [r7, #8]
 8006748:	4293      	cmp	r3, r2
 800674a:	bf28      	it	cs
 800674c:	4613      	movcs	r3, r2
 800674e:	b29b      	uxth	r3, r3
 8006750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006752:	893b      	ldrh	r3, [r7, #8]
 8006754:	461a      	mov	r2, r3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa5d 	bl	8006c18 <USBD_CtlSendData>
 800675e:	e009      	b.n	8006774 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f9e7 	bl	8006b36 <USBD_CtlError>
 8006768:	e004      	b.n	8006774 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 faae 	bl	8006ccc <USBD_CtlSendStatus>
 8006770:	e000      	b.n	8006774 <USBD_GetDescriptor+0x320>
    return;
 8006772:	bf00      	nop
  }
}
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop

0800677c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	889b      	ldrh	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d131      	bne.n	80067f2 <USBD_SetAddress+0x76>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	88db      	ldrh	r3, [r3, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d12d      	bne.n	80067f2 <USBD_SetAddress+0x76>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	2b7f      	cmp	r3, #127	; 0x7f
 800679c:	d829      	bhi.n	80067f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	885b      	ldrh	r3, [r3, #2]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d104      	bne.n	80067c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9bc 	bl	8006b36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067be:	e01d      	b.n	80067fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ff07 	bl	80075e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa7a 	bl	8006ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e6:	e009      	b.n	80067fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f0:	e004      	b.n	80067fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f99e 	bl	8006b36 <USBD_CtlError>
  }
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	885b      	ldrh	r3, [r3, #2]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	4b4e      	ldr	r3, [pc, #312]	; (8006954 <USBD_SetConfig+0x150>)
 800681a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800681c:	4b4d      	ldr	r3, [pc, #308]	; (8006954 <USBD_SetConfig+0x150>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d905      	bls.n	8006830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f985 	bl	8006b36 <USBD_CtlError>
    return USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	e08c      	b.n	800694a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d002      	beq.n	8006842 <USBD_SetConfig+0x3e>
 800683c:	2b03      	cmp	r3, #3
 800683e:	d029      	beq.n	8006894 <USBD_SetConfig+0x90>
 8006840:	e075      	b.n	800692e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006842:	4b44      	ldr	r3, [pc, #272]	; (8006954 <USBD_SetConfig+0x150>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d020      	beq.n	800688c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800684a:	4b42      	ldr	r3, [pc, #264]	; (8006954 <USBD_SetConfig+0x150>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006854:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <USBD_SetConfig+0x150>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fe ffbd 	bl	80057da <USBD_SetClassConfig>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d008      	beq.n	800687c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f962 	bl	8006b36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800687a:	e065      	b.n	8006948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fa25 	bl	8006ccc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2203      	movs	r2, #3
 8006886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800688a:	e05d      	b.n	8006948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fa1d 	bl	8006ccc <USBD_CtlSendStatus>
      break;
 8006892:	e059      	b.n	8006948 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006894:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <USBD_SetConfig+0x150>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d112      	bne.n	80068c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80068a4:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <USBD_SetConfig+0x150>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <USBD_SetConfig+0x150>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe ffac 	bl	8005812 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa06 	bl	8006ccc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068c0:	e042      	b.n	8006948 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <USBD_SetConfig+0x150>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d02a      	beq.n	8006926 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fe ff9a 	bl	8005812 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <USBD_SetConfig+0x150>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068e8:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <USBD_SetConfig+0x150>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fe ff73 	bl	80057da <USBD_SetClassConfig>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00f      	beq.n	800691e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f918 	bl	8006b36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fe ff7f 	bl	8005812 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800691c:	e014      	b.n	8006948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9d4 	bl	8006ccc <USBD_CtlSendStatus>
      break;
 8006924:	e010      	b.n	8006948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9d0 	bl	8006ccc <USBD_CtlSendStatus>
      break;
 800692c:	e00c      	b.n	8006948 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f900 	bl	8006b36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006936:	4b07      	ldr	r3, [pc, #28]	; (8006954 <USBD_SetConfig+0x150>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe ff68 	bl	8005812 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	73fb      	strb	r3, [r7, #15]
      break;
 8006946:	bf00      	nop
  }

  return ret;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000130 	.word	0x20000130

08006958 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d004      	beq.n	8006974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8e2 	bl	8006b36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006972:	e023      	b.n	80069bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	dc02      	bgt.n	8006986 <USBD_GetConfig+0x2e>
 8006980:	2b00      	cmp	r3, #0
 8006982:	dc03      	bgt.n	800698c <USBD_GetConfig+0x34>
 8006984:	e015      	b.n	80069b2 <USBD_GetConfig+0x5a>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d00b      	beq.n	80069a2 <USBD_GetConfig+0x4a>
 800698a:	e012      	b.n	80069b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3308      	adds	r3, #8
 8006996:	2201      	movs	r2, #1
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f93c 	bl	8006c18 <USBD_CtlSendData>
        break;
 80069a0:	e00c      	b.n	80069bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	2201      	movs	r2, #1
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f934 	bl	8006c18 <USBD_CtlSendData>
        break;
 80069b0:	e004      	b.n	80069bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f8be 	bl	8006b36 <USBD_CtlError>
        break;
 80069ba:	bf00      	nop
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d81e      	bhi.n	8006a1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	88db      	ldrh	r3, [r3, #6]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d004      	beq.n	80069ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8a5 	bl	8006b36 <USBD_CtlError>
        break;
 80069ec:	e01a      	b.n	8006a24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f043 0202 	orr.w	r2, r3, #2
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	2202      	movs	r2, #2
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f900 	bl	8006c18 <USBD_CtlSendData>
      break;
 8006a18:	e004      	b.n	8006a24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f88a 	bl	8006b36 <USBD_CtlError>
      break;
 8006a22:	bf00      	nop
  }
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f940 	bl	8006ccc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a4c:	e013      	b.n	8006a76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d10b      	bne.n	8006a6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	0a1b      	lsrs	r3, r3, #8
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f930 	bl	8006ccc <USBD_CtlSendStatus>
}
 8006a6c:	e003      	b.n	8006a76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f860 	bl	8006b36 <USBD_CtlError>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d80b      	bhi.n	8006aae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	885b      	ldrh	r3, [r3, #2]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d10c      	bne.n	8006ab8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f910 	bl	8006ccc <USBD_CtlSendStatus>
      }
      break;
 8006aac:	e004      	b.n	8006ab8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f840 	bl	8006b36 <USBD_CtlError>
      break;
 8006ab6:	e000      	b.n	8006aba <USBD_ClrFeature+0x3c>
      break;
 8006ab8:	bf00      	nop
  }
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff fa17 	bl	8005f20 <SWAPBYTE>
 8006af2:	4603      	mov	r3, r0
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fa0a 	bl	8005f20 <SWAPBYTE>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff f9fd 	bl	8005f20 <SWAPBYTE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	80da      	strh	r2, [r3, #6]
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b40:	2180      	movs	r1, #128	; 0x80
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fce2 	bl	800750c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fcde 	bl	800750c <USBD_LL_StallEP>
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d036      	beq.n	8006bdc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f000 f836 	bl	8006be4 <USBD_GetLen>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	3301      	adds	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ba8:	e013      	b.n	8006bd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	4413      	add	r3, r2
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	7812      	ldrb	r2, [r2, #0]
 8006bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	613b      	str	r3, [r7, #16]
    idx++;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e7      	bne.n	8006baa <USBD_GetString+0x52>
 8006bda:	e000      	b.n	8006bde <USBD_GetString+0x86>
    return;
 8006bdc:	bf00      	nop
  }
}
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006bf4:	e005      	b.n	8006c02 <USBD_GetLen+0x1e>
  {
    len++;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f5      	bne.n	8006bf6 <USBD_GetLen+0x12>
  }

  return len;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fced 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	2100      	movs	r1, #0
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fcdc 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 fce0 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fccf 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc9b 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fca9 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4912      	ldr	r1, [pc, #72]	; (8006d68 <MX_USB_DEVICE_Init+0x50>)
 8006d20:	4812      	ldr	r0, [pc, #72]	; (8006d6c <MX_USB_DEVICE_Init+0x54>)
 8006d22:	f7fe fcdd 	bl	80056e0 <USBD_Init>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d2c:	f7f9 fcc6 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d30:	490f      	ldr	r1, [pc, #60]	; (8006d70 <MX_USB_DEVICE_Init+0x58>)
 8006d32:	480e      	ldr	r0, [pc, #56]	; (8006d6c <MX_USB_DEVICE_Init+0x54>)
 8006d34:	f7fe fd04 	bl	8005740 <USBD_RegisterClass>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d3e:	f7f9 fcbd 	bl	80006bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d42:	490c      	ldr	r1, [pc, #48]	; (8006d74 <MX_USB_DEVICE_Init+0x5c>)
 8006d44:	4809      	ldr	r0, [pc, #36]	; (8006d6c <MX_USB_DEVICE_Init+0x54>)
 8006d46:	f7fe fc3b 	bl	80055c0 <USBD_CDC_RegisterInterface>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d50:	f7f9 fcb4 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d54:	4805      	ldr	r0, [pc, #20]	; (8006d6c <MX_USB_DEVICE_Init+0x54>)
 8006d56:	f7fe fd29 	bl	80057ac <USBD_Start>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d60:	f7f9 fcac 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d64:	bf00      	nop
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200000ac 	.word	0x200000ac
 8006d6c:	20000134 	.word	0x20000134
 8006d70:	20000018 	.word	0x20000018
 8006d74:	20000098 	.word	0x20000098

08006d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4905      	ldr	r1, [pc, #20]	; (8006d94 <CDC_Init_FS+0x1c>)
 8006d80:	4805      	ldr	r0, [pc, #20]	; (8006d98 <CDC_Init_FS+0x20>)
 8006d82:	f7fe fc37 	bl	80055f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d86:	4905      	ldr	r1, [pc, #20]	; (8006d9c <CDC_Init_FS+0x24>)
 8006d88:	4803      	ldr	r0, [pc, #12]	; (8006d98 <CDC_Init_FS+0x20>)
 8006d8a:	f7fe fc55 	bl	8005638 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000c10 	.word	0x20000c10
 8006d98:	20000134 	.word	0x20000134
 8006d9c:	20000410 	.word	0x20000410

08006da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	6039      	str	r1, [r7, #0]
 8006dba:	71fb      	strb	r3, [r7, #7]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b23      	cmp	r3, #35	; 0x23
 8006dc4:	d84a      	bhi.n	8006e5c <CDC_Control_FS+0xac>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <CDC_Control_FS+0x1c>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006e5d 	.word	0x08006e5d
 8006dd0:	08006e5d 	.word	0x08006e5d
 8006dd4:	08006e5d 	.word	0x08006e5d
 8006dd8:	08006e5d 	.word	0x08006e5d
 8006ddc:	08006e5d 	.word	0x08006e5d
 8006de0:	08006e5d 	.word	0x08006e5d
 8006de4:	08006e5d 	.word	0x08006e5d
 8006de8:	08006e5d 	.word	0x08006e5d
 8006dec:	08006e5d 	.word	0x08006e5d
 8006df0:	08006e5d 	.word	0x08006e5d
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006e5d 	.word	0x08006e5d
 8006dfc:	08006e5d 	.word	0x08006e5d
 8006e00:	08006e5d 	.word	0x08006e5d
 8006e04:	08006e5d 	.word	0x08006e5d
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006e5d 	.word	0x08006e5d
 8006e10:	08006e5d 	.word	0x08006e5d
 8006e14:	08006e5d 	.word	0x08006e5d
 8006e18:	08006e5d 	.word	0x08006e5d
 8006e1c:	08006e5d 	.word	0x08006e5d
 8006e20:	08006e5d 	.word	0x08006e5d
 8006e24:	08006e5d 	.word	0x08006e5d
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e5d 	.word	0x08006e5d
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e5d 	.word	0x08006e5d
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e5d 	.word	0x08006e5d
 8006e50:	08006e5d 	.word	0x08006e5d
 8006e54:	08006e5d 	.word	0x08006e5d
 8006e58:	08006e5d 	.word	0x08006e5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e5c:	bf00      	nop
  }

  return (USBD_OK);
 8006e5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t Len)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4805      	ldr	r0, [pc, #20]	; (8006e90 <CDC_Receive_FS+0x24>)
 8006e7a:	f7fe fbdd 	bl	8005638 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e7e:	4804      	ldr	r0, [pc, #16]	; (8006e90 <CDC_Receive_FS+0x24>)
 8006e80:	f7fe fbf8 	bl	8005674 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000134 	.word	0x20000134

08006e94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2212      	movs	r2, #18
 8006ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006eca:	4b03      	ldr	r3, [pc, #12]	; (8006ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	200000cc 	.word	0x200000cc

08006edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6039      	str	r1, [r7, #0]
 8006ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2204      	movs	r2, #4
 8006eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006eee:	4b03      	ldr	r3, [pc, #12]	; (8006efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	200000ec 	.word	0x200000ec

08006f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4907      	ldr	r1, [pc, #28]	; (8006f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f16:	4808      	ldr	r0, [pc, #32]	; (8006f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f18:	f7ff fe1e 	bl	8006b58 <USBD_GetString>
 8006f1c:	e004      	b.n	8006f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4904      	ldr	r1, [pc, #16]	; (8006f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f22:	4805      	ldr	r0, [pc, #20]	; (8006f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f24:	f7ff fe18 	bl	8006b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f28:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20001410 	.word	0x20001410
 8006f38:	0800785c 	.word	0x0800785c

08006f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	4904      	ldr	r1, [pc, #16]	; (8006f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f4c:	4804      	ldr	r0, [pc, #16]	; (8006f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f4e:	f7ff fe03 	bl	8006b58 <USBD_GetString>
  return USBD_StrDesc;
 8006f52:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20001410 	.word	0x20001410
 8006f60:	08007874 	.word	0x08007874

08006f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	221a      	movs	r2, #26
 8006f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f76:	f000 f855 	bl	8007024 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f7a:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	200000f0 	.word	0x200000f0

08006f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4907      	ldr	r1, [pc, #28]	; (8006fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f9e:	4808      	ldr	r0, [pc, #32]	; (8006fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fa0:	f7ff fdda 	bl	8006b58 <USBD_GetString>
 8006fa4:	e004      	b.n	8006fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4904      	ldr	r1, [pc, #16]	; (8006fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006faa:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fac:	f7ff fdd4 	bl	8006b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20001410 	.word	0x20001410
 8006fc0:	08007888 	.word	0x08007888

08006fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4907      	ldr	r1, [pc, #28]	; (8006ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fda:	4808      	ldr	r0, [pc, #32]	; (8006ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fdc:	f7ff fdbc 	bl	8006b58 <USBD_GetString>
 8006fe0:	e004      	b.n	8006fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fe8:	f7ff fdb6 	bl	8006b58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fec:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001410 	.word	0x20001410
 8006ffc:	08007894 	.word	0x08007894

08007000 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	220c      	movs	r2, #12
 8007010:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007012:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	200000e0 	.word	0x200000e0

08007024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800702a:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <Get_SerialNum+0x44>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <Get_SerialNum+0x48>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007036:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <Get_SerialNum+0x4c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4413      	add	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800704a:	2208      	movs	r2, #8
 800704c:	4909      	ldr	r1, [pc, #36]	; (8007074 <Get_SerialNum+0x50>)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f814 	bl	800707c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007054:	2204      	movs	r2, #4
 8007056:	4908      	ldr	r1, [pc, #32]	; (8007078 <Get_SerialNum+0x54>)
 8007058:	68b8      	ldr	r0, [r7, #8]
 800705a:	f000 f80f 	bl	800707c <IntToUnicode>
  }
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	1fff7a10 	.word	0x1fff7a10
 800706c:	1fff7a14 	.word	0x1fff7a14
 8007070:	1fff7a18 	.word	0x1fff7a18
 8007074:	200000f2 	.word	0x200000f2
 8007078:	20000102 	.word	0x20000102

0800707c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800708e:	2300      	movs	r3, #0
 8007090:	75fb      	strb	r3, [r7, #23]
 8007092:	e027      	b.n	80070e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	2b09      	cmp	r3, #9
 800709a:	d80b      	bhi.n	80070b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0f1b      	lsrs	r3, r3, #28
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4619      	mov	r1, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	440b      	add	r3, r1
 80070ac:	3230      	adds	r2, #48	; 0x30
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e00a      	b.n	80070ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	0f1b      	lsrs	r3, r3, #28
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	4619      	mov	r1, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	440b      	add	r3, r1
 80070c4:	3237      	adds	r2, #55	; 0x37
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	3301      	adds	r3, #1
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	4413      	add	r3, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	3301      	adds	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
 80070e4:	7dfa      	ldrb	r2, [r7, #23]
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3d3      	bcc.n	8007094 <IntToUnicode+0x18>
  }
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
	...

080070fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b0a0      	sub	sp, #128	; 0x80
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007104:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007114:	f107 0310 	add.w	r3, r7, #16
 8007118:	225c      	movs	r2, #92	; 0x5c
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fb89 	bl	8007834 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800712a:	d149      	bne.n	80071c0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800712c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007130:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007132:	2300      	movs	r3, #0
 8007134:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007136:	f107 0310 	add.w	r3, r7, #16
 800713a:	4618      	mov	r0, r3
 800713c:	f7fb fa86 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007146:	f7f9 fab9 	bl	80006bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	4a1d      	ldr	r2, [pc, #116]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	6313      	str	r3, [r2, #48]	; 0x30
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007166:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800716a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800716c:	2302      	movs	r3, #2
 800716e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007170:	2300      	movs	r3, #0
 8007172:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007174:	2303      	movs	r3, #3
 8007176:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007178:	230a      	movs	r3, #10
 800717a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800717c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007180:	4619      	mov	r1, r3
 8007182:	4812      	ldr	r0, [pc, #72]	; (80071cc <HAL_PCD_MspInit+0xd0>)
 8007184:	f7f9 fce0 	bl	8000b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 800718e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007192:	6353      	str	r3, [r2, #52]	; 0x34
 8007194:	2300      	movs	r3, #0
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 800719e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071a2:	6453      	str	r3, [r2, #68]	; 0x44
 80071a4:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <HAL_PCD_MspInit+0xcc>)
 80071a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	2043      	movs	r0, #67	; 0x43
 80071b6:	f7f9 fc90 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071ba:	2043      	movs	r0, #67	; 0x43
 80071bc:	f7f9 fca9 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071c0:	bf00      	nop
 80071c2:	3780      	adds	r7, #128	; 0x80
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40020000 	.word	0x40020000

080071d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7fe fb2d 	bl	8005846 <USBD_LL_SetupStage>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	4619      	mov	r1, r3
 800721e:	f7fe fb67 	bl	80058f0 <USBD_LL_DataOutStage>
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	334c      	adds	r3, #76	; 0x4c
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	4619      	mov	r1, r3
 8007252:	f7fe fc00 	bl	8005a56 <USBD_LL_DataInStage>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe fd34 	bl	8005cda <USBD_LL_SOF>
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007282:	2301      	movs	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
 8007292:	e008      	b.n	80072a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d102      	bne.n	80072a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800729c:	2301      	movs	r3, #1
 800729e:	73fb      	strb	r3, [r7, #15]
 80072a0:	e001      	b.n	80072a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072a2:	f7f9 fa0b 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fcd4 	bl	8005c5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe fc7c 	bl	8005bba <USBD_LL_Reset>
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fccf 	bl	8005c7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007300:	4b04      	ldr	r3, [pc, #16]	; (8007314 <HAL_PCD_SuspendCallback+0x48>)
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4a03      	ldr	r2, [pc, #12]	; (8007314 <HAL_PCD_SuspendCallback+0x48>)
 8007306:	f043 0306 	orr.w	r3, r3, #6
 800730a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fcbf 	bl	8005caa <USBD_LL_Resume>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fd17 	bl	8005d7e <USBD_LL_IsoOUTIncomplete>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fcd3 	bl	8005d1a <USBD_LL_IsoINIncomplete>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fd29 	bl	8005de2 <USBD_LL_DevConnected>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fd26 	bl	8005df8 <USBD_LL_DevDisconnected>
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d13c      	bne.n	800743e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073c4:	4a20      	ldr	r2, [pc, #128]	; (8007448 <USBD_LL_Init+0x94>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a1e      	ldr	r2, [pc, #120]	; (8007448 <USBD_LL_Init+0x94>)
 80073d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073d4:	4b1c      	ldr	r3, [pc, #112]	; (8007448 <USBD_LL_Init+0x94>)
 80073d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <USBD_LL_Init+0x94>)
 80073de:	2206      	movs	r2, #6
 80073e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073e2:	4b19      	ldr	r3, [pc, #100]	; (8007448 <USBD_LL_Init+0x94>)
 80073e4:	2202      	movs	r2, #2
 80073e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <USBD_LL_Init+0x94>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073ee:	4b16      	ldr	r3, [pc, #88]	; (8007448 <USBD_LL_Init+0x94>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073f4:	4b14      	ldr	r3, [pc, #80]	; (8007448 <USBD_LL_Init+0x94>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <USBD_LL_Init+0x94>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007400:	4b11      	ldr	r3, [pc, #68]	; (8007448 <USBD_LL_Init+0x94>)
 8007402:	2200      	movs	r2, #0
 8007404:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007406:	4b10      	ldr	r3, [pc, #64]	; (8007448 <USBD_LL_Init+0x94>)
 8007408:	2200      	movs	r2, #0
 800740a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <USBD_LL_Init+0x94>)
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007412:	480d      	ldr	r0, [pc, #52]	; (8007448 <USBD_LL_Init+0x94>)
 8007414:	f7f9 fd5f 	bl	8000ed6 <HAL_PCD_Init>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800741e:	f7f9 f94d 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007422:	2180      	movs	r1, #128	; 0x80
 8007424:	4808      	ldr	r0, [pc, #32]	; (8007448 <USBD_LL_Init+0x94>)
 8007426:	f7fa ffea 	bl	80023fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800742a:	2240      	movs	r2, #64	; 0x40
 800742c:	2100      	movs	r1, #0
 800742e:	4806      	ldr	r0, [pc, #24]	; (8007448 <USBD_LL_Init+0x94>)
 8007430:	f7fa ff9e 	bl	8002370 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007434:	2280      	movs	r2, #128	; 0x80
 8007436:	2101      	movs	r1, #1
 8007438:	4803      	ldr	r0, [pc, #12]	; (8007448 <USBD_LL_Init+0x94>)
 800743a:	f7fa ff99 	bl	8002370 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20001610 	.word	0x20001610

0800744c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007462:	4618      	mov	r0, r3
 8007464:	f7f9 fe5b 	bl	800111e <HAL_PCD_Start>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f990 	bl	8007794 <USBD_Get_USB_Status>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007478:	7bbb      	ldrb	r3, [r7, #14]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	461a      	mov	r2, r3
 8007490:	4603      	mov	r3, r0
 8007492:	70fb      	strb	r3, [r7, #3]
 8007494:	460b      	mov	r3, r1
 8007496:	70bb      	strb	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074aa:	78bb      	ldrb	r3, [r7, #2]
 80074ac:	883a      	ldrh	r2, [r7, #0]
 80074ae:	78f9      	ldrb	r1, [r7, #3]
 80074b0:	f7fa fb59 	bl	8001b66 <HAL_PCD_EP_Open>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f96a 	bl	8007794 <USBD_Get_USB_Status>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fa fba2 	bl	8001c36 <HAL_PCD_EP_Close>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f94b 	bl	8007794 <USBD_Get_USB_Status>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007502:	7bbb      	ldrb	r3, [r7, #14]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fa fc7a 	bl	8001e24 <HAL_PCD_EP_SetStall>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f92c 	bl	8007794 <USBD_Get_USB_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007540:	7bbb      	ldrb	r3, [r7, #14]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa fcbf 	bl	8001eec <HAL_PCD_EP_ClrStall>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f90d 	bl	8007794 <USBD_Get_USB_Status>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800759a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800759c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da0b      	bge.n	80075bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	333e      	adds	r3, #62	; 0x3e
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	e00b      	b.n	80075d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80075d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fa fa8c 	bl	8001b1c <HAL_PCD_SetAddress>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f8c2 	bl	8007794 <USBD_Get_USB_Status>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007614:	7bbb      	ldrb	r3, [r7, #14]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	460b      	mov	r3, r1
 800762c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800763c:	7af9      	ldrb	r1, [r7, #11]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	f7fa fba5 	bl	8001d90 <HAL_PCD_EP_Transmit>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f8a1 	bl	8007794 <USBD_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007656:	7dbb      	ldrb	r3, [r7, #22]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	460b      	mov	r3, r1
 800766e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800767e:	7af9      	ldrb	r1, [r7, #11]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	f7fa fb21 	bl	8001cca <HAL_PCD_EP_Receive>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f880 	bl	8007794 <USBD_Get_USB_Status>
 8007694:	4603      	mov	r3, r0
 8007696:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007698:	7dbb      	ldrb	r3, [r7, #22]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fa fb51 	bl	8001d60 <HAL_PCD_EP_GetRxCount>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_PCDEx_LPM_Callback+0x18>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d01f      	beq.n	800771e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80076de:	e03b      	b.n	8007758 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80076e8:	f7f8 ff7c 	bl	80005e4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80076ec:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <HAL_PCDEx_LPM_Callback+0x98>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <HAL_PCDEx_LPM_Callback+0x98>)
 80076f2:	f023 0306 	bic.w	r3, r3, #6
 80076f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fac7 	bl	8005caa <USBD_LL_Resume>
    break;
 800771c:	e01c      	b.n	8007758 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fa9e 	bl	8005c7e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <HAL_PCDEx_LPM_Callback+0x98>)
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	4a04      	ldr	r2, [pc, #16]	; (8007760 <HAL_PCDEx_LPM_Callback+0x98>)
 8007750:	f043 0306 	orr.w	r3, r3, #6
 8007754:	6113      	str	r3, [r2, #16]
    break;
 8007756:	bf00      	nop
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	e000ed00 	.word	0xe000ed00

08007764 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_static_malloc+0x18>)
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20001b1c 	.word	0x20001b1c

08007780 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d817      	bhi.n	80077d8 <USBD_Get_USB_Status+0x44>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <USBD_Get_USB_Status+0x1c>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	080077c7 	.word	0x080077c7
 80077b8:	080077cd 	.word	0x080077cd
 80077bc:	080077d3 	.word	0x080077d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
    break;
 80077c4:	e00b      	b.n	80077de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077c6:	2303      	movs	r3, #3
 80077c8:	73fb      	strb	r3, [r7, #15]
    break;
 80077ca:	e008      	b.n	80077de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
    break;
 80077d0:	e005      	b.n	80077de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077d2:	2303      	movs	r3, #3
 80077d4:	73fb      	strb	r3, [r7, #15]
    break;
 80077d6:	e002      	b.n	80077de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077d8:	2303      	movs	r3, #3
 80077da:	73fb      	strb	r3, [r7, #15]
    break;
 80077dc:	bf00      	nop
  }
  return usb_status;
 80077de:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <__libc_init_array>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	4d0d      	ldr	r5, [pc, #52]	; (8007824 <__libc_init_array+0x38>)
 80077f0:	4c0d      	ldr	r4, [pc, #52]	; (8007828 <__libc_init_array+0x3c>)
 80077f2:	1b64      	subs	r4, r4, r5
 80077f4:	10a4      	asrs	r4, r4, #2
 80077f6:	2600      	movs	r6, #0
 80077f8:	42a6      	cmp	r6, r4
 80077fa:	d109      	bne.n	8007810 <__libc_init_array+0x24>
 80077fc:	4d0b      	ldr	r5, [pc, #44]	; (800782c <__libc_init_array+0x40>)
 80077fe:	4c0c      	ldr	r4, [pc, #48]	; (8007830 <__libc_init_array+0x44>)
 8007800:	f000 f820 	bl	8007844 <_init>
 8007804:	1b64      	subs	r4, r4, r5
 8007806:	10a4      	asrs	r4, r4, #2
 8007808:	2600      	movs	r6, #0
 800780a:	42a6      	cmp	r6, r4
 800780c:	d105      	bne.n	800781a <__libc_init_array+0x2e>
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	f855 3b04 	ldr.w	r3, [r5], #4
 8007814:	4798      	blx	r3
 8007816:	3601      	adds	r6, #1
 8007818:	e7ee      	b.n	80077f8 <__libc_init_array+0xc>
 800781a:	f855 3b04 	ldr.w	r3, [r5], #4
 800781e:	4798      	blx	r3
 8007820:	3601      	adds	r6, #1
 8007822:	e7f2      	b.n	800780a <__libc_init_array+0x1e>
 8007824:	080078bc 	.word	0x080078bc
 8007828:	080078bc 	.word	0x080078bc
 800782c:	080078bc 	.word	0x080078bc
 8007830:	080078c0 	.word	0x080078c0

08007834 <memset>:
 8007834:	4402      	add	r2, r0
 8007836:	4603      	mov	r3, r0
 8007838:	4293      	cmp	r3, r2
 800783a:	d100      	bne.n	800783e <memset+0xa>
 800783c:	4770      	bx	lr
 800783e:	f803 1b01 	strb.w	r1, [r3], #1
 8007842:	e7f9      	b.n	8007838 <memset+0x4>

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
